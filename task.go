// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/task"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Type holds the value of the "type" field.
	Type task.Type `json:"type,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID string `json:"package_id,omitempty"`
	// PackageName holds the value of the "package_name" field.
	PackageName string `json:"package_name,omitempty"`
	// PackageLatest holds the value of the "package_latest" field.
	PackageLatest bool `json:"package_latest,omitempty"`
	// RegistryKey holds the value of the "registry_key" field.
	RegistryKey string `json:"registry_key,omitempty"`
	// RegistryKeyValueName holds the value of the "registry_key_value_name" field.
	RegistryKeyValueName string `json:"registry_key_value_name,omitempty"`
	// RegistryKeyValueType holds the value of the "registry_key_value_type" field.
	RegistryKeyValueType task.RegistryKeyValueType `json:"registry_key_value_type,omitempty"`
	// RegistryKeyValueData holds the value of the "registry_key_value_data" field.
	RegistryKeyValueData string `json:"registry_key_value_data,omitempty"`
	// RegistryHex holds the value of the "registry_hex" field.
	RegistryHex bool `json:"registry_hex,omitempty"`
	// RegistryForce holds the value of the "registry_force" field.
	RegistryForce bool `json:"registry_force,omitempty"`
	// LocalUserUsername holds the value of the "local_user_username" field.
	LocalUserUsername string `json:"local_user_username,omitempty"`
	// LocalUserDescription holds the value of the "local_user_description" field.
	LocalUserDescription string `json:"local_user_description,omitempty"`
	// LocalUserDisable holds the value of the "local_user_disable" field.
	LocalUserDisable bool `json:"local_user_disable,omitempty"`
	// LocalUserFullname holds the value of the "local_user_fullname" field.
	LocalUserFullname string `json:"local_user_fullname,omitempty"`
	// LocalUserPassword holds the value of the "local_user_password" field.
	LocalUserPassword string `json:"local_user_password,omitempty"`
	// LocalUserPasswordChangeNotAllowed holds the value of the "local_user_password_change_not_allowed" field.
	LocalUserPasswordChangeNotAllowed bool `json:"local_user_password_change_not_allowed,omitempty"`
	// LocalUserPasswordChangeRequired holds the value of the "local_user_password_change_required" field.
	LocalUserPasswordChangeRequired bool `json:"local_user_password_change_required,omitempty"`
	// LocalUserPasswordNeverExpires holds the value of the "local_user_password_never_expires" field.
	LocalUserPasswordNeverExpires bool `json:"local_user_password_never_expires,omitempty"`
	// LocalUserAppend holds the value of the "local_user_append" field.
	LocalUserAppend bool `json:"local_user_append,omitempty"`
	// LocalUserCreateHome holds the value of the "local_user_create_home" field.
	LocalUserCreateHome bool `json:"local_user_create_home,omitempty"`
	// LocalUserExpires holds the value of the "local_user_expires" field.
	LocalUserExpires string `json:"local_user_expires,omitempty"`
	// LocalUserForce holds the value of the "local_user_force" field.
	LocalUserForce bool `json:"local_user_force,omitempty"`
	// LocalUserGenerateSSHKey holds the value of the "local_user_generate_ssh_key" field.
	LocalUserGenerateSSHKey bool `json:"local_user_generate_ssh_key,omitempty"`
	// LocalUserGroup holds the value of the "local_user_group" field.
	LocalUserGroup string `json:"local_user_group,omitempty"`
	// LocalUserGroups holds the value of the "local_user_groups" field.
	LocalUserGroups string `json:"local_user_groups,omitempty"`
	// LocalUserHome holds the value of the "local_user_home" field.
	LocalUserHome string `json:"local_user_home,omitempty"`
	// LocalUserMoveHome holds the value of the "local_user_move_home" field.
	LocalUserMoveHome bool `json:"local_user_move_home,omitempty"`
	// LocalUserNonunique holds the value of the "local_user_nonunique" field.
	LocalUserNonunique bool `json:"local_user_nonunique,omitempty"`
	// LocalUserPasswordExpireAccountDisable holds the value of the "local_user_password_expire_account_disable" field.
	LocalUserPasswordExpireAccountDisable string `json:"local_user_password_expire_account_disable,omitempty"`
	// LocalUserPasswordExpireMax holds the value of the "local_user_password_expire_max" field.
	LocalUserPasswordExpireMax string `json:"local_user_password_expire_max,omitempty"`
	// LocalUserPasswordExpireMin holds the value of the "local_user_password_expire_min" field.
	LocalUserPasswordExpireMin string `json:"local_user_password_expire_min,omitempty"`
	// LocalUserPasswordExpireWarn holds the value of the "local_user_password_expire_warn" field.
	LocalUserPasswordExpireWarn string `json:"local_user_password_expire_warn,omitempty"`
	// LocalUserPasswordLock holds the value of the "local_user_password_lock" field.
	LocalUserPasswordLock bool `json:"local_user_password_lock,omitempty"`
	// LocalUserSeuser holds the value of the "local_user_seuser" field.
	LocalUserSeuser string `json:"local_user_seuser,omitempty"`
	// LocalUserShell holds the value of the "local_user_shell" field.
	LocalUserShell string `json:"local_user_shell,omitempty"`
	// LocalUserSkeleton holds the value of the "local_user_skeleton" field.
	LocalUserSkeleton string `json:"local_user_skeleton,omitempty"`
	// LocalUserSystem holds the value of the "local_user_system" field.
	LocalUserSystem bool `json:"local_user_system,omitempty"`
	// LocalUserID holds the value of the "local_user_id" field.
	LocalUserID string `json:"local_user_id,omitempty"`
	// LocalUserIDMax holds the value of the "local_user_id_max" field.
	LocalUserIDMax string `json:"local_user_id_max,omitempty"`
	// LocalUserIDMin holds the value of the "local_user_id_min" field.
	LocalUserIDMin string `json:"local_user_id_min,omitempty"`
	// LocalUserSSHKeyBits holds the value of the "local_user_ssh_key_bits" field.
	LocalUserSSHKeyBits string `json:"local_user_ssh_key_bits,omitempty"`
	// LocalUserSSHKeyComment holds the value of the "local_user_ssh_key_comment" field.
	LocalUserSSHKeyComment string `json:"local_user_ssh_key_comment,omitempty"`
	// LocalUserSSHKeyFile holds the value of the "local_user_ssh_key_file" field.
	LocalUserSSHKeyFile string `json:"local_user_ssh_key_file,omitempty"`
	// LocalUserSSHKeyPassphrase holds the value of the "local_user_ssh_key_passphrase" field.
	LocalUserSSHKeyPassphrase string `json:"local_user_ssh_key_passphrase,omitempty"`
	// LocalUserSSHKeyType holds the value of the "local_user_ssh_key_type" field.
	LocalUserSSHKeyType string `json:"local_user_ssh_key_type,omitempty"`
	// LocalUserUmask holds the value of the "local_user_umask" field.
	LocalUserUmask string `json:"local_user_umask,omitempty"`
	// LocalGroupID holds the value of the "local_group_id" field.
	LocalGroupID string `json:"local_group_id,omitempty"`
	// LocalGroupName holds the value of the "local_group_name" field.
	LocalGroupName string `json:"local_group_name,omitempty"`
	// LocalGroupDescription holds the value of the "local_group_description" field.
	LocalGroupDescription string `json:"local_group_description,omitempty"`
	// LocalGroupSystem holds the value of the "local_group_system" field.
	LocalGroupSystem bool `json:"local_group_system,omitempty"`
	// LocalGroupForce holds the value of the "local_group_force" field.
	LocalGroupForce bool `json:"local_group_force,omitempty"`
	// LocalGroupMembers holds the value of the "local_group_members" field.
	LocalGroupMembers string `json:"local_group_members,omitempty"`
	// LocalGroupMembersToInclude holds the value of the "local_group_members_to_include" field.
	LocalGroupMembersToInclude string `json:"local_group_members_to_include,omitempty"`
	// LocalGroupMembersToExclude holds the value of the "local_group_members_to_exclude" field.
	LocalGroupMembersToExclude string `json:"local_group_members_to_exclude,omitempty"`
	// MsiProductid holds the value of the "msi_productid" field.
	MsiProductid string `json:"msi_productid,omitempty"`
	// MsiPath holds the value of the "msi_path" field.
	MsiPath string `json:"msi_path,omitempty"`
	// MsiArguments holds the value of the "msi_arguments" field.
	MsiArguments string `json:"msi_arguments,omitempty"`
	// MsiFileHash holds the value of the "msi_file_hash" field.
	MsiFileHash string `json:"msi_file_hash,omitempty"`
	// MsiFileHashAlg holds the value of the "msi_file_hash_alg" field.
	MsiFileHashAlg task.MsiFileHashAlg `json:"msi_file_hash_alg,omitempty"`
	// MsiLogPath holds the value of the "msi_log_path" field.
	MsiLogPath string `json:"msi_log_path,omitempty"`
	// Script holds the value of the "script" field.
	Script string `json:"script,omitempty"`
	// ScriptExecutable holds the value of the "script_executable" field.
	ScriptExecutable string `json:"script_executable,omitempty"`
	// ScriptCreates holds the value of the "script_creates" field.
	ScriptCreates string `json:"script_creates,omitempty"`
	// ScriptRun holds the value of the "script_run" field.
	ScriptRun task.ScriptRun `json:"script_run,omitempty"`
	// AgentType holds the value of the "agent_type" field.
	AgentType task.AgentType `json:"agent_type,omitempty"`
	// When holds the value of the "when" field.
	When time.Time `json:"when,omitempty"`
	// BrewUpdate holds the value of the "brew_update" field.
	BrewUpdate bool `json:"brew_update,omitempty"`
	// BrewUpgradeAll holds the value of the "brew_upgrade_all" field.
	BrewUpgradeAll bool `json:"brew_upgrade_all,omitempty"`
	// BrewUpgradeOptions holds the value of the "brew_upgrade_options" field.
	BrewUpgradeOptions string `json:"brew_upgrade_options,omitempty"`
	// BrewInstallOptions holds the value of the "brew_install_options" field.
	BrewInstallOptions string `json:"brew_install_options,omitempty"`
	// BrewGreedy holds the value of the "brew_greedy" field.
	BrewGreedy bool `json:"brew_greedy,omitempty"`
	// PackageVersion holds the value of the "package_version" field.
	PackageVersion string `json:"package_version,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges         TaskEdges `json:"edges"`
	profile_tasks *int
	selectValues  sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldPackageLatest, task.FieldRegistryHex, task.FieldRegistryForce, task.FieldLocalUserDisable, task.FieldLocalUserPasswordChangeNotAllowed, task.FieldLocalUserPasswordChangeRequired, task.FieldLocalUserPasswordNeverExpires, task.FieldLocalUserAppend, task.FieldLocalUserCreateHome, task.FieldLocalUserForce, task.FieldLocalUserGenerateSSHKey, task.FieldLocalUserMoveHome, task.FieldLocalUserNonunique, task.FieldLocalUserPasswordLock, task.FieldLocalUserSystem, task.FieldLocalGroupSystem, task.FieldLocalGroupForce, task.FieldBrewUpdate, task.FieldBrewUpgradeAll, task.FieldBrewGreedy:
			values[i] = new(sql.NullBool)
		case task.FieldID:
			values[i] = new(sql.NullInt64)
		case task.FieldName, task.FieldType, task.FieldPackageID, task.FieldPackageName, task.FieldRegistryKey, task.FieldRegistryKeyValueName, task.FieldRegistryKeyValueType, task.FieldRegistryKeyValueData, task.FieldLocalUserUsername, task.FieldLocalUserDescription, task.FieldLocalUserFullname, task.FieldLocalUserPassword, task.FieldLocalUserExpires, task.FieldLocalUserGroup, task.FieldLocalUserGroups, task.FieldLocalUserHome, task.FieldLocalUserPasswordExpireAccountDisable, task.FieldLocalUserPasswordExpireMax, task.FieldLocalUserPasswordExpireMin, task.FieldLocalUserPasswordExpireWarn, task.FieldLocalUserSeuser, task.FieldLocalUserShell, task.FieldLocalUserSkeleton, task.FieldLocalUserID, task.FieldLocalUserIDMax, task.FieldLocalUserIDMin, task.FieldLocalUserSSHKeyBits, task.FieldLocalUserSSHKeyComment, task.FieldLocalUserSSHKeyFile, task.FieldLocalUserSSHKeyPassphrase, task.FieldLocalUserSSHKeyType, task.FieldLocalUserUmask, task.FieldLocalGroupID, task.FieldLocalGroupName, task.FieldLocalGroupDescription, task.FieldLocalGroupMembers, task.FieldLocalGroupMembersToInclude, task.FieldLocalGroupMembersToExclude, task.FieldMsiProductid, task.FieldMsiPath, task.FieldMsiArguments, task.FieldMsiFileHash, task.FieldMsiFileHashAlg, task.FieldMsiLogPath, task.FieldScript, task.FieldScriptExecutable, task.FieldScriptCreates, task.FieldScriptRun, task.FieldAgentType, task.FieldBrewUpgradeOptions, task.FieldBrewInstallOptions, task.FieldPackageVersion:
			values[i] = new(sql.NullString)
		case task.FieldWhen:
			values[i] = new(sql.NullTime)
		case task.ForeignKeys[0]: // profile_tasks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = task.Type(value.String)
			}
		case task.FieldPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				t.PackageID = value.String
			}
		case task.FieldPackageName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_name", values[i])
			} else if value.Valid {
				t.PackageName = value.String
			}
		case task.FieldPackageLatest:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field package_latest", values[i])
			} else if value.Valid {
				t.PackageLatest = value.Bool
			}
		case task.FieldRegistryKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry_key", values[i])
			} else if value.Valid {
				t.RegistryKey = value.String
			}
		case task.FieldRegistryKeyValueName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry_key_value_name", values[i])
			} else if value.Valid {
				t.RegistryKeyValueName = value.String
			}
		case task.FieldRegistryKeyValueType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry_key_value_type", values[i])
			} else if value.Valid {
				t.RegistryKeyValueType = task.RegistryKeyValueType(value.String)
			}
		case task.FieldRegistryKeyValueData:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field registry_key_value_data", values[i])
			} else if value.Valid {
				t.RegistryKeyValueData = value.String
			}
		case task.FieldRegistryHex:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field registry_hex", values[i])
			} else if value.Valid {
				t.RegistryHex = value.Bool
			}
		case task.FieldRegistryForce:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field registry_force", values[i])
			} else if value.Valid {
				t.RegistryForce = value.Bool
			}
		case task.FieldLocalUserUsername:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_username", values[i])
			} else if value.Valid {
				t.LocalUserUsername = value.String
			}
		case task.FieldLocalUserDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_description", values[i])
			} else if value.Valid {
				t.LocalUserDescription = value.String
			}
		case task.FieldLocalUserDisable:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_disable", values[i])
			} else if value.Valid {
				t.LocalUserDisable = value.Bool
			}
		case task.FieldLocalUserFullname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_fullname", values[i])
			} else if value.Valid {
				t.LocalUserFullname = value.String
			}
		case task.FieldLocalUserPassword:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password", values[i])
			} else if value.Valid {
				t.LocalUserPassword = value.String
			}
		case task.FieldLocalUserPasswordChangeNotAllowed:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_change_not_allowed", values[i])
			} else if value.Valid {
				t.LocalUserPasswordChangeNotAllowed = value.Bool
			}
		case task.FieldLocalUserPasswordChangeRequired:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_change_required", values[i])
			} else if value.Valid {
				t.LocalUserPasswordChangeRequired = value.Bool
			}
		case task.FieldLocalUserPasswordNeverExpires:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_never_expires", values[i])
			} else if value.Valid {
				t.LocalUserPasswordNeverExpires = value.Bool
			}
		case task.FieldLocalUserAppend:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_append", values[i])
			} else if value.Valid {
				t.LocalUserAppend = value.Bool
			}
		case task.FieldLocalUserCreateHome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_create_home", values[i])
			} else if value.Valid {
				t.LocalUserCreateHome = value.Bool
			}
		case task.FieldLocalUserExpires:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_expires", values[i])
			} else if value.Valid {
				t.LocalUserExpires = value.String
			}
		case task.FieldLocalUserForce:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_force", values[i])
			} else if value.Valid {
				t.LocalUserForce = value.Bool
			}
		case task.FieldLocalUserGenerateSSHKey:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_generate_ssh_key", values[i])
			} else if value.Valid {
				t.LocalUserGenerateSSHKey = value.Bool
			}
		case task.FieldLocalUserGroup:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_group", values[i])
			} else if value.Valid {
				t.LocalUserGroup = value.String
			}
		case task.FieldLocalUserGroups:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_groups", values[i])
			} else if value.Valid {
				t.LocalUserGroups = value.String
			}
		case task.FieldLocalUserHome:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_home", values[i])
			} else if value.Valid {
				t.LocalUserHome = value.String
			}
		case task.FieldLocalUserMoveHome:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_move_home", values[i])
			} else if value.Valid {
				t.LocalUserMoveHome = value.Bool
			}
		case task.FieldLocalUserNonunique:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_nonunique", values[i])
			} else if value.Valid {
				t.LocalUserNonunique = value.Bool
			}
		case task.FieldLocalUserPasswordExpireAccountDisable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_expire_account_disable", values[i])
			} else if value.Valid {
				t.LocalUserPasswordExpireAccountDisable = value.String
			}
		case task.FieldLocalUserPasswordExpireMax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_expire_max", values[i])
			} else if value.Valid {
				t.LocalUserPasswordExpireMax = value.String
			}
		case task.FieldLocalUserPasswordExpireMin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_expire_min", values[i])
			} else if value.Valid {
				t.LocalUserPasswordExpireMin = value.String
			}
		case task.FieldLocalUserPasswordExpireWarn:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_expire_warn", values[i])
			} else if value.Valid {
				t.LocalUserPasswordExpireWarn = value.String
			}
		case task.FieldLocalUserPasswordLock:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_password_lock", values[i])
			} else if value.Valid {
				t.LocalUserPasswordLock = value.Bool
			}
		case task.FieldLocalUserSeuser:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_seuser", values[i])
			} else if value.Valid {
				t.LocalUserSeuser = value.String
			}
		case task.FieldLocalUserShell:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_shell", values[i])
			} else if value.Valid {
				t.LocalUserShell = value.String
			}
		case task.FieldLocalUserSkeleton:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_skeleton", values[i])
			} else if value.Valid {
				t.LocalUserSkeleton = value.String
			}
		case task.FieldLocalUserSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_system", values[i])
			} else if value.Valid {
				t.LocalUserSystem = value.Bool
			}
		case task.FieldLocalUserID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_id", values[i])
			} else if value.Valid {
				t.LocalUserID = value.String
			}
		case task.FieldLocalUserIDMax:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_id_max", values[i])
			} else if value.Valid {
				t.LocalUserIDMax = value.String
			}
		case task.FieldLocalUserIDMin:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_id_min", values[i])
			} else if value.Valid {
				t.LocalUserIDMin = value.String
			}
		case task.FieldLocalUserSSHKeyBits:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_ssh_key_bits", values[i])
			} else if value.Valid {
				t.LocalUserSSHKeyBits = value.String
			}
		case task.FieldLocalUserSSHKeyComment:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_ssh_key_comment", values[i])
			} else if value.Valid {
				t.LocalUserSSHKeyComment = value.String
			}
		case task.FieldLocalUserSSHKeyFile:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_ssh_key_file", values[i])
			} else if value.Valid {
				t.LocalUserSSHKeyFile = value.String
			}
		case task.FieldLocalUserSSHKeyPassphrase:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_ssh_key_passphrase", values[i])
			} else if value.Valid {
				t.LocalUserSSHKeyPassphrase = value.String
			}
		case task.FieldLocalUserSSHKeyType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_ssh_key_type", values[i])
			} else if value.Valid {
				t.LocalUserSSHKeyType = value.String
			}
		case task.FieldLocalUserUmask:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_user_umask", values[i])
			} else if value.Valid {
				t.LocalUserUmask = value.String
			}
		case task.FieldLocalGroupID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_id", values[i])
			} else if value.Valid {
				t.LocalGroupID = value.String
			}
		case task.FieldLocalGroupName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_name", values[i])
			} else if value.Valid {
				t.LocalGroupName = value.String
			}
		case task.FieldLocalGroupDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_description", values[i])
			} else if value.Valid {
				t.LocalGroupDescription = value.String
			}
		case task.FieldLocalGroupSystem:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_system", values[i])
			} else if value.Valid {
				t.LocalGroupSystem = value.Bool
			}
		case task.FieldLocalGroupForce:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_force", values[i])
			} else if value.Valid {
				t.LocalGroupForce = value.Bool
			}
		case task.FieldLocalGroupMembers:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_members", values[i])
			} else if value.Valid {
				t.LocalGroupMembers = value.String
			}
		case task.FieldLocalGroupMembersToInclude:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_members_to_include", values[i])
			} else if value.Valid {
				t.LocalGroupMembersToInclude = value.String
			}
		case task.FieldLocalGroupMembersToExclude:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field local_group_members_to_exclude", values[i])
			} else if value.Valid {
				t.LocalGroupMembersToExclude = value.String
			}
		case task.FieldMsiProductid:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_productid", values[i])
			} else if value.Valid {
				t.MsiProductid = value.String
			}
		case task.FieldMsiPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_path", values[i])
			} else if value.Valid {
				t.MsiPath = value.String
			}
		case task.FieldMsiArguments:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_arguments", values[i])
			} else if value.Valid {
				t.MsiArguments = value.String
			}
		case task.FieldMsiFileHash:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_file_hash", values[i])
			} else if value.Valid {
				t.MsiFileHash = value.String
			}
		case task.FieldMsiFileHashAlg:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_file_hash_alg", values[i])
			} else if value.Valid {
				t.MsiFileHashAlg = task.MsiFileHashAlg(value.String)
			}
		case task.FieldMsiLogPath:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field msi_log_path", values[i])
			} else if value.Valid {
				t.MsiLogPath = value.String
			}
		case task.FieldScript:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script", values[i])
			} else if value.Valid {
				t.Script = value.String
			}
		case task.FieldScriptExecutable:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_executable", values[i])
			} else if value.Valid {
				t.ScriptExecutable = value.String
			}
		case task.FieldScriptCreates:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_creates", values[i])
			} else if value.Valid {
				t.ScriptCreates = value.String
			}
		case task.FieldScriptRun:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field script_run", values[i])
			} else if value.Valid {
				t.ScriptRun = task.ScriptRun(value.String)
			}
		case task.FieldAgentType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_type", values[i])
			} else if value.Valid {
				t.AgentType = task.AgentType(value.String)
			}
		case task.FieldWhen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field when", values[i])
			} else if value.Valid {
				t.When = value.Time
			}
		case task.FieldBrewUpdate:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field brew_update", values[i])
			} else if value.Valid {
				t.BrewUpdate = value.Bool
			}
		case task.FieldBrewUpgradeAll:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field brew_upgrade_all", values[i])
			} else if value.Valid {
				t.BrewUpgradeAll = value.Bool
			}
		case task.FieldBrewUpgradeOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brew_upgrade_options", values[i])
			} else if value.Valid {
				t.BrewUpgradeOptions = value.String
			}
		case task.FieldBrewInstallOptions:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field brew_install_options", values[i])
			} else if value.Valid {
				t.BrewInstallOptions = value.String
			}
		case task.FieldBrewGreedy:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field brew_greedy", values[i])
			} else if value.Valid {
				t.BrewGreedy = value.Bool
			}
		case task.FieldPackageVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_version", values[i])
			} else if value.Valid {
				t.PackageVersion = value.String
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_tasks", value)
			} else if value.Valid {
				t.profile_tasks = new(int)
				*t.profile_tasks = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Task entity.
func (t *Task) QueryTags() *TagQuery {
	return NewTaskClient(t.config).QueryTags(t)
}

// QueryProfile queries the "profile" edge of the Task entity.
func (t *Task) QueryProfile() *ProfileQuery {
	return NewTaskClient(t.config).QueryProfile(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", t.Type))
	builder.WriteString(", ")
	builder.WriteString("package_id=")
	builder.WriteString(t.PackageID)
	builder.WriteString(", ")
	builder.WriteString("package_name=")
	builder.WriteString(t.PackageName)
	builder.WriteString(", ")
	builder.WriteString("package_latest=")
	builder.WriteString(fmt.Sprintf("%v", t.PackageLatest))
	builder.WriteString(", ")
	builder.WriteString("registry_key=")
	builder.WriteString(t.RegistryKey)
	builder.WriteString(", ")
	builder.WriteString("registry_key_value_name=")
	builder.WriteString(t.RegistryKeyValueName)
	builder.WriteString(", ")
	builder.WriteString("registry_key_value_type=")
	builder.WriteString(fmt.Sprintf("%v", t.RegistryKeyValueType))
	builder.WriteString(", ")
	builder.WriteString("registry_key_value_data=")
	builder.WriteString(t.RegistryKeyValueData)
	builder.WriteString(", ")
	builder.WriteString("registry_hex=")
	builder.WriteString(fmt.Sprintf("%v", t.RegistryHex))
	builder.WriteString(", ")
	builder.WriteString("registry_force=")
	builder.WriteString(fmt.Sprintf("%v", t.RegistryForce))
	builder.WriteString(", ")
	builder.WriteString("local_user_username=")
	builder.WriteString(t.LocalUserUsername)
	builder.WriteString(", ")
	builder.WriteString("local_user_description=")
	builder.WriteString(t.LocalUserDescription)
	builder.WriteString(", ")
	builder.WriteString("local_user_disable=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserDisable))
	builder.WriteString(", ")
	builder.WriteString("local_user_fullname=")
	builder.WriteString(t.LocalUserFullname)
	builder.WriteString(", ")
	builder.WriteString("local_user_password=")
	builder.WriteString(t.LocalUserPassword)
	builder.WriteString(", ")
	builder.WriteString("local_user_password_change_not_allowed=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserPasswordChangeNotAllowed))
	builder.WriteString(", ")
	builder.WriteString("local_user_password_change_required=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserPasswordChangeRequired))
	builder.WriteString(", ")
	builder.WriteString("local_user_password_never_expires=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserPasswordNeverExpires))
	builder.WriteString(", ")
	builder.WriteString("local_user_append=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserAppend))
	builder.WriteString(", ")
	builder.WriteString("local_user_create_home=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserCreateHome))
	builder.WriteString(", ")
	builder.WriteString("local_user_expires=")
	builder.WriteString(t.LocalUserExpires)
	builder.WriteString(", ")
	builder.WriteString("local_user_force=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserForce))
	builder.WriteString(", ")
	builder.WriteString("local_user_generate_ssh_key=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserGenerateSSHKey))
	builder.WriteString(", ")
	builder.WriteString("local_user_group=")
	builder.WriteString(t.LocalUserGroup)
	builder.WriteString(", ")
	builder.WriteString("local_user_groups=")
	builder.WriteString(t.LocalUserGroups)
	builder.WriteString(", ")
	builder.WriteString("local_user_home=")
	builder.WriteString(t.LocalUserHome)
	builder.WriteString(", ")
	builder.WriteString("local_user_move_home=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserMoveHome))
	builder.WriteString(", ")
	builder.WriteString("local_user_nonunique=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserNonunique))
	builder.WriteString(", ")
	builder.WriteString("local_user_password_expire_account_disable=")
	builder.WriteString(t.LocalUserPasswordExpireAccountDisable)
	builder.WriteString(", ")
	builder.WriteString("local_user_password_expire_max=")
	builder.WriteString(t.LocalUserPasswordExpireMax)
	builder.WriteString(", ")
	builder.WriteString("local_user_password_expire_min=")
	builder.WriteString(t.LocalUserPasswordExpireMin)
	builder.WriteString(", ")
	builder.WriteString("local_user_password_expire_warn=")
	builder.WriteString(t.LocalUserPasswordExpireWarn)
	builder.WriteString(", ")
	builder.WriteString("local_user_password_lock=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserPasswordLock))
	builder.WriteString(", ")
	builder.WriteString("local_user_seuser=")
	builder.WriteString(t.LocalUserSeuser)
	builder.WriteString(", ")
	builder.WriteString("local_user_shell=")
	builder.WriteString(t.LocalUserShell)
	builder.WriteString(", ")
	builder.WriteString("local_user_skeleton=")
	builder.WriteString(t.LocalUserSkeleton)
	builder.WriteString(", ")
	builder.WriteString("local_user_system=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalUserSystem))
	builder.WriteString(", ")
	builder.WriteString("local_user_id=")
	builder.WriteString(t.LocalUserID)
	builder.WriteString(", ")
	builder.WriteString("local_user_id_max=")
	builder.WriteString(t.LocalUserIDMax)
	builder.WriteString(", ")
	builder.WriteString("local_user_id_min=")
	builder.WriteString(t.LocalUserIDMin)
	builder.WriteString(", ")
	builder.WriteString("local_user_ssh_key_bits=")
	builder.WriteString(t.LocalUserSSHKeyBits)
	builder.WriteString(", ")
	builder.WriteString("local_user_ssh_key_comment=")
	builder.WriteString(t.LocalUserSSHKeyComment)
	builder.WriteString(", ")
	builder.WriteString("local_user_ssh_key_file=")
	builder.WriteString(t.LocalUserSSHKeyFile)
	builder.WriteString(", ")
	builder.WriteString("local_user_ssh_key_passphrase=")
	builder.WriteString(t.LocalUserSSHKeyPassphrase)
	builder.WriteString(", ")
	builder.WriteString("local_user_ssh_key_type=")
	builder.WriteString(t.LocalUserSSHKeyType)
	builder.WriteString(", ")
	builder.WriteString("local_user_umask=")
	builder.WriteString(t.LocalUserUmask)
	builder.WriteString(", ")
	builder.WriteString("local_group_id=")
	builder.WriteString(t.LocalGroupID)
	builder.WriteString(", ")
	builder.WriteString("local_group_name=")
	builder.WriteString(t.LocalGroupName)
	builder.WriteString(", ")
	builder.WriteString("local_group_description=")
	builder.WriteString(t.LocalGroupDescription)
	builder.WriteString(", ")
	builder.WriteString("local_group_system=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalGroupSystem))
	builder.WriteString(", ")
	builder.WriteString("local_group_force=")
	builder.WriteString(fmt.Sprintf("%v", t.LocalGroupForce))
	builder.WriteString(", ")
	builder.WriteString("local_group_members=")
	builder.WriteString(t.LocalGroupMembers)
	builder.WriteString(", ")
	builder.WriteString("local_group_members_to_include=")
	builder.WriteString(t.LocalGroupMembersToInclude)
	builder.WriteString(", ")
	builder.WriteString("local_group_members_to_exclude=")
	builder.WriteString(t.LocalGroupMembersToExclude)
	builder.WriteString(", ")
	builder.WriteString("msi_productid=")
	builder.WriteString(t.MsiProductid)
	builder.WriteString(", ")
	builder.WriteString("msi_path=")
	builder.WriteString(t.MsiPath)
	builder.WriteString(", ")
	builder.WriteString("msi_arguments=")
	builder.WriteString(t.MsiArguments)
	builder.WriteString(", ")
	builder.WriteString("msi_file_hash=")
	builder.WriteString(t.MsiFileHash)
	builder.WriteString(", ")
	builder.WriteString("msi_file_hash_alg=")
	builder.WriteString(fmt.Sprintf("%v", t.MsiFileHashAlg))
	builder.WriteString(", ")
	builder.WriteString("msi_log_path=")
	builder.WriteString(t.MsiLogPath)
	builder.WriteString(", ")
	builder.WriteString("script=")
	builder.WriteString(t.Script)
	builder.WriteString(", ")
	builder.WriteString("script_executable=")
	builder.WriteString(t.ScriptExecutable)
	builder.WriteString(", ")
	builder.WriteString("script_creates=")
	builder.WriteString(t.ScriptCreates)
	builder.WriteString(", ")
	builder.WriteString("script_run=")
	builder.WriteString(fmt.Sprintf("%v", t.ScriptRun))
	builder.WriteString(", ")
	builder.WriteString("agent_type=")
	builder.WriteString(fmt.Sprintf("%v", t.AgentType))
	builder.WriteString(", ")
	builder.WriteString("when=")
	builder.WriteString(t.When.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("brew_update=")
	builder.WriteString(fmt.Sprintf("%v", t.BrewUpdate))
	builder.WriteString(", ")
	builder.WriteString("brew_upgrade_all=")
	builder.WriteString(fmt.Sprintf("%v", t.BrewUpgradeAll))
	builder.WriteString(", ")
	builder.WriteString("brew_upgrade_options=")
	builder.WriteString(t.BrewUpgradeOptions)
	builder.WriteString(", ")
	builder.WriteString("brew_install_options=")
	builder.WriteString(t.BrewInstallOptions)
	builder.WriteString(", ")
	builder.WriteString("brew_greedy=")
	builder.WriteString(fmt.Sprintf("%v", t.BrewGreedy))
	builder.WriteString(", ")
	builder.WriteString("package_version=")
	builder.WriteString(t.PackageVersion)
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
