// Code generated by ent, DO NOT EDIT.

package profileissue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLTE(FieldID, id))
}

// Error applies equality check predicate on the "error" field. It's identical to ErrorEQ.
func Error(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldError, v))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldWhen, v))
}

// ErrorEQ applies the EQ predicate on the "error" field.
func ErrorEQ(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldError, v))
}

// ErrorNEQ applies the NEQ predicate on the "error" field.
func ErrorNEQ(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNEQ(FieldError, v))
}

// ErrorIn applies the In predicate on the "error" field.
func ErrorIn(vs ...string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldIn(FieldError, vs...))
}

// ErrorNotIn applies the NotIn predicate on the "error" field.
func ErrorNotIn(vs ...string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNotIn(FieldError, vs...))
}

// ErrorGT applies the GT predicate on the "error" field.
func ErrorGT(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGT(FieldError, v))
}

// ErrorGTE applies the GTE predicate on the "error" field.
func ErrorGTE(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGTE(FieldError, v))
}

// ErrorLT applies the LT predicate on the "error" field.
func ErrorLT(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLT(FieldError, v))
}

// ErrorLTE applies the LTE predicate on the "error" field.
func ErrorLTE(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLTE(FieldError, v))
}

// ErrorContains applies the Contains predicate on the "error" field.
func ErrorContains(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldContains(FieldError, v))
}

// ErrorHasPrefix applies the HasPrefix predicate on the "error" field.
func ErrorHasPrefix(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldHasPrefix(FieldError, v))
}

// ErrorHasSuffix applies the HasSuffix predicate on the "error" field.
func ErrorHasSuffix(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldHasSuffix(FieldError, v))
}

// ErrorIsNil applies the IsNil predicate on the "error" field.
func ErrorIsNil() predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldIsNull(FieldError))
}

// ErrorNotNil applies the NotNil predicate on the "error" field.
func ErrorNotNil() predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNotNull(FieldError))
}

// ErrorEqualFold applies the EqualFold predicate on the "error" field.
func ErrorEqualFold(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEqualFold(FieldError, v))
}

// ErrorContainsFold applies the ContainsFold predicate on the "error" field.
func ErrorContainsFold(v string) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldContainsFold(FieldError, v))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldLTE(FieldWhen, v))
}

// WhenIsNil applies the IsNil predicate on the "when" field.
func WhenIsNil() predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldIsNull(FieldWhen))
}

// WhenNotNil applies the NotNil predicate on the "when" field.
func WhenNotNil() predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.FieldNotNull(FieldWhen))
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.ProfileIssue {
	return predicate.ProfileIssue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.ProfileIssue {
	return predicate.ProfileIssue(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasAgents applies the HasEdge predicate on the "agents" edge.
func HasAgents() predicate.ProfileIssue {
	return predicate.ProfileIssue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, false, AgentsTable, AgentsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasAgentsWith applies the HasEdge predicate on the "agents" edge with a given conditions (other predicates).
func HasAgentsWith(preds ...predicate.Agent) predicate.ProfileIssue {
	return predicate.ProfileIssue(func(s *sql.Selector) {
		step := newAgentsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.ProfileIssue) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.ProfileIssue) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.ProfileIssue) predicate.ProfileIssue {
	return predicate.ProfileIssue(sql.NotPredicates(p))
}
