// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/rustdesk"
	"github.com/open-uem/ent/tenant"
)

// RustDeskCreate is the builder for creating a RustDesk entity.
type RustDeskCreate struct {
	config
	mutation *RustDeskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (rdc *RustDeskCreate) SetCustomRendezvousServer(s string) *RustDeskCreate {
	rdc.mutation.SetCustomRendezvousServer(s)
	return rdc
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (rdc *RustDeskCreate) SetNillableCustomRendezvousServer(s *string) *RustDeskCreate {
	if s != nil {
		rdc.SetCustomRendezvousServer(*s)
	}
	return rdc
}

// SetRelayServer sets the "relay_server" field.
func (rdc *RustDeskCreate) SetRelayServer(s string) *RustDeskCreate {
	rdc.mutation.SetRelayServer(s)
	return rdc
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (rdc *RustDeskCreate) SetNillableRelayServer(s *string) *RustDeskCreate {
	if s != nil {
		rdc.SetRelayServer(*s)
	}
	return rdc
}

// SetAPIServer sets the "api_server" field.
func (rdc *RustDeskCreate) SetAPIServer(s string) *RustDeskCreate {
	rdc.mutation.SetAPIServer(s)
	return rdc
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (rdc *RustDeskCreate) SetNillableAPIServer(s *string) *RustDeskCreate {
	if s != nil {
		rdc.SetAPIServer(*s)
	}
	return rdc
}

// SetKey sets the "key" field.
func (rdc *RustDeskCreate) SetKey(s string) *RustDeskCreate {
	rdc.mutation.SetKey(s)
	return rdc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rdc *RustDeskCreate) SetNillableKey(s *string) *RustDeskCreate {
	if s != nil {
		rdc.SetKey(*s)
	}
	return rdc
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (rdc *RustDeskCreate) SetTenantID(id int) *RustDeskCreate {
	rdc.mutation.SetTenantID(id)
	return rdc
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (rdc *RustDeskCreate) SetNillableTenantID(id *int) *RustDeskCreate {
	if id != nil {
		rdc = rdc.SetTenantID(*id)
	}
	return rdc
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rdc *RustDeskCreate) SetTenant(t *Tenant) *RustDeskCreate {
	return rdc.SetTenantID(t.ID)
}

// Mutation returns the RustDeskMutation object of the builder.
func (rdc *RustDeskCreate) Mutation() *RustDeskMutation {
	return rdc.mutation
}

// Save creates the RustDesk in the database.
func (rdc *RustDeskCreate) Save(ctx context.Context) (*RustDesk, error) {
	rdc.defaults()
	return withHooks(ctx, rdc.sqlSave, rdc.mutation, rdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rdc *RustDeskCreate) SaveX(ctx context.Context) *RustDesk {
	v, err := rdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdc *RustDeskCreate) Exec(ctx context.Context) error {
	_, err := rdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdc *RustDeskCreate) ExecX(ctx context.Context) {
	if err := rdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rdc *RustDeskCreate) defaults() {
	if _, ok := rdc.mutation.CustomRendezvousServer(); !ok {
		v := rustdesk.DefaultCustomRendezvousServer
		rdc.mutation.SetCustomRendezvousServer(v)
	}
	if _, ok := rdc.mutation.RelayServer(); !ok {
		v := rustdesk.DefaultRelayServer
		rdc.mutation.SetRelayServer(v)
	}
	if _, ok := rdc.mutation.APIServer(); !ok {
		v := rustdesk.DefaultAPIServer
		rdc.mutation.SetAPIServer(v)
	}
	if _, ok := rdc.mutation.Key(); !ok {
		v := rustdesk.DefaultKey
		rdc.mutation.SetKey(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rdc *RustDeskCreate) check() error {
	return nil
}

func (rdc *RustDeskCreate) sqlSave(ctx context.Context) (*RustDesk, error) {
	if err := rdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rdc.mutation.id = &_node.ID
	rdc.mutation.done = true
	return _node, nil
}

func (rdc *RustDeskCreate) createSpec() (*RustDesk, *sqlgraph.CreateSpec) {
	var (
		_node = &RustDesk{config: rdc.config}
		_spec = sqlgraph.NewCreateSpec(rustdesk.Table, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rdc.conflict
	if value, ok := rdc.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
		_node.CustomRendezvousServer = value
	}
	if value, ok := rdc.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
		_node.RelayServer = value
	}
	if value, ok := rdc.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
		_node.APIServer = value
	}
	if value, ok := rdc.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if nodes := rdc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: []string{rustdesk.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.tenant_rustdesk = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RustDesk.Create().
//		SetCustomRendezvousServer(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RustDeskUpsert) {
//			SetCustomRendezvousServer(v+v).
//		}).
//		Exec(ctx)
func (rdc *RustDeskCreate) OnConflict(opts ...sql.ConflictOption) *RustDeskUpsertOne {
	rdc.conflict = opts
	return &RustDeskUpsertOne{
		create: rdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdc *RustDeskCreate) OnConflictColumns(columns ...string) *RustDeskUpsertOne {
	rdc.conflict = append(rdc.conflict, sql.ConflictColumns(columns...))
	return &RustDeskUpsertOne{
		create: rdc,
	}
}

type (
	// RustDeskUpsertOne is the builder for "upsert"-ing
	//  one RustDesk node.
	RustDeskUpsertOne struct {
		create *RustDeskCreate
	}

	// RustDeskUpsert is the "OnConflict" setter.
	RustDeskUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustDeskUpsert) SetCustomRendezvousServer(v string) *RustDeskUpsert {
	u.Set(rustdesk.FieldCustomRendezvousServer, v)
	return u
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustDeskUpsert) UpdateCustomRendezvousServer() *RustDeskUpsert {
	u.SetExcluded(rustdesk.FieldCustomRendezvousServer)
	return u
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustDeskUpsert) ClearCustomRendezvousServer() *RustDeskUpsert {
	u.SetNull(rustdesk.FieldCustomRendezvousServer)
	return u
}

// SetRelayServer sets the "relay_server" field.
func (u *RustDeskUpsert) SetRelayServer(v string) *RustDeskUpsert {
	u.Set(rustdesk.FieldRelayServer, v)
	return u
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustDeskUpsert) UpdateRelayServer() *RustDeskUpsert {
	u.SetExcluded(rustdesk.FieldRelayServer)
	return u
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustDeskUpsert) ClearRelayServer() *RustDeskUpsert {
	u.SetNull(rustdesk.FieldRelayServer)
	return u
}

// SetAPIServer sets the "api_server" field.
func (u *RustDeskUpsert) SetAPIServer(v string) *RustDeskUpsert {
	u.Set(rustdesk.FieldAPIServer, v)
	return u
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustDeskUpsert) UpdateAPIServer() *RustDeskUpsert {
	u.SetExcluded(rustdesk.FieldAPIServer)
	return u
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustDeskUpsert) ClearAPIServer() *RustDeskUpsert {
	u.SetNull(rustdesk.FieldAPIServer)
	return u
}

// SetKey sets the "key" field.
func (u *RustDeskUpsert) SetKey(v string) *RustDeskUpsert {
	u.Set(rustdesk.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustDeskUpsert) UpdateKey() *RustDeskUpsert {
	u.SetExcluded(rustdesk.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *RustDeskUpsert) ClearKey() *RustDeskUpsert {
	u.SetNull(rustdesk.FieldKey)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RustDeskUpsertOne) UpdateNewValues() *RustDeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RustDeskUpsertOne) Ignore() *RustDeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RustDeskUpsertOne) DoNothing() *RustDeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RustDeskCreate.OnConflict
// documentation for more info.
func (u *RustDeskUpsertOne) Update(set func(*RustDeskUpsert)) *RustDeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RustDeskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustDeskUpsertOne) SetCustomRendezvousServer(v string) *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetCustomRendezvousServer(v)
	})
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustDeskUpsertOne) UpdateCustomRendezvousServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateCustomRendezvousServer()
	})
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustDeskUpsertOne) ClearCustomRendezvousServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearCustomRendezvousServer()
	})
}

// SetRelayServer sets the "relay_server" field.
func (u *RustDeskUpsertOne) SetRelayServer(v string) *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetRelayServer(v)
	})
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustDeskUpsertOne) UpdateRelayServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateRelayServer()
	})
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustDeskUpsertOne) ClearRelayServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearRelayServer()
	})
}

// SetAPIServer sets the "api_server" field.
func (u *RustDeskUpsertOne) SetAPIServer(v string) *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetAPIServer(v)
	})
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustDeskUpsertOne) UpdateAPIServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateAPIServer()
	})
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustDeskUpsertOne) ClearAPIServer() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearAPIServer()
	})
}

// SetKey sets the "key" field.
func (u *RustDeskUpsertOne) SetKey(v string) *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustDeskUpsertOne) UpdateKey() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *RustDeskUpsertOne) ClearKey() *RustDeskUpsertOne {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *RustDeskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RustDeskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RustDeskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RustDeskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RustDeskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RustDeskCreateBulk is the builder for creating many RustDesk entities in bulk.
type RustDeskCreateBulk struct {
	config
	err      error
	builders []*RustDeskCreate
	conflict []sql.ConflictOption
}

// Save creates the RustDesk entities in the database.
func (rdcb *RustDeskCreateBulk) Save(ctx context.Context) ([]*RustDesk, error) {
	if rdcb.err != nil {
		return nil, rdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rdcb.builders))
	nodes := make([]*RustDesk, len(rdcb.builders))
	mutators := make([]Mutator, len(rdcb.builders))
	for i := range rdcb.builders {
		func(i int, root context.Context) {
			builder := rdcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RustDeskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rdcb *RustDeskCreateBulk) SaveX(ctx context.Context) []*RustDesk {
	v, err := rdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rdcb *RustDeskCreateBulk) Exec(ctx context.Context) error {
	_, err := rdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdcb *RustDeskCreateBulk) ExecX(ctx context.Context) {
	if err := rdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.RustDesk.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RustDeskUpsert) {
//			SetCustomRendezvousServer(v+v).
//		}).
//		Exec(ctx)
func (rdcb *RustDeskCreateBulk) OnConflict(opts ...sql.ConflictOption) *RustDeskUpsertBulk {
	rdcb.conflict = opts
	return &RustDeskUpsertBulk{
		create: rdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rdcb *RustDeskCreateBulk) OnConflictColumns(columns ...string) *RustDeskUpsertBulk {
	rdcb.conflict = append(rdcb.conflict, sql.ConflictColumns(columns...))
	return &RustDeskUpsertBulk{
		create: rdcb,
	}
}

// RustDeskUpsertBulk is the builder for "upsert"-ing
// a bulk of RustDesk nodes.
type RustDeskUpsertBulk struct {
	create *RustDeskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RustDeskUpsertBulk) UpdateNewValues() *RustDeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.RustDesk.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RustDeskUpsertBulk) Ignore() *RustDeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RustDeskUpsertBulk) DoNothing() *RustDeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RustDeskCreateBulk.OnConflict
// documentation for more info.
func (u *RustDeskUpsertBulk) Update(set func(*RustDeskUpsert)) *RustDeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RustDeskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustDeskUpsertBulk) SetCustomRendezvousServer(v string) *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetCustomRendezvousServer(v)
	})
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustDeskUpsertBulk) UpdateCustomRendezvousServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateCustomRendezvousServer()
	})
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustDeskUpsertBulk) ClearCustomRendezvousServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearCustomRendezvousServer()
	})
}

// SetRelayServer sets the "relay_server" field.
func (u *RustDeskUpsertBulk) SetRelayServer(v string) *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetRelayServer(v)
	})
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustDeskUpsertBulk) UpdateRelayServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateRelayServer()
	})
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustDeskUpsertBulk) ClearRelayServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearRelayServer()
	})
}

// SetAPIServer sets the "api_server" field.
func (u *RustDeskUpsertBulk) SetAPIServer(v string) *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetAPIServer(v)
	})
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustDeskUpsertBulk) UpdateAPIServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateAPIServer()
	})
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustDeskUpsertBulk) ClearAPIServer() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearAPIServer()
	})
}

// SetKey sets the "key" field.
func (u *RustDeskUpsertBulk) SetKey(v string) *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustDeskUpsertBulk) UpdateKey() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *RustDeskUpsertBulk) ClearKey() *RustDeskUpsertBulk {
	return u.Update(func(s *RustDeskUpsert) {
		s.ClearKey()
	})
}

// Exec executes the query.
func (u *RustDeskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RustDeskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RustDeskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RustDeskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
