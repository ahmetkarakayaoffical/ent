// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/rustdesk"
	"github.com/ahmetkarakayaoffical/ent/tenant"
)

// RustdeskCreate is the builder for creating a Rustdesk entity.
type RustdeskCreate struct {
	config
	mutation *RustdeskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (rc *RustdeskCreate) SetCustomRendezvousServer(s string) *RustdeskCreate {
	rc.mutation.SetCustomRendezvousServer(s)
	return rc
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableCustomRendezvousServer(s *string) *RustdeskCreate {
	if s != nil {
		rc.SetCustomRendezvousServer(*s)
	}
	return rc
}

// SetRelayServer sets the "relay_server" field.
func (rc *RustdeskCreate) SetRelayServer(s string) *RustdeskCreate {
	rc.mutation.SetRelayServer(s)
	return rc
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableRelayServer(s *string) *RustdeskCreate {
	if s != nil {
		rc.SetRelayServer(*s)
	}
	return rc
}

// SetAPIServer sets the "api_server" field.
func (rc *RustdeskCreate) SetAPIServer(s string) *RustdeskCreate {
	rc.mutation.SetAPIServer(s)
	return rc
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableAPIServer(s *string) *RustdeskCreate {
	if s != nil {
		rc.SetAPIServer(*s)
	}
	return rc
}

// SetKey sets the "key" field.
func (rc *RustdeskCreate) SetKey(s string) *RustdeskCreate {
	rc.mutation.SetKey(s)
	return rc
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableKey(s *string) *RustdeskCreate {
	if s != nil {
		rc.SetKey(*s)
	}
	return rc
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (rc *RustdeskCreate) SetUsePermanentPassword(b bool) *RustdeskCreate {
	rc.mutation.SetUsePermanentPassword(b)
	return rc
}

// SetNillableUsePermanentPassword sets the "use_permanent_password" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableUsePermanentPassword(b *bool) *RustdeskCreate {
	if b != nil {
		rc.SetUsePermanentPassword(*b)
	}
	return rc
}

// SetWhitelist sets the "whitelist" field.
func (rc *RustdeskCreate) SetWhitelist(s string) *RustdeskCreate {
	rc.mutation.SetWhitelist(s)
	return rc
}

// SetNillableWhitelist sets the "whitelist" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableWhitelist(s *string) *RustdeskCreate {
	if s != nil {
		rc.SetWhitelist(*s)
	}
	return rc
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (rc *RustdeskCreate) SetDirectIPAccess(b bool) *RustdeskCreate {
	rc.mutation.SetDirectIPAccess(b)
	return rc
}

// SetNillableDirectIPAccess sets the "direct_ip_access" field if the given value is not nil.
func (rc *RustdeskCreate) SetNillableDirectIPAccess(b *bool) *RustdeskCreate {
	if b != nil {
		rc.SetDirectIPAccess(*b)
	}
	return rc
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (rc *RustdeskCreate) AddTenantIDs(ids ...int) *RustdeskCreate {
	rc.mutation.AddTenantIDs(ids...)
	return rc
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (rc *RustdeskCreate) AddTenant(t ...*Tenant) *RustdeskCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return rc.AddTenantIDs(ids...)
}

// Mutation returns the RustdeskMutation object of the builder.
func (rc *RustdeskCreate) Mutation() *RustdeskMutation {
	return rc.mutation
}

// Save creates the Rustdesk in the database.
func (rc *RustdeskCreate) Save(ctx context.Context) (*Rustdesk, error) {
	rc.defaults()
	return withHooks(ctx, rc.sqlSave, rc.mutation, rc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (rc *RustdeskCreate) SaveX(ctx context.Context) *Rustdesk {
	v, err := rc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rc *RustdeskCreate) Exec(ctx context.Context) error {
	_, err := rc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rc *RustdeskCreate) ExecX(ctx context.Context) {
	if err := rc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (rc *RustdeskCreate) defaults() {
	if _, ok := rc.mutation.CustomRendezvousServer(); !ok {
		v := rustdesk.DefaultCustomRendezvousServer
		rc.mutation.SetCustomRendezvousServer(v)
	}
	if _, ok := rc.mutation.RelayServer(); !ok {
		v := rustdesk.DefaultRelayServer
		rc.mutation.SetRelayServer(v)
	}
	if _, ok := rc.mutation.APIServer(); !ok {
		v := rustdesk.DefaultAPIServer
		rc.mutation.SetAPIServer(v)
	}
	if _, ok := rc.mutation.Key(); !ok {
		v := rustdesk.DefaultKey
		rc.mutation.SetKey(v)
	}
	if _, ok := rc.mutation.UsePermanentPassword(); !ok {
		v := rustdesk.DefaultUsePermanentPassword
		rc.mutation.SetUsePermanentPassword(v)
	}
	if _, ok := rc.mutation.Whitelist(); !ok {
		v := rustdesk.DefaultWhitelist
		rc.mutation.SetWhitelist(v)
	}
	if _, ok := rc.mutation.DirectIPAccess(); !ok {
		v := rustdesk.DefaultDirectIPAccess
		rc.mutation.SetDirectIPAccess(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (rc *RustdeskCreate) check() error {
	return nil
}

func (rc *RustdeskCreate) sqlSave(ctx context.Context) (*Rustdesk, error) {
	if err := rc.check(); err != nil {
		return nil, err
	}
	_node, _spec := rc.createSpec()
	if err := sqlgraph.CreateNode(ctx, rc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	rc.mutation.id = &_node.ID
	rc.mutation.done = true
	return _node, nil
}

func (rc *RustdeskCreate) createSpec() (*Rustdesk, *sqlgraph.CreateSpec) {
	var (
		_node = &Rustdesk{config: rc.config}
		_spec = sqlgraph.NewCreateSpec(rustdesk.Table, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	)
	_spec.OnConflict = rc.conflict
	if value, ok := rc.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
		_node.CustomRendezvousServer = value
	}
	if value, ok := rc.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
		_node.RelayServer = value
	}
	if value, ok := rc.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
		_node.APIServer = value
	}
	if value, ok := rc.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
		_node.Key = value
	}
	if value, ok := rc.mutation.UsePermanentPassword(); ok {
		_spec.SetField(rustdesk.FieldUsePermanentPassword, field.TypeBool, value)
		_node.UsePermanentPassword = value
	}
	if value, ok := rc.mutation.Whitelist(); ok {
		_spec.SetField(rustdesk.FieldWhitelist, field.TypeString, value)
		_node.Whitelist = value
	}
	if value, ok := rc.mutation.DirectIPAccess(); ok {
		_spec.SetField(rustdesk.FieldDirectIPAccess, field.TypeBool, value)
		_node.DirectIPAccess = value
	}
	if nodes := rc.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rustdesk.Create().
//		SetCustomRendezvousServer(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RustdeskUpsert) {
//			SetCustomRendezvousServer(v+v).
//		}).
//		Exec(ctx)
func (rc *RustdeskCreate) OnConflict(opts ...sql.ConflictOption) *RustdeskUpsertOne {
	rc.conflict = opts
	return &RustdeskUpsertOne{
		create: rc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rc *RustdeskCreate) OnConflictColumns(columns ...string) *RustdeskUpsertOne {
	rc.conflict = append(rc.conflict, sql.ConflictColumns(columns...))
	return &RustdeskUpsertOne{
		create: rc,
	}
}

type (
	// RustdeskUpsertOne is the builder for "upsert"-ing
	//  one Rustdesk node.
	RustdeskUpsertOne struct {
		create *RustdeskCreate
	}

	// RustdeskUpsert is the "OnConflict" setter.
	RustdeskUpsert struct {
		*sql.UpdateSet
	}
)

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustdeskUpsert) SetCustomRendezvousServer(v string) *RustdeskUpsert {
	u.Set(rustdesk.FieldCustomRendezvousServer, v)
	return u
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateCustomRendezvousServer() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldCustomRendezvousServer)
	return u
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustdeskUpsert) ClearCustomRendezvousServer() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldCustomRendezvousServer)
	return u
}

// SetRelayServer sets the "relay_server" field.
func (u *RustdeskUpsert) SetRelayServer(v string) *RustdeskUpsert {
	u.Set(rustdesk.FieldRelayServer, v)
	return u
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateRelayServer() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldRelayServer)
	return u
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustdeskUpsert) ClearRelayServer() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldRelayServer)
	return u
}

// SetAPIServer sets the "api_server" field.
func (u *RustdeskUpsert) SetAPIServer(v string) *RustdeskUpsert {
	u.Set(rustdesk.FieldAPIServer, v)
	return u
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateAPIServer() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldAPIServer)
	return u
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustdeskUpsert) ClearAPIServer() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldAPIServer)
	return u
}

// SetKey sets the "key" field.
func (u *RustdeskUpsert) SetKey(v string) *RustdeskUpsert {
	u.Set(rustdesk.FieldKey, v)
	return u
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateKey() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldKey)
	return u
}

// ClearKey clears the value of the "key" field.
func (u *RustdeskUpsert) ClearKey() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldKey)
	return u
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (u *RustdeskUpsert) SetUsePermanentPassword(v bool) *RustdeskUpsert {
	u.Set(rustdesk.FieldUsePermanentPassword, v)
	return u
}

// UpdateUsePermanentPassword sets the "use_permanent_password" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateUsePermanentPassword() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldUsePermanentPassword)
	return u
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (u *RustdeskUpsert) ClearUsePermanentPassword() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldUsePermanentPassword)
	return u
}

// SetWhitelist sets the "whitelist" field.
func (u *RustdeskUpsert) SetWhitelist(v string) *RustdeskUpsert {
	u.Set(rustdesk.FieldWhitelist, v)
	return u
}

// UpdateWhitelist sets the "whitelist" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateWhitelist() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldWhitelist)
	return u
}

// ClearWhitelist clears the value of the "whitelist" field.
func (u *RustdeskUpsert) ClearWhitelist() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldWhitelist)
	return u
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (u *RustdeskUpsert) SetDirectIPAccess(v bool) *RustdeskUpsert {
	u.Set(rustdesk.FieldDirectIPAccess, v)
	return u
}

// UpdateDirectIPAccess sets the "direct_ip_access" field to the value that was provided on create.
func (u *RustdeskUpsert) UpdateDirectIPAccess() *RustdeskUpsert {
	u.SetExcluded(rustdesk.FieldDirectIPAccess)
	return u
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (u *RustdeskUpsert) ClearDirectIPAccess() *RustdeskUpsert {
	u.SetNull(rustdesk.FieldDirectIPAccess)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RustdeskUpsertOne) UpdateNewValues() *RustdeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *RustdeskUpsertOne) Ignore() *RustdeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RustdeskUpsertOne) DoNothing() *RustdeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RustdeskCreate.OnConflict
// documentation for more info.
func (u *RustdeskUpsertOne) Update(set func(*RustdeskUpsert)) *RustdeskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RustdeskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustdeskUpsertOne) SetCustomRendezvousServer(v string) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetCustomRendezvousServer(v)
	})
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateCustomRendezvousServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateCustomRendezvousServer()
	})
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustdeskUpsertOne) ClearCustomRendezvousServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearCustomRendezvousServer()
	})
}

// SetRelayServer sets the "relay_server" field.
func (u *RustdeskUpsertOne) SetRelayServer(v string) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetRelayServer(v)
	})
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateRelayServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateRelayServer()
	})
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustdeskUpsertOne) ClearRelayServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearRelayServer()
	})
}

// SetAPIServer sets the "api_server" field.
func (u *RustdeskUpsertOne) SetAPIServer(v string) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetAPIServer(v)
	})
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateAPIServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateAPIServer()
	})
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustdeskUpsertOne) ClearAPIServer() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearAPIServer()
	})
}

// SetKey sets the "key" field.
func (u *RustdeskUpsertOne) SetKey(v string) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateKey() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *RustdeskUpsertOne) ClearKey() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearKey()
	})
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (u *RustdeskUpsertOne) SetUsePermanentPassword(v bool) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetUsePermanentPassword(v)
	})
}

// UpdateUsePermanentPassword sets the "use_permanent_password" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateUsePermanentPassword() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateUsePermanentPassword()
	})
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (u *RustdeskUpsertOne) ClearUsePermanentPassword() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearUsePermanentPassword()
	})
}

// SetWhitelist sets the "whitelist" field.
func (u *RustdeskUpsertOne) SetWhitelist(v string) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetWhitelist(v)
	})
}

// UpdateWhitelist sets the "whitelist" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateWhitelist() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateWhitelist()
	})
}

// ClearWhitelist clears the value of the "whitelist" field.
func (u *RustdeskUpsertOne) ClearWhitelist() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearWhitelist()
	})
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (u *RustdeskUpsertOne) SetDirectIPAccess(v bool) *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetDirectIPAccess(v)
	})
}

// UpdateDirectIPAccess sets the "direct_ip_access" field to the value that was provided on create.
func (u *RustdeskUpsertOne) UpdateDirectIPAccess() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateDirectIPAccess()
	})
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (u *RustdeskUpsertOne) ClearDirectIPAccess() *RustdeskUpsertOne {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearDirectIPAccess()
	})
}

// Exec executes the query.
func (u *RustdeskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RustdeskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RustdeskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *RustdeskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *RustdeskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// RustdeskCreateBulk is the builder for creating many Rustdesk entities in bulk.
type RustdeskCreateBulk struct {
	config
	err      error
	builders []*RustdeskCreate
	conflict []sql.ConflictOption
}

// Save creates the Rustdesk entities in the database.
func (rcb *RustdeskCreateBulk) Save(ctx context.Context) ([]*Rustdesk, error) {
	if rcb.err != nil {
		return nil, rcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(rcb.builders))
	nodes := make([]*Rustdesk, len(rcb.builders))
	mutators := make([]Mutator, len(rcb.builders))
	for i := range rcb.builders {
		func(i int, root context.Context) {
			builder := rcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*RustdeskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, rcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = rcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, rcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, rcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (rcb *RustdeskCreateBulk) SaveX(ctx context.Context) []*Rustdesk {
	v, err := rcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (rcb *RustdeskCreateBulk) Exec(ctx context.Context) error {
	_, err := rcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rcb *RustdeskCreateBulk) ExecX(ctx context.Context) {
	if err := rcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Rustdesk.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.RustdeskUpsert) {
//			SetCustomRendezvousServer(v+v).
//		}).
//		Exec(ctx)
func (rcb *RustdeskCreateBulk) OnConflict(opts ...sql.ConflictOption) *RustdeskUpsertBulk {
	rcb.conflict = opts
	return &RustdeskUpsertBulk{
		create: rcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (rcb *RustdeskCreateBulk) OnConflictColumns(columns ...string) *RustdeskUpsertBulk {
	rcb.conflict = append(rcb.conflict, sql.ConflictColumns(columns...))
	return &RustdeskUpsertBulk{
		create: rcb,
	}
}

// RustdeskUpsertBulk is the builder for "upsert"-ing
// a bulk of Rustdesk nodes.
type RustdeskUpsertBulk struct {
	create *RustdeskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *RustdeskUpsertBulk) UpdateNewValues() *RustdeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Rustdesk.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *RustdeskUpsertBulk) Ignore() *RustdeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *RustdeskUpsertBulk) DoNothing() *RustdeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the RustdeskCreateBulk.OnConflict
// documentation for more info.
func (u *RustdeskUpsertBulk) Update(set func(*RustdeskUpsert)) *RustdeskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&RustdeskUpsert{UpdateSet: update})
	}))
	return u
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (u *RustdeskUpsertBulk) SetCustomRendezvousServer(v string) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetCustomRendezvousServer(v)
	})
}

// UpdateCustomRendezvousServer sets the "custom_rendezvous_server" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateCustomRendezvousServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateCustomRendezvousServer()
	})
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (u *RustdeskUpsertBulk) ClearCustomRendezvousServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearCustomRendezvousServer()
	})
}

// SetRelayServer sets the "relay_server" field.
func (u *RustdeskUpsertBulk) SetRelayServer(v string) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetRelayServer(v)
	})
}

// UpdateRelayServer sets the "relay_server" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateRelayServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateRelayServer()
	})
}

// ClearRelayServer clears the value of the "relay_server" field.
func (u *RustdeskUpsertBulk) ClearRelayServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearRelayServer()
	})
}

// SetAPIServer sets the "api_server" field.
func (u *RustdeskUpsertBulk) SetAPIServer(v string) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetAPIServer(v)
	})
}

// UpdateAPIServer sets the "api_server" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateAPIServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateAPIServer()
	})
}

// ClearAPIServer clears the value of the "api_server" field.
func (u *RustdeskUpsertBulk) ClearAPIServer() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearAPIServer()
	})
}

// SetKey sets the "key" field.
func (u *RustdeskUpsertBulk) SetKey(v string) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetKey(v)
	})
}

// UpdateKey sets the "key" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateKey() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateKey()
	})
}

// ClearKey clears the value of the "key" field.
func (u *RustdeskUpsertBulk) ClearKey() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearKey()
	})
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (u *RustdeskUpsertBulk) SetUsePermanentPassword(v bool) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetUsePermanentPassword(v)
	})
}

// UpdateUsePermanentPassword sets the "use_permanent_password" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateUsePermanentPassword() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateUsePermanentPassword()
	})
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (u *RustdeskUpsertBulk) ClearUsePermanentPassword() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearUsePermanentPassword()
	})
}

// SetWhitelist sets the "whitelist" field.
func (u *RustdeskUpsertBulk) SetWhitelist(v string) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetWhitelist(v)
	})
}

// UpdateWhitelist sets the "whitelist" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateWhitelist() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateWhitelist()
	})
}

// ClearWhitelist clears the value of the "whitelist" field.
func (u *RustdeskUpsertBulk) ClearWhitelist() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearWhitelist()
	})
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (u *RustdeskUpsertBulk) SetDirectIPAccess(v bool) *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.SetDirectIPAccess(v)
	})
}

// UpdateDirectIPAccess sets the "direct_ip_access" field to the value that was provided on create.
func (u *RustdeskUpsertBulk) UpdateDirectIPAccess() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.UpdateDirectIPAccess()
	})
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (u *RustdeskUpsertBulk) ClearDirectIPAccess() *RustdeskUpsertBulk {
	return u.Update(func(s *RustdeskUpsert) {
		s.ClearDirectIPAccess()
	})
}

// Exec executes the query.
func (u *RustdeskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the RustdeskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for RustdeskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *RustdeskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
