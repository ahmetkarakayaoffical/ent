// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/site"
)

// Profile is the model entity for the Profile schema.
type Profile struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// ApplyToAll holds the value of the "apply_to_all" field.
	ApplyToAll bool `json:"apply_to_all,omitempty"`
	// Type holds the value of the "type" field.
	Type profile.Type `json:"type,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileQuery when eager-loading is set.
	Edges         ProfileEdges `json:"edges"`
	site_profiles *int
	selectValues  sql.SelectValues
}

// ProfileEdges holds the relations/edges for other nodes in the graph.
type ProfileEdges struct {
	// Tags holds the value of the tags edge.
	Tags []*Tag `json:"tags,omitempty"`
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Issues holds the value of the issues edge.
	Issues []*ProfileIssue `json:"issues,omitempty"`
	// Site holds the value of the site edge.
	Site *Site `json:"site,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [4]bool
}

// TagsOrErr returns the Tags value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) TagsOrErr() ([]*Tag, error) {
	if e.loadedTypes[0] {
		return e.Tags, nil
	}
	return nil, &NotLoadedError{edge: "tags"}
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[1] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// IssuesOrErr returns the Issues value or an error if the edge
// was not loaded in eager-loading.
func (e ProfileEdges) IssuesOrErr() ([]*ProfileIssue, error) {
	if e.loadedTypes[2] {
		return e.Issues, nil
	}
	return nil, &NotLoadedError{edge: "issues"}
}

// SiteOrErr returns the Site value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileEdges) SiteOrErr() (*Site, error) {
	if e.Site != nil {
		return e.Site, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: site.Label}
	}
	return nil, &NotLoadedError{edge: "site"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Profile) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profile.FieldApplyToAll:
			values[i] = new(sql.NullBool)
		case profile.FieldID:
			values[i] = new(sql.NullInt64)
		case profile.FieldName, profile.FieldType:
			values[i] = new(sql.NullString)
		case profile.ForeignKeys[0]: // site_profiles
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Profile fields.
func (pr *Profile) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profile.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pr.ID = int(value.Int64)
		case profile.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pr.Name = value.String
			}
		case profile.FieldApplyToAll:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field apply_to_all", values[i])
			} else if value.Valid {
				pr.ApplyToAll = value.Bool
			}
		case profile.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				pr.Type = profile.Type(value.String)
			}
		case profile.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field site_profiles", value)
			} else if value.Valid {
				pr.site_profiles = new(int)
				*pr.site_profiles = int(value.Int64)
			}
		default:
			pr.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Profile.
// This includes values selected through modifiers, order, etc.
func (pr *Profile) Value(name string) (ent.Value, error) {
	return pr.selectValues.Get(name)
}

// QueryTags queries the "tags" edge of the Profile entity.
func (pr *Profile) QueryTags() *TagQuery {
	return NewProfileClient(pr.config).QueryTags(pr)
}

// QueryTasks queries the "tasks" edge of the Profile entity.
func (pr *Profile) QueryTasks() *TaskQuery {
	return NewProfileClient(pr.config).QueryTasks(pr)
}

// QueryIssues queries the "issues" edge of the Profile entity.
func (pr *Profile) QueryIssues() *ProfileIssueQuery {
	return NewProfileClient(pr.config).QueryIssues(pr)
}

// QuerySite queries the "site" edge of the Profile entity.
func (pr *Profile) QuerySite() *SiteQuery {
	return NewProfileClient(pr.config).QuerySite(pr)
}

// Update returns a builder for updating this Profile.
// Note that you need to call Profile.Unwrap() before calling this method if this Profile
// was returned from a transaction, and the transaction was committed or rolled back.
func (pr *Profile) Update() *ProfileUpdateOne {
	return NewProfileClient(pr.config).UpdateOne(pr)
}

// Unwrap unwraps the Profile entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pr *Profile) Unwrap() *Profile {
	_tx, ok := pr.config.driver.(*txDriver)
	if !ok {
		panic("ent: Profile is not a transactional entity")
	}
	pr.config.driver = _tx.drv
	return pr
}

// String implements the fmt.Stringer.
func (pr *Profile) String() string {
	var builder strings.Builder
	builder.WriteString("Profile(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pr.ID))
	builder.WriteString("name=")
	builder.WriteString(pr.Name)
	builder.WriteString(", ")
	builder.WriteString("apply_to_all=")
	builder.WriteString(fmt.Sprintf("%v", pr.ApplyToAll))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(fmt.Sprintf("%v", pr.Type))
	builder.WriteByte(')')
	return builder.String()
}

// Profiles is a parsable slice of Profile.
type Profiles []*Profile
