// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/agent"
	"github.com/ahmetkarakayaoffical/ent/predicate"
	"github.com/ahmetkarakayaoffical/ent/profile"
	"github.com/ahmetkarakayaoffical/ent/site"
	"github.com/ahmetkarakayaoffical/ent/tenant"
)

// SiteUpdate is the builder for updating Site entities.
type SiteUpdate struct {
	config
	hooks     []Hook
	mutation  *SiteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SiteUpdate builder.
func (su *SiteUpdate) Where(ps ...predicate.Site) *SiteUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetDescription sets the "description" field.
func (su *SiteUpdate) SetDescription(s string) *SiteUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SiteUpdate) SetNillableDescription(s *string) *SiteUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// ClearDescription clears the value of the "description" field.
func (su *SiteUpdate) ClearDescription() *SiteUpdate {
	su.mutation.ClearDescription()
	return su
}

// SetIsDefault sets the "is_default" field.
func (su *SiteUpdate) SetIsDefault(b bool) *SiteUpdate {
	su.mutation.SetIsDefault(b)
	return su
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (su *SiteUpdate) SetNillableIsDefault(b *bool) *SiteUpdate {
	if b != nil {
		su.SetIsDefault(*b)
	}
	return su
}

// ClearIsDefault clears the value of the "is_default" field.
func (su *SiteUpdate) ClearIsDefault() *SiteUpdate {
	su.mutation.ClearIsDefault()
	return su
}

// SetDomain sets the "domain" field.
func (su *SiteUpdate) SetDomain(s string) *SiteUpdate {
	su.mutation.SetDomain(s)
	return su
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (su *SiteUpdate) SetNillableDomain(s *string) *SiteUpdate {
	if s != nil {
		su.SetDomain(*s)
	}
	return su
}

// ClearDomain clears the value of the "domain" field.
func (su *SiteUpdate) ClearDomain() *SiteUpdate {
	su.mutation.ClearDomain()
	return su
}

// SetCreated sets the "created" field.
func (su *SiteUpdate) SetCreated(t time.Time) *SiteUpdate {
	su.mutation.SetCreated(t)
	return su
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (su *SiteUpdate) SetNillableCreated(t *time.Time) *SiteUpdate {
	if t != nil {
		su.SetCreated(*t)
	}
	return su
}

// ClearCreated clears the value of the "created" field.
func (su *SiteUpdate) ClearCreated() *SiteUpdate {
	su.mutation.ClearCreated()
	return su
}

// SetModified sets the "modified" field.
func (su *SiteUpdate) SetModified(t time.Time) *SiteUpdate {
	su.mutation.SetModified(t)
	return su
}

// ClearModified clears the value of the "modified" field.
func (su *SiteUpdate) ClearModified() *SiteUpdate {
	su.mutation.ClearModified()
	return su
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (su *SiteUpdate) SetTenantID(id int) *SiteUpdate {
	su.mutation.SetTenantID(id)
	return su
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (su *SiteUpdate) SetNillableTenantID(id *int) *SiteUpdate {
	if id != nil {
		su = su.SetTenantID(*id)
	}
	return su
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (su *SiteUpdate) SetTenant(t *Tenant) *SiteUpdate {
	return su.SetTenantID(t.ID)
}

// AddAgentIDs adds the "agents" edge to the Agent entity by IDs.
func (su *SiteUpdate) AddAgentIDs(ids ...string) *SiteUpdate {
	su.mutation.AddAgentIDs(ids...)
	return su
}

// AddAgents adds the "agents" edges to the Agent entity.
func (su *SiteUpdate) AddAgents(a ...*Agent) *SiteUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.AddAgentIDs(ids...)
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (su *SiteUpdate) AddProfileIDs(ids ...int) *SiteUpdate {
	su.mutation.AddProfileIDs(ids...)
	return su
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (su *SiteUpdate) AddProfiles(p ...*Profile) *SiteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.AddProfileIDs(ids...)
}

// Mutation returns the SiteMutation object of the builder.
func (su *SiteUpdate) Mutation() *SiteMutation {
	return su.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (su *SiteUpdate) ClearTenant() *SiteUpdate {
	su.mutation.ClearTenant()
	return su
}

// ClearAgents clears all "agents" edges to the Agent entity.
func (su *SiteUpdate) ClearAgents() *SiteUpdate {
	su.mutation.ClearAgents()
	return su
}

// RemoveAgentIDs removes the "agents" edge to Agent entities by IDs.
func (su *SiteUpdate) RemoveAgentIDs(ids ...string) *SiteUpdate {
	su.mutation.RemoveAgentIDs(ids...)
	return su
}

// RemoveAgents removes "agents" edges to Agent entities.
func (su *SiteUpdate) RemoveAgents(a ...*Agent) *SiteUpdate {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return su.RemoveAgentIDs(ids...)
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (su *SiteUpdate) ClearProfiles() *SiteUpdate {
	su.mutation.ClearProfiles()
	return su
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (su *SiteUpdate) RemoveProfileIDs(ids ...int) *SiteUpdate {
	su.mutation.RemoveProfileIDs(ids...)
	return su
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (su *SiteUpdate) RemoveProfiles(p ...*Profile) *SiteUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return su.RemoveProfileIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SiteUpdate) Save(ctx context.Context) (int, error) {
	su.defaults()
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SiteUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SiteUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SiteUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (su *SiteUpdate) defaults() {
	if _, ok := su.mutation.Modified(); !ok && !su.mutation.ModifiedCleared() {
		v := site.UpdateDefaultModified()
		su.mutation.SetModified(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *SiteUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SiteUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *SiteUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if su.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := su.mutation.IsDefault(); ok {
		_spec.SetField(site.FieldIsDefault, field.TypeBool, value)
	}
	if su.mutation.IsDefaultCleared() {
		_spec.ClearField(site.FieldIsDefault, field.TypeBool)
	}
	if value, ok := su.mutation.Domain(); ok {
		_spec.SetField(site.FieldDomain, field.TypeString, value)
	}
	if su.mutation.DomainCleared() {
		_spec.ClearField(site.FieldDomain, field.TypeString)
	}
	if value, ok := su.mutation.Created(); ok {
		_spec.SetField(site.FieldCreated, field.TypeTime, value)
	}
	if su.mutation.CreatedCleared() {
		_spec.ClearField(site.FieldCreated, field.TypeTime)
	}
	if value, ok := su.mutation.Modified(); ok {
		_spec.SetField(site.FieldModified, field.TypeTime, value)
	}
	if su.mutation.ModifiedCleared() {
		_spec.ClearField(site.FieldModified, field.TypeTime)
	}
	if su.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.TenantTable,
			Columns: []string{site.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.TenantTable,
			Columns: []string{site.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedAgentsIDs(); len(nodes) > 0 && !su.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if su.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !su.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SiteUpdateOne is the builder for updating a single Site entity.
type SiteUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SiteMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDescription sets the "description" field.
func (suo *SiteUpdateOne) SetDescription(s string) *SiteUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableDescription(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// ClearDescription clears the value of the "description" field.
func (suo *SiteUpdateOne) ClearDescription() *SiteUpdateOne {
	suo.mutation.ClearDescription()
	return suo
}

// SetIsDefault sets the "is_default" field.
func (suo *SiteUpdateOne) SetIsDefault(b bool) *SiteUpdateOne {
	suo.mutation.SetIsDefault(b)
	return suo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableIsDefault(b *bool) *SiteUpdateOne {
	if b != nil {
		suo.SetIsDefault(*b)
	}
	return suo
}

// ClearIsDefault clears the value of the "is_default" field.
func (suo *SiteUpdateOne) ClearIsDefault() *SiteUpdateOne {
	suo.mutation.ClearIsDefault()
	return suo
}

// SetDomain sets the "domain" field.
func (suo *SiteUpdateOne) SetDomain(s string) *SiteUpdateOne {
	suo.mutation.SetDomain(s)
	return suo
}

// SetNillableDomain sets the "domain" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableDomain(s *string) *SiteUpdateOne {
	if s != nil {
		suo.SetDomain(*s)
	}
	return suo
}

// ClearDomain clears the value of the "domain" field.
func (suo *SiteUpdateOne) ClearDomain() *SiteUpdateOne {
	suo.mutation.ClearDomain()
	return suo
}

// SetCreated sets the "created" field.
func (suo *SiteUpdateOne) SetCreated(t time.Time) *SiteUpdateOne {
	suo.mutation.SetCreated(t)
	return suo
}

// SetNillableCreated sets the "created" field if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableCreated(t *time.Time) *SiteUpdateOne {
	if t != nil {
		suo.SetCreated(*t)
	}
	return suo
}

// ClearCreated clears the value of the "created" field.
func (suo *SiteUpdateOne) ClearCreated() *SiteUpdateOne {
	suo.mutation.ClearCreated()
	return suo
}

// SetModified sets the "modified" field.
func (suo *SiteUpdateOne) SetModified(t time.Time) *SiteUpdateOne {
	suo.mutation.SetModified(t)
	return suo
}

// ClearModified clears the value of the "modified" field.
func (suo *SiteUpdateOne) ClearModified() *SiteUpdateOne {
	suo.mutation.ClearModified()
	return suo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (suo *SiteUpdateOne) SetTenantID(id int) *SiteUpdateOne {
	suo.mutation.SetTenantID(id)
	return suo
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (suo *SiteUpdateOne) SetNillableTenantID(id *int) *SiteUpdateOne {
	if id != nil {
		suo = suo.SetTenantID(*id)
	}
	return suo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (suo *SiteUpdateOne) SetTenant(t *Tenant) *SiteUpdateOne {
	return suo.SetTenantID(t.ID)
}

// AddAgentIDs adds the "agents" edge to the Agent entity by IDs.
func (suo *SiteUpdateOne) AddAgentIDs(ids ...string) *SiteUpdateOne {
	suo.mutation.AddAgentIDs(ids...)
	return suo
}

// AddAgents adds the "agents" edges to the Agent entity.
func (suo *SiteUpdateOne) AddAgents(a ...*Agent) *SiteUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.AddAgentIDs(ids...)
}

// AddProfileIDs adds the "profiles" edge to the Profile entity by IDs.
func (suo *SiteUpdateOne) AddProfileIDs(ids ...int) *SiteUpdateOne {
	suo.mutation.AddProfileIDs(ids...)
	return suo
}

// AddProfiles adds the "profiles" edges to the Profile entity.
func (suo *SiteUpdateOne) AddProfiles(p ...*Profile) *SiteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.AddProfileIDs(ids...)
}

// Mutation returns the SiteMutation object of the builder.
func (suo *SiteUpdateOne) Mutation() *SiteMutation {
	return suo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (suo *SiteUpdateOne) ClearTenant() *SiteUpdateOne {
	suo.mutation.ClearTenant()
	return suo
}

// ClearAgents clears all "agents" edges to the Agent entity.
func (suo *SiteUpdateOne) ClearAgents() *SiteUpdateOne {
	suo.mutation.ClearAgents()
	return suo
}

// RemoveAgentIDs removes the "agents" edge to Agent entities by IDs.
func (suo *SiteUpdateOne) RemoveAgentIDs(ids ...string) *SiteUpdateOne {
	suo.mutation.RemoveAgentIDs(ids...)
	return suo
}

// RemoveAgents removes "agents" edges to Agent entities.
func (suo *SiteUpdateOne) RemoveAgents(a ...*Agent) *SiteUpdateOne {
	ids := make([]string, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return suo.RemoveAgentIDs(ids...)
}

// ClearProfiles clears all "profiles" edges to the Profile entity.
func (suo *SiteUpdateOne) ClearProfiles() *SiteUpdateOne {
	suo.mutation.ClearProfiles()
	return suo
}

// RemoveProfileIDs removes the "profiles" edge to Profile entities by IDs.
func (suo *SiteUpdateOne) RemoveProfileIDs(ids ...int) *SiteUpdateOne {
	suo.mutation.RemoveProfileIDs(ids...)
	return suo
}

// RemoveProfiles removes "profiles" edges to Profile entities.
func (suo *SiteUpdateOne) RemoveProfiles(p ...*Profile) *SiteUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return suo.RemoveProfileIDs(ids...)
}

// Where appends a list predicates to the SiteUpdate builder.
func (suo *SiteUpdateOne) Where(ps ...predicate.Site) *SiteUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SiteUpdateOne) Select(field string, fields ...string) *SiteUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Site entity.
func (suo *SiteUpdateOne) Save(ctx context.Context) (*Site, error) {
	suo.defaults()
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SiteUpdateOne) SaveX(ctx context.Context) *Site {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SiteUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SiteUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (suo *SiteUpdateOne) defaults() {
	if _, ok := suo.mutation.Modified(); !ok && !suo.mutation.ModifiedCleared() {
		v := site.UpdateDefaultModified()
		suo.mutation.SetModified(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *SiteUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SiteUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *SiteUpdateOne) sqlSave(ctx context.Context) (_node *Site, err error) {
	_spec := sqlgraph.NewUpdateSpec(site.Table, site.Columns, sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Site.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, site.FieldID)
		for _, f := range fields {
			if !site.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != site.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(site.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.DescriptionCleared() {
		_spec.ClearField(site.FieldDescription, field.TypeString)
	}
	if value, ok := suo.mutation.IsDefault(); ok {
		_spec.SetField(site.FieldIsDefault, field.TypeBool, value)
	}
	if suo.mutation.IsDefaultCleared() {
		_spec.ClearField(site.FieldIsDefault, field.TypeBool)
	}
	if value, ok := suo.mutation.Domain(); ok {
		_spec.SetField(site.FieldDomain, field.TypeString, value)
	}
	if suo.mutation.DomainCleared() {
		_spec.ClearField(site.FieldDomain, field.TypeString)
	}
	if value, ok := suo.mutation.Created(); ok {
		_spec.SetField(site.FieldCreated, field.TypeTime, value)
	}
	if suo.mutation.CreatedCleared() {
		_spec.ClearField(site.FieldCreated, field.TypeTime)
	}
	if value, ok := suo.mutation.Modified(); ok {
		_spec.SetField(site.FieldModified, field.TypeTime, value)
	}
	if suo.mutation.ModifiedCleared() {
		_spec.ClearField(site.FieldModified, field.TypeTime)
	}
	if suo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.TenantTable,
			Columns: []string{site.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   site.TenantTable,
			Columns: []string{site.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedAgentsIDs(); len(nodes) > 0 && !suo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   site.AgentsTable,
			Columns: site.AgentsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if suo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.RemovedProfilesIDs(); len(nodes) > 0 && !suo.mutation.ProfilesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ProfilesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   site.ProfilesTable,
			Columns: []string{site.ProfilesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Site{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{site.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
