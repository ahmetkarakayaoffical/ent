// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/agent"
	"github.com/ahmetkarakayaoffical/ent/monitor"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// MonitorUpdate is the builder for updating Monitor entities.
type MonitorUpdate struct {
	config
	hooks     []Hook
	mutation  *MonitorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MonitorUpdate builder.
func (mu *MonitorUpdate) Where(ps ...predicate.Monitor) *MonitorUpdate {
	mu.mutation.Where(ps...)
	return mu
}

// SetManufacturer sets the "manufacturer" field.
func (mu *MonitorUpdate) SetManufacturer(s string) *MonitorUpdate {
	mu.mutation.SetManufacturer(s)
	return mu
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableManufacturer(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetManufacturer(*s)
	}
	return mu
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (mu *MonitorUpdate) ClearManufacturer() *MonitorUpdate {
	mu.mutation.ClearManufacturer()
	return mu
}

// SetModel sets the "model" field.
func (mu *MonitorUpdate) SetModel(s string) *MonitorUpdate {
	mu.mutation.SetModel(s)
	return mu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableModel(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetModel(*s)
	}
	return mu
}

// ClearModel clears the value of the "model" field.
func (mu *MonitorUpdate) ClearModel() *MonitorUpdate {
	mu.mutation.ClearModel()
	return mu
}

// SetSerial sets the "serial" field.
func (mu *MonitorUpdate) SetSerial(s string) *MonitorUpdate {
	mu.mutation.SetSerial(s)
	return mu
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableSerial(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetSerial(*s)
	}
	return mu
}

// ClearSerial clears the value of the "serial" field.
func (mu *MonitorUpdate) ClearSerial() *MonitorUpdate {
	mu.mutation.ClearSerial()
	return mu
}

// SetWeekOfManufacture sets the "week_of_manufacture" field.
func (mu *MonitorUpdate) SetWeekOfManufacture(s string) *MonitorUpdate {
	mu.mutation.SetWeekOfManufacture(s)
	return mu
}

// SetNillableWeekOfManufacture sets the "week_of_manufacture" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableWeekOfManufacture(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetWeekOfManufacture(*s)
	}
	return mu
}

// ClearWeekOfManufacture clears the value of the "week_of_manufacture" field.
func (mu *MonitorUpdate) ClearWeekOfManufacture() *MonitorUpdate {
	mu.mutation.ClearWeekOfManufacture()
	return mu
}

// SetYearOfManufacture sets the "year_of_manufacture" field.
func (mu *MonitorUpdate) SetYearOfManufacture(s string) *MonitorUpdate {
	mu.mutation.SetYearOfManufacture(s)
	return mu
}

// SetNillableYearOfManufacture sets the "year_of_manufacture" field if the given value is not nil.
func (mu *MonitorUpdate) SetNillableYearOfManufacture(s *string) *MonitorUpdate {
	if s != nil {
		mu.SetYearOfManufacture(*s)
	}
	return mu
}

// ClearYearOfManufacture clears the value of the "year_of_manufacture" field.
func (mu *MonitorUpdate) ClearYearOfManufacture() *MonitorUpdate {
	mu.mutation.ClearYearOfManufacture()
	return mu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (mu *MonitorUpdate) SetOwnerID(id string) *MonitorUpdate {
	mu.mutation.SetOwnerID(id)
	return mu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (mu *MonitorUpdate) SetOwner(a *Agent) *MonitorUpdate {
	return mu.SetOwnerID(a.ID)
}

// Mutation returns the MonitorMutation object of the builder.
func (mu *MonitorUpdate) Mutation() *MonitorMutation {
	return mu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (mu *MonitorUpdate) ClearOwner() *MonitorUpdate {
	mu.mutation.ClearOwner()
	return mu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (mu *MonitorUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, mu.sqlSave, mu.mutation, mu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (mu *MonitorUpdate) SaveX(ctx context.Context) int {
	affected, err := mu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (mu *MonitorUpdate) Exec(ctx context.Context) error {
	_, err := mu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (mu *MonitorUpdate) ExecX(ctx context.Context) {
	if err := mu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (mu *MonitorUpdate) check() error {
	if mu.mutation.OwnerCleared() && len(mu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Monitor.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (mu *MonitorUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MonitorUpdate {
	mu.modifiers = append(mu.modifiers, modifiers...)
	return mu
}

func (mu *MonitorUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := mu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(monitor.Table, monitor.Columns, sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt))
	if ps := mu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := mu.mutation.Manufacturer(); ok {
		_spec.SetField(monitor.FieldManufacturer, field.TypeString, value)
	}
	if mu.mutation.ManufacturerCleared() {
		_spec.ClearField(monitor.FieldManufacturer, field.TypeString)
	}
	if value, ok := mu.mutation.Model(); ok {
		_spec.SetField(monitor.FieldModel, field.TypeString, value)
	}
	if mu.mutation.ModelCleared() {
		_spec.ClearField(monitor.FieldModel, field.TypeString)
	}
	if value, ok := mu.mutation.Serial(); ok {
		_spec.SetField(monitor.FieldSerial, field.TypeString, value)
	}
	if mu.mutation.SerialCleared() {
		_spec.ClearField(monitor.FieldSerial, field.TypeString)
	}
	if value, ok := mu.mutation.WeekOfManufacture(); ok {
		_spec.SetField(monitor.FieldWeekOfManufacture, field.TypeString, value)
	}
	if mu.mutation.WeekOfManufactureCleared() {
		_spec.ClearField(monitor.FieldWeekOfManufacture, field.TypeString)
	}
	if value, ok := mu.mutation.YearOfManufacture(); ok {
		_spec.SetField(monitor.FieldYearOfManufacture, field.TypeString, value)
	}
	if mu.mutation.YearOfManufactureCleared() {
		_spec.ClearField(monitor.FieldYearOfManufacture, field.TypeString)
	}
	if mu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   monitor.OwnerTable,
			Columns: []string{monitor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := mu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   monitor.OwnerTable,
			Columns: []string{monitor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(mu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, mu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	mu.mutation.done = true
	return n, nil
}

// MonitorUpdateOne is the builder for updating a single Monitor entity.
type MonitorUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MonitorMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetManufacturer sets the "manufacturer" field.
func (muo *MonitorUpdateOne) SetManufacturer(s string) *MonitorUpdateOne {
	muo.mutation.SetManufacturer(s)
	return muo
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableManufacturer(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetManufacturer(*s)
	}
	return muo
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (muo *MonitorUpdateOne) ClearManufacturer() *MonitorUpdateOne {
	muo.mutation.ClearManufacturer()
	return muo
}

// SetModel sets the "model" field.
func (muo *MonitorUpdateOne) SetModel(s string) *MonitorUpdateOne {
	muo.mutation.SetModel(s)
	return muo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableModel(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetModel(*s)
	}
	return muo
}

// ClearModel clears the value of the "model" field.
func (muo *MonitorUpdateOne) ClearModel() *MonitorUpdateOne {
	muo.mutation.ClearModel()
	return muo
}

// SetSerial sets the "serial" field.
func (muo *MonitorUpdateOne) SetSerial(s string) *MonitorUpdateOne {
	muo.mutation.SetSerial(s)
	return muo
}

// SetNillableSerial sets the "serial" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableSerial(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetSerial(*s)
	}
	return muo
}

// ClearSerial clears the value of the "serial" field.
func (muo *MonitorUpdateOne) ClearSerial() *MonitorUpdateOne {
	muo.mutation.ClearSerial()
	return muo
}

// SetWeekOfManufacture sets the "week_of_manufacture" field.
func (muo *MonitorUpdateOne) SetWeekOfManufacture(s string) *MonitorUpdateOne {
	muo.mutation.SetWeekOfManufacture(s)
	return muo
}

// SetNillableWeekOfManufacture sets the "week_of_manufacture" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableWeekOfManufacture(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetWeekOfManufacture(*s)
	}
	return muo
}

// ClearWeekOfManufacture clears the value of the "week_of_manufacture" field.
func (muo *MonitorUpdateOne) ClearWeekOfManufacture() *MonitorUpdateOne {
	muo.mutation.ClearWeekOfManufacture()
	return muo
}

// SetYearOfManufacture sets the "year_of_manufacture" field.
func (muo *MonitorUpdateOne) SetYearOfManufacture(s string) *MonitorUpdateOne {
	muo.mutation.SetYearOfManufacture(s)
	return muo
}

// SetNillableYearOfManufacture sets the "year_of_manufacture" field if the given value is not nil.
func (muo *MonitorUpdateOne) SetNillableYearOfManufacture(s *string) *MonitorUpdateOne {
	if s != nil {
		muo.SetYearOfManufacture(*s)
	}
	return muo
}

// ClearYearOfManufacture clears the value of the "year_of_manufacture" field.
func (muo *MonitorUpdateOne) ClearYearOfManufacture() *MonitorUpdateOne {
	muo.mutation.ClearYearOfManufacture()
	return muo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (muo *MonitorUpdateOne) SetOwnerID(id string) *MonitorUpdateOne {
	muo.mutation.SetOwnerID(id)
	return muo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (muo *MonitorUpdateOne) SetOwner(a *Agent) *MonitorUpdateOne {
	return muo.SetOwnerID(a.ID)
}

// Mutation returns the MonitorMutation object of the builder.
func (muo *MonitorUpdateOne) Mutation() *MonitorMutation {
	return muo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (muo *MonitorUpdateOne) ClearOwner() *MonitorUpdateOne {
	muo.mutation.ClearOwner()
	return muo
}

// Where appends a list predicates to the MonitorUpdate builder.
func (muo *MonitorUpdateOne) Where(ps ...predicate.Monitor) *MonitorUpdateOne {
	muo.mutation.Where(ps...)
	return muo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (muo *MonitorUpdateOne) Select(field string, fields ...string) *MonitorUpdateOne {
	muo.fields = append([]string{field}, fields...)
	return muo
}

// Save executes the query and returns the updated Monitor entity.
func (muo *MonitorUpdateOne) Save(ctx context.Context) (*Monitor, error) {
	return withHooks(ctx, muo.sqlSave, muo.mutation, muo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (muo *MonitorUpdateOne) SaveX(ctx context.Context) *Monitor {
	node, err := muo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (muo *MonitorUpdateOne) Exec(ctx context.Context) error {
	_, err := muo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (muo *MonitorUpdateOne) ExecX(ctx context.Context) {
	if err := muo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (muo *MonitorUpdateOne) check() error {
	if muo.mutation.OwnerCleared() && len(muo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "Monitor.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (muo *MonitorUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MonitorUpdateOne {
	muo.modifiers = append(muo.modifiers, modifiers...)
	return muo
}

func (muo *MonitorUpdateOne) sqlSave(ctx context.Context) (_node *Monitor, err error) {
	if err := muo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(monitor.Table, monitor.Columns, sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt))
	id, ok := muo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Monitor.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := muo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, monitor.FieldID)
		for _, f := range fields {
			if !monitor.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != monitor.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := muo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := muo.mutation.Manufacturer(); ok {
		_spec.SetField(monitor.FieldManufacturer, field.TypeString, value)
	}
	if muo.mutation.ManufacturerCleared() {
		_spec.ClearField(monitor.FieldManufacturer, field.TypeString)
	}
	if value, ok := muo.mutation.Model(); ok {
		_spec.SetField(monitor.FieldModel, field.TypeString, value)
	}
	if muo.mutation.ModelCleared() {
		_spec.ClearField(monitor.FieldModel, field.TypeString)
	}
	if value, ok := muo.mutation.Serial(); ok {
		_spec.SetField(monitor.FieldSerial, field.TypeString, value)
	}
	if muo.mutation.SerialCleared() {
		_spec.ClearField(monitor.FieldSerial, field.TypeString)
	}
	if value, ok := muo.mutation.WeekOfManufacture(); ok {
		_spec.SetField(monitor.FieldWeekOfManufacture, field.TypeString, value)
	}
	if muo.mutation.WeekOfManufactureCleared() {
		_spec.ClearField(monitor.FieldWeekOfManufacture, field.TypeString)
	}
	if value, ok := muo.mutation.YearOfManufacture(); ok {
		_spec.SetField(monitor.FieldYearOfManufacture, field.TypeString, value)
	}
	if muo.mutation.YearOfManufactureCleared() {
		_spec.ClearField(monitor.FieldYearOfManufacture, field.TypeString)
	}
	if muo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   monitor.OwnerTable,
			Columns: []string{monitor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := muo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   monitor.OwnerTable,
			Columns: []string{monitor.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(muo.modifiers...)
	_node = &Monitor{config: muo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, muo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{monitor.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	muo.mutation.done = true
	return _node, nil
}
