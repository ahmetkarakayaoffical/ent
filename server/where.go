// Code generated by ent, DO NOT EDIT.

package server

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldID, id))
}

// Hostname applies equality check predicate on the "hostname" field. It's identical to HostnameEQ.
func Hostname(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldHostname, v))
}

// Arch applies equality check predicate on the "arch" field. It's identical to ArchEQ.
func Arch(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldArch, v))
}

// Os applies equality check predicate on the "os" field. It's identical to OsEQ.
func Os(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOs, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldVersion, v))
}

// UpdateMessage applies equality check predicate on the "update_message" field. It's identical to UpdateMessageEQ.
func UpdateMessage(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdateMessage, v))
}

// UpdateWhen applies equality check predicate on the "update_when" field. It's identical to UpdateWhenEQ.
func UpdateWhen(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdateWhen, v))
}

// NatsComponent applies equality check predicate on the "nats_component" field. It's identical to NatsComponentEQ.
func NatsComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldNatsComponent, v))
}

// OcspComponent applies equality check predicate on the "ocsp_component" field. It's identical to OcspComponentEQ.
func OcspComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOcspComponent, v))
}

// ConsoleComponent applies equality check predicate on the "console_component" field. It's identical to ConsoleComponentEQ.
func ConsoleComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldConsoleComponent, v))
}

// AgentWorkerComponent applies equality check predicate on the "agent_worker_component" field. It's identical to AgentWorkerComponentEQ.
func AgentWorkerComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAgentWorkerComponent, v))
}

// NotificationWorkerComponent applies equality check predicate on the "notification_worker_component" field. It's identical to NotificationWorkerComponentEQ.
func NotificationWorkerComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldNotificationWorkerComponent, v))
}

// CertManagerWorkerComponent applies equality check predicate on the "cert_manager_worker_component" field. It's identical to CertManagerWorkerComponentEQ.
func CertManagerWorkerComponent(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCertManagerWorkerComponent, v))
}

// HostnameEQ applies the EQ predicate on the "hostname" field.
func HostnameEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldHostname, v))
}

// HostnameNEQ applies the NEQ predicate on the "hostname" field.
func HostnameNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldHostname, v))
}

// HostnameIn applies the In predicate on the "hostname" field.
func HostnameIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldHostname, vs...))
}

// HostnameNotIn applies the NotIn predicate on the "hostname" field.
func HostnameNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldHostname, vs...))
}

// HostnameGT applies the GT predicate on the "hostname" field.
func HostnameGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldHostname, v))
}

// HostnameGTE applies the GTE predicate on the "hostname" field.
func HostnameGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldHostname, v))
}

// HostnameLT applies the LT predicate on the "hostname" field.
func HostnameLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldHostname, v))
}

// HostnameLTE applies the LTE predicate on the "hostname" field.
func HostnameLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldHostname, v))
}

// HostnameContains applies the Contains predicate on the "hostname" field.
func HostnameContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldHostname, v))
}

// HostnameHasPrefix applies the HasPrefix predicate on the "hostname" field.
func HostnameHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldHostname, v))
}

// HostnameHasSuffix applies the HasSuffix predicate on the "hostname" field.
func HostnameHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldHostname, v))
}

// HostnameEqualFold applies the EqualFold predicate on the "hostname" field.
func HostnameEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldHostname, v))
}

// HostnameContainsFold applies the ContainsFold predicate on the "hostname" field.
func HostnameContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldHostname, v))
}

// ArchEQ applies the EQ predicate on the "arch" field.
func ArchEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldArch, v))
}

// ArchNEQ applies the NEQ predicate on the "arch" field.
func ArchNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldArch, v))
}

// ArchIn applies the In predicate on the "arch" field.
func ArchIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldArch, vs...))
}

// ArchNotIn applies the NotIn predicate on the "arch" field.
func ArchNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldArch, vs...))
}

// ArchGT applies the GT predicate on the "arch" field.
func ArchGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldArch, v))
}

// ArchGTE applies the GTE predicate on the "arch" field.
func ArchGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldArch, v))
}

// ArchLT applies the LT predicate on the "arch" field.
func ArchLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldArch, v))
}

// ArchLTE applies the LTE predicate on the "arch" field.
func ArchLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldArch, v))
}

// ArchContains applies the Contains predicate on the "arch" field.
func ArchContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldArch, v))
}

// ArchHasPrefix applies the HasPrefix predicate on the "arch" field.
func ArchHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldArch, v))
}

// ArchHasSuffix applies the HasSuffix predicate on the "arch" field.
func ArchHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldArch, v))
}

// ArchEqualFold applies the EqualFold predicate on the "arch" field.
func ArchEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldArch, v))
}

// ArchContainsFold applies the ContainsFold predicate on the "arch" field.
func ArchContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldArch, v))
}

// OsEQ applies the EQ predicate on the "os" field.
func OsEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOs, v))
}

// OsNEQ applies the NEQ predicate on the "os" field.
func OsNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldOs, v))
}

// OsIn applies the In predicate on the "os" field.
func OsIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldOs, vs...))
}

// OsNotIn applies the NotIn predicate on the "os" field.
func OsNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldOs, vs...))
}

// OsGT applies the GT predicate on the "os" field.
func OsGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldOs, v))
}

// OsGTE applies the GTE predicate on the "os" field.
func OsGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldOs, v))
}

// OsLT applies the LT predicate on the "os" field.
func OsLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldOs, v))
}

// OsLTE applies the LTE predicate on the "os" field.
func OsLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldOs, v))
}

// OsContains applies the Contains predicate on the "os" field.
func OsContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldOs, v))
}

// OsHasPrefix applies the HasPrefix predicate on the "os" field.
func OsHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldOs, v))
}

// OsHasSuffix applies the HasSuffix predicate on the "os" field.
func OsHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldOs, v))
}

// OsEqualFold applies the EqualFold predicate on the "os" field.
func OsEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldOs, v))
}

// OsContainsFold applies the ContainsFold predicate on the "os" field.
func OsContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldOs, v))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldVersion, v))
}

// VersionContains applies the Contains predicate on the "version" field.
func VersionContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldVersion, v))
}

// VersionHasPrefix applies the HasPrefix predicate on the "version" field.
func VersionHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldVersion, v))
}

// VersionHasSuffix applies the HasSuffix predicate on the "version" field.
func VersionHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldVersion, v))
}

// VersionEqualFold applies the EqualFold predicate on the "version" field.
func VersionEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldVersion, v))
}

// VersionContainsFold applies the ContainsFold predicate on the "version" field.
func VersionContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldVersion, v))
}

// ChannelEQ applies the EQ predicate on the "channel" field.
func ChannelEQ(v Channel) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldChannel, v))
}

// ChannelNEQ applies the NEQ predicate on the "channel" field.
func ChannelNEQ(v Channel) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldChannel, v))
}

// ChannelIn applies the In predicate on the "channel" field.
func ChannelIn(vs ...Channel) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldChannel, vs...))
}

// ChannelNotIn applies the NotIn predicate on the "channel" field.
func ChannelNotIn(vs ...Channel) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldChannel, vs...))
}

// UpdateStatusEQ applies the EQ predicate on the "update_status" field.
func UpdateStatusEQ(v UpdateStatus) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdateStatus, v))
}

// UpdateStatusNEQ applies the NEQ predicate on the "update_status" field.
func UpdateStatusNEQ(v UpdateStatus) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldUpdateStatus, v))
}

// UpdateStatusIn applies the In predicate on the "update_status" field.
func UpdateStatusIn(vs ...UpdateStatus) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldUpdateStatus, vs...))
}

// UpdateStatusNotIn applies the NotIn predicate on the "update_status" field.
func UpdateStatusNotIn(vs ...UpdateStatus) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldUpdateStatus, vs...))
}

// UpdateStatusIsNil applies the IsNil predicate on the "update_status" field.
func UpdateStatusIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldUpdateStatus))
}

// UpdateStatusNotNil applies the NotNil predicate on the "update_status" field.
func UpdateStatusNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldUpdateStatus))
}

// UpdateMessageEQ applies the EQ predicate on the "update_message" field.
func UpdateMessageEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdateMessage, v))
}

// UpdateMessageNEQ applies the NEQ predicate on the "update_message" field.
func UpdateMessageNEQ(v string) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldUpdateMessage, v))
}

// UpdateMessageIn applies the In predicate on the "update_message" field.
func UpdateMessageIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldUpdateMessage, vs...))
}

// UpdateMessageNotIn applies the NotIn predicate on the "update_message" field.
func UpdateMessageNotIn(vs ...string) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldUpdateMessage, vs...))
}

// UpdateMessageGT applies the GT predicate on the "update_message" field.
func UpdateMessageGT(v string) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldUpdateMessage, v))
}

// UpdateMessageGTE applies the GTE predicate on the "update_message" field.
func UpdateMessageGTE(v string) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldUpdateMessage, v))
}

// UpdateMessageLT applies the LT predicate on the "update_message" field.
func UpdateMessageLT(v string) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldUpdateMessage, v))
}

// UpdateMessageLTE applies the LTE predicate on the "update_message" field.
func UpdateMessageLTE(v string) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldUpdateMessage, v))
}

// UpdateMessageContains applies the Contains predicate on the "update_message" field.
func UpdateMessageContains(v string) predicate.Server {
	return predicate.Server(sql.FieldContains(FieldUpdateMessage, v))
}

// UpdateMessageHasPrefix applies the HasPrefix predicate on the "update_message" field.
func UpdateMessageHasPrefix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasPrefix(FieldUpdateMessage, v))
}

// UpdateMessageHasSuffix applies the HasSuffix predicate on the "update_message" field.
func UpdateMessageHasSuffix(v string) predicate.Server {
	return predicate.Server(sql.FieldHasSuffix(FieldUpdateMessage, v))
}

// UpdateMessageIsNil applies the IsNil predicate on the "update_message" field.
func UpdateMessageIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldUpdateMessage))
}

// UpdateMessageNotNil applies the NotNil predicate on the "update_message" field.
func UpdateMessageNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldUpdateMessage))
}

// UpdateMessageEqualFold applies the EqualFold predicate on the "update_message" field.
func UpdateMessageEqualFold(v string) predicate.Server {
	return predicate.Server(sql.FieldEqualFold(FieldUpdateMessage, v))
}

// UpdateMessageContainsFold applies the ContainsFold predicate on the "update_message" field.
func UpdateMessageContainsFold(v string) predicate.Server {
	return predicate.Server(sql.FieldContainsFold(FieldUpdateMessage, v))
}

// UpdateWhenEQ applies the EQ predicate on the "update_when" field.
func UpdateWhenEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldUpdateWhen, v))
}

// UpdateWhenNEQ applies the NEQ predicate on the "update_when" field.
func UpdateWhenNEQ(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldUpdateWhen, v))
}

// UpdateWhenIn applies the In predicate on the "update_when" field.
func UpdateWhenIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldIn(FieldUpdateWhen, vs...))
}

// UpdateWhenNotIn applies the NotIn predicate on the "update_when" field.
func UpdateWhenNotIn(vs ...time.Time) predicate.Server {
	return predicate.Server(sql.FieldNotIn(FieldUpdateWhen, vs...))
}

// UpdateWhenGT applies the GT predicate on the "update_when" field.
func UpdateWhenGT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGT(FieldUpdateWhen, v))
}

// UpdateWhenGTE applies the GTE predicate on the "update_when" field.
func UpdateWhenGTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldGTE(FieldUpdateWhen, v))
}

// UpdateWhenLT applies the LT predicate on the "update_when" field.
func UpdateWhenLT(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLT(FieldUpdateWhen, v))
}

// UpdateWhenLTE applies the LTE predicate on the "update_when" field.
func UpdateWhenLTE(v time.Time) predicate.Server {
	return predicate.Server(sql.FieldLTE(FieldUpdateWhen, v))
}

// UpdateWhenIsNil applies the IsNil predicate on the "update_when" field.
func UpdateWhenIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldUpdateWhen))
}

// UpdateWhenNotNil applies the NotNil predicate on the "update_when" field.
func UpdateWhenNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldUpdateWhen))
}

// NatsComponentEQ applies the EQ predicate on the "nats_component" field.
func NatsComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldNatsComponent, v))
}

// NatsComponentNEQ applies the NEQ predicate on the "nats_component" field.
func NatsComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldNatsComponent, v))
}

// NatsComponentIsNil applies the IsNil predicate on the "nats_component" field.
func NatsComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldNatsComponent))
}

// NatsComponentNotNil applies the NotNil predicate on the "nats_component" field.
func NatsComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldNatsComponent))
}

// OcspComponentEQ applies the EQ predicate on the "ocsp_component" field.
func OcspComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldOcspComponent, v))
}

// OcspComponentNEQ applies the NEQ predicate on the "ocsp_component" field.
func OcspComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldOcspComponent, v))
}

// OcspComponentIsNil applies the IsNil predicate on the "ocsp_component" field.
func OcspComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldOcspComponent))
}

// OcspComponentNotNil applies the NotNil predicate on the "ocsp_component" field.
func OcspComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldOcspComponent))
}

// ConsoleComponentEQ applies the EQ predicate on the "console_component" field.
func ConsoleComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldConsoleComponent, v))
}

// ConsoleComponentNEQ applies the NEQ predicate on the "console_component" field.
func ConsoleComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldConsoleComponent, v))
}

// ConsoleComponentIsNil applies the IsNil predicate on the "console_component" field.
func ConsoleComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldConsoleComponent))
}

// ConsoleComponentNotNil applies the NotNil predicate on the "console_component" field.
func ConsoleComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldConsoleComponent))
}

// AgentWorkerComponentEQ applies the EQ predicate on the "agent_worker_component" field.
func AgentWorkerComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldAgentWorkerComponent, v))
}

// AgentWorkerComponentNEQ applies the NEQ predicate on the "agent_worker_component" field.
func AgentWorkerComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldAgentWorkerComponent, v))
}

// AgentWorkerComponentIsNil applies the IsNil predicate on the "agent_worker_component" field.
func AgentWorkerComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldAgentWorkerComponent))
}

// AgentWorkerComponentNotNil applies the NotNil predicate on the "agent_worker_component" field.
func AgentWorkerComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldAgentWorkerComponent))
}

// NotificationWorkerComponentEQ applies the EQ predicate on the "notification_worker_component" field.
func NotificationWorkerComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldNotificationWorkerComponent, v))
}

// NotificationWorkerComponentNEQ applies the NEQ predicate on the "notification_worker_component" field.
func NotificationWorkerComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldNotificationWorkerComponent, v))
}

// NotificationWorkerComponentIsNil applies the IsNil predicate on the "notification_worker_component" field.
func NotificationWorkerComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldNotificationWorkerComponent))
}

// NotificationWorkerComponentNotNil applies the NotNil predicate on the "notification_worker_component" field.
func NotificationWorkerComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldNotificationWorkerComponent))
}

// CertManagerWorkerComponentEQ applies the EQ predicate on the "cert_manager_worker_component" field.
func CertManagerWorkerComponentEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldEQ(FieldCertManagerWorkerComponent, v))
}

// CertManagerWorkerComponentNEQ applies the NEQ predicate on the "cert_manager_worker_component" field.
func CertManagerWorkerComponentNEQ(v bool) predicate.Server {
	return predicate.Server(sql.FieldNEQ(FieldCertManagerWorkerComponent, v))
}

// CertManagerWorkerComponentIsNil applies the IsNil predicate on the "cert_manager_worker_component" field.
func CertManagerWorkerComponentIsNil() predicate.Server {
	return predicate.Server(sql.FieldIsNull(FieldCertManagerWorkerComponent))
}

// CertManagerWorkerComponentNotNil applies the NotNil predicate on the "cert_manager_worker_component" field.
func CertManagerWorkerComponentNotNil() predicate.Server {
	return predicate.Server(sql.FieldNotNull(FieldCertManagerWorkerComponent))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Server) predicate.Server {
	return predicate.Server(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Server) predicate.Server {
	return predicate.Server(sql.NotPredicates(p))
}
