// Code generated by ent, DO NOT EDIT.

package server

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the server type in the database.
	Label = "server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// FieldArch holds the string denoting the arch field in the database.
	FieldArch = "arch"
	// FieldOs holds the string denoting the os field in the database.
	FieldOs = "os"
	// FieldComponent holds the string denoting the component field in the database.
	FieldComponent = "component"
	// FieldVersion holds the string denoting the version field in the database.
	FieldVersion = "version"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// Table holds the table name of the server in the database.
	Table = "servers"
)

// Columns holds all SQL columns for server fields.
var Columns = []string{
	FieldID,
	FieldHostname,
	FieldArch,
	FieldOs,
	FieldComponent,
	FieldVersion,
	FieldChannel,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

// Component defines the type for the "component" enum field.
type Component string

// Component values.
const (
	ComponentOcsp               Component = "ocsp"
	ComponentNats               Component = "nats"
	ComponentCertManager        Component = "cert-manager"
	ComponentAgentWorker        Component = "agent-worker"
	ComponentNotificationWorker Component = "notification-worker"
	ComponentCertManagerWorker  Component = "cert-manager-worker"
	ComponentConsole            Component = "console"
)

func (c Component) String() string {
	return string(c)
}

// ComponentValidator is a validator for the "component" field enum values. It is called by the builders before save.
func ComponentValidator(c Component) error {
	switch c {
	case ComponentOcsp, ComponentNats, ComponentCertManager, ComponentAgentWorker, ComponentNotificationWorker, ComponentCertManagerWorker, ComponentConsole:
		return nil
	default:
		return fmt.Errorf("server: invalid enum value for component field: %q", c)
	}
}

// Channel defines the type for the "channel" enum field.
type Channel string

// Channel values.
const (
	ChannelStable  Channel = "stable"
	ChannelTesting Channel = "testing"
	ChannelDevel   Channel = "devel"
)

func (c Channel) String() string {
	return string(c)
}

// ChannelValidator is a validator for the "channel" field enum values. It is called by the builders before save.
func ChannelValidator(c Channel) error {
	switch c {
	case ChannelStable, ChannelTesting, ChannelDevel:
		return nil
	default:
		return fmt.Errorf("server: invalid enum value for channel field: %q", c)
	}
}

// OrderOption defines the ordering options for the Server queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByArch orders the results by the arch field.
func ByArch(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldArch, opts...).ToFunc()
}

// ByOs orders the results by the os field.
func ByOs(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldOs, opts...).ToFunc()
}

// ByComponent orders the results by the component field.
func ByComponent(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldComponent, opts...).ToFunc()
}

// ByVersion orders the results by the version field.
func ByVersion(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldVersion, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}
