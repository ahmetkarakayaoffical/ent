// Code generated by ent, DO NOT EDIT.

package server

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the server type in the database.
	Label = "server"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "uuid"
	// FieldHostname holds the string denoting the hostname field in the database.
	FieldHostname = "hostname"
	// EdgeRelease holds the string denoting the release edge name in mutations.
	EdgeRelease = "release"
	// ReleaseFieldID holds the string denoting the ID field of the Release.
	ReleaseFieldID = "id"
	// Table holds the table name of the server in the database.
	Table = "servers"
	// ReleaseTable is the table that holds the release relation/edge.
	ReleaseTable = "servers"
	// ReleaseInverseTable is the table name for the Release entity.
	// It exists in this package in order to avoid circular dependency with the "release" package.
	ReleaseInverseTable = "releases"
	// ReleaseColumn is the table column denoting the release relation/edge.
	ReleaseColumn = "release_servers"
)

// Columns holds all SQL columns for server fields.
var Columns = []string{
	FieldID,
	FieldHostname,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "servers"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"release_servers",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Server queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByHostname orders the results by the hostname field.
func ByHostname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldHostname, opts...).ToFunc()
}

// ByReleaseField orders the results by release field.
func ByReleaseField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newReleaseStep(), sql.OrderByField(field, opts...))
	}
}
func newReleaseStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ReleaseInverseTable, ReleaseFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ReleaseTable, ReleaseColumn),
	)
}
