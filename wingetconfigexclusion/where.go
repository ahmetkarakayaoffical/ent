// Code generated by ent, DO NOT EDIT.

package wingetconfigexclusion

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldPackageID, v))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldWhen, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldContains(FieldPackageID, v))
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldHasPrefix(FieldPackageID, v))
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldHasSuffix(FieldPackageID, v))
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEqualFold(FieldPackageID, v))
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldContainsFold(FieldPackageID, v))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldLTE(FieldWhen, v))
}

// WhenIsNil applies the IsNil predicate on the "when" field.
func WhenIsNil() predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldIsNull(FieldWhen))
}

// WhenNotNil applies the NotNil predicate on the "when" field.
func WhenNotNil() predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.FieldNotNull(FieldWhen))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Agent) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.WingetConfigExclusion) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.WingetConfigExclusion) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.WingetConfigExclusion) predicate.WingetConfigExclusion {
	return predicate.WingetConfigExclusion(sql.NotPredicates(p))
}
