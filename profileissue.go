// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ahmetkarakayaoffical/ent/agent"
	"github.com/ahmetkarakayaoffical/ent/profile"
	"github.com/ahmetkarakayaoffical/ent/profileissue"
)

// ProfileIssue is the model entity for the ProfileIssue schema.
type ProfileIssue struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Error holds the value of the "error" field.
	Error string `json:"error,omitempty"`
	// When holds the value of the "when" field.
	When time.Time `json:"when,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProfileIssueQuery when eager-loading is set.
	Edges                ProfileIssueEdges `json:"edges"`
	profile_issues       *int
	profile_issue_agents *string
	selectValues         sql.SelectValues
}

// ProfileIssueEdges holds the relations/edges for other nodes in the graph.
type ProfileIssueEdges struct {
	// Profile holds the value of the profile edge.
	Profile *Profile `json:"profile,omitempty"`
	// Agents holds the value of the agents edge.
	Agents *Agent `json:"agents,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// ProfileOrErr returns the Profile value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileIssueEdges) ProfileOrErr() (*Profile, error) {
	if e.Profile != nil {
		return e.Profile, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: profile.Label}
	}
	return nil, &NotLoadedError{edge: "profile"}
}

// AgentsOrErr returns the Agents value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProfileIssueEdges) AgentsOrErr() (*Agent, error) {
	if e.Agents != nil {
		return e.Agents, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "agents"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProfileIssue) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case profileissue.FieldID:
			values[i] = new(sql.NullInt64)
		case profileissue.FieldError:
			values[i] = new(sql.NullString)
		case profileissue.FieldWhen:
			values[i] = new(sql.NullTime)
		case profileissue.ForeignKeys[0]: // profile_issues
			values[i] = new(sql.NullInt64)
		case profileissue.ForeignKeys[1]: // profile_issue_agents
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProfileIssue fields.
func (pi *ProfileIssue) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case profileissue.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pi.ID = int(value.Int64)
		case profileissue.FieldError:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field error", values[i])
			} else if value.Valid {
				pi.Error = value.String
			}
		case profileissue.FieldWhen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field when", values[i])
			} else if value.Valid {
				pi.When = value.Time
			}
		case profileissue.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field profile_issues", value)
			} else if value.Valid {
				pi.profile_issues = new(int)
				*pi.profile_issues = int(value.Int64)
			}
		case profileissue.ForeignKeys[1]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field profile_issue_agents", values[i])
			} else if value.Valid {
				pi.profile_issue_agents = new(string)
				*pi.profile_issue_agents = value.String
			}
		default:
			pi.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProfileIssue.
// This includes values selected through modifiers, order, etc.
func (pi *ProfileIssue) Value(name string) (ent.Value, error) {
	return pi.selectValues.Get(name)
}

// QueryProfile queries the "profile" edge of the ProfileIssue entity.
func (pi *ProfileIssue) QueryProfile() *ProfileQuery {
	return NewProfileIssueClient(pi.config).QueryProfile(pi)
}

// QueryAgents queries the "agents" edge of the ProfileIssue entity.
func (pi *ProfileIssue) QueryAgents() *AgentQuery {
	return NewProfileIssueClient(pi.config).QueryAgents(pi)
}

// Update returns a builder for updating this ProfileIssue.
// Note that you need to call ProfileIssue.Unwrap() before calling this method if this ProfileIssue
// was returned from a transaction, and the transaction was committed or rolled back.
func (pi *ProfileIssue) Update() *ProfileIssueUpdateOne {
	return NewProfileIssueClient(pi.config).UpdateOne(pi)
}

// Unwrap unwraps the ProfileIssue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pi *ProfileIssue) Unwrap() *ProfileIssue {
	_tx, ok := pi.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProfileIssue is not a transactional entity")
	}
	pi.config.driver = _tx.drv
	return pi
}

// String implements the fmt.Stringer.
func (pi *ProfileIssue) String() string {
	var builder strings.Builder
	builder.WriteString("ProfileIssue(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pi.ID))
	builder.WriteString("error=")
	builder.WriteString(pi.Error)
	builder.WriteString(", ")
	builder.WriteString("when=")
	builder.WriteString(pi.When.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// ProfileIssues is a parsable slice of ProfileIssue.
type ProfileIssues []*ProfileIssue
