// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/openuem_ent/server"
)

// ServerCreate is the builder for creating a Server entity.
type ServerCreate struct {
	config
	mutation *ServerMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetHostname sets the "hostname" field.
func (sc *ServerCreate) SetHostname(s string) *ServerCreate {
	sc.mutation.SetHostname(s)
	return sc
}

// SetArch sets the "arch" field.
func (sc *ServerCreate) SetArch(s string) *ServerCreate {
	sc.mutation.SetArch(s)
	return sc
}

// SetOs sets the "os" field.
func (sc *ServerCreate) SetOs(s string) *ServerCreate {
	sc.mutation.SetOs(s)
	return sc
}

// SetVersion sets the "version" field.
func (sc *ServerCreate) SetVersion(s string) *ServerCreate {
	sc.mutation.SetVersion(s)
	return sc
}

// SetChannel sets the "channel" field.
func (sc *ServerCreate) SetChannel(s server.Channel) *ServerCreate {
	sc.mutation.SetChannel(s)
	return sc
}

// SetUpdateStatus sets the "update_status" field.
func (sc *ServerCreate) SetUpdateStatus(ss server.UpdateStatus) *ServerCreate {
	sc.mutation.SetUpdateStatus(ss)
	return sc
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdateStatus(ss *server.UpdateStatus) *ServerCreate {
	if ss != nil {
		sc.SetUpdateStatus(*ss)
	}
	return sc
}

// SetUpdateMessage sets the "update_message" field.
func (sc *ServerCreate) SetUpdateMessage(s string) *ServerCreate {
	sc.mutation.SetUpdateMessage(s)
	return sc
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdateMessage(s *string) *ServerCreate {
	if s != nil {
		sc.SetUpdateMessage(*s)
	}
	return sc
}

// SetUpdateWhen sets the "update_when" field.
func (sc *ServerCreate) SetUpdateWhen(t time.Time) *ServerCreate {
	sc.mutation.SetUpdateWhen(t)
	return sc
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (sc *ServerCreate) SetNillableUpdateWhen(t *time.Time) *ServerCreate {
	if t != nil {
		sc.SetUpdateWhen(*t)
	}
	return sc
}

// SetNatsComponent sets the "nats_component" field.
func (sc *ServerCreate) SetNatsComponent(b bool) *ServerCreate {
	sc.mutation.SetNatsComponent(b)
	return sc
}

// SetNillableNatsComponent sets the "nats_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableNatsComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetNatsComponent(*b)
	}
	return sc
}

// SetOcspComponent sets the "ocsp_component" field.
func (sc *ServerCreate) SetOcspComponent(b bool) *ServerCreate {
	sc.mutation.SetOcspComponent(b)
	return sc
}

// SetNillableOcspComponent sets the "ocsp_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableOcspComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetOcspComponent(*b)
	}
	return sc
}

// SetConsoleComponent sets the "console_component" field.
func (sc *ServerCreate) SetConsoleComponent(b bool) *ServerCreate {
	sc.mutation.SetConsoleComponent(b)
	return sc
}

// SetNillableConsoleComponent sets the "console_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableConsoleComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetConsoleComponent(*b)
	}
	return sc
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (sc *ServerCreate) SetAgentWorkerComponent(b bool) *ServerCreate {
	sc.mutation.SetAgentWorkerComponent(b)
	return sc
}

// SetNillableAgentWorkerComponent sets the "agent_worker_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableAgentWorkerComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetAgentWorkerComponent(*b)
	}
	return sc
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (sc *ServerCreate) SetNotificationWorkerComponent(b bool) *ServerCreate {
	sc.mutation.SetNotificationWorkerComponent(b)
	return sc
}

// SetNillableNotificationWorkerComponent sets the "notification_worker_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableNotificationWorkerComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetNotificationWorkerComponent(*b)
	}
	return sc
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (sc *ServerCreate) SetCertManagerWorkerComponent(b bool) *ServerCreate {
	sc.mutation.SetCertManagerWorkerComponent(b)
	return sc
}

// SetNillableCertManagerWorkerComponent sets the "cert_manager_worker_component" field if the given value is not nil.
func (sc *ServerCreate) SetNillableCertManagerWorkerComponent(b *bool) *ServerCreate {
	if b != nil {
		sc.SetCertManagerWorkerComponent(*b)
	}
	return sc
}

// Mutation returns the ServerMutation object of the builder.
func (sc *ServerCreate) Mutation() *ServerMutation {
	return sc.mutation
}

// Save creates the Server in the database.
func (sc *ServerCreate) Save(ctx context.Context) (*Server, error) {
	return withHooks(ctx, sc.sqlSave, sc.mutation, sc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (sc *ServerCreate) SaveX(ctx context.Context) *Server {
	v, err := sc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (sc *ServerCreate) Exec(ctx context.Context) error {
	_, err := sc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (sc *ServerCreate) ExecX(ctx context.Context) {
	if err := sc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (sc *ServerCreate) check() error {
	if _, ok := sc.mutation.Hostname(); !ok {
		return &ValidationError{Name: "hostname", err: errors.New(`openuem_ent: missing required field "Server.hostname"`)}
	}
	if _, ok := sc.mutation.Arch(); !ok {
		return &ValidationError{Name: "arch", err: errors.New(`openuem_ent: missing required field "Server.arch"`)}
	}
	if _, ok := sc.mutation.Os(); !ok {
		return &ValidationError{Name: "os", err: errors.New(`openuem_ent: missing required field "Server.os"`)}
	}
	if _, ok := sc.mutation.Version(); !ok {
		return &ValidationError{Name: "version", err: errors.New(`openuem_ent: missing required field "Server.version"`)}
	}
	if _, ok := sc.mutation.Channel(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`openuem_ent: missing required field "Server.channel"`)}
	}
	if v, ok := sc.mutation.Channel(); ok {
		if err := server.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`openuem_ent: validator failed for field "Server.channel": %w`, err)}
		}
	}
	if v, ok := sc.mutation.UpdateStatus(); ok {
		if err := server.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`openuem_ent: validator failed for field "Server.update_status": %w`, err)}
		}
	}
	return nil
}

func (sc *ServerCreate) sqlSave(ctx context.Context) (*Server, error) {
	if err := sc.check(); err != nil {
		return nil, err
	}
	_node, _spec := sc.createSpec()
	if err := sqlgraph.CreateNode(ctx, sc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	sc.mutation.id = &_node.ID
	sc.mutation.done = true
	return _node, nil
}

func (sc *ServerCreate) createSpec() (*Server, *sqlgraph.CreateSpec) {
	var (
		_node = &Server{config: sc.config}
		_spec = sqlgraph.NewCreateSpec(server.Table, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	)
	_spec.OnConflict = sc.conflict
	if value, ok := sc.mutation.Hostname(); ok {
		_spec.SetField(server.FieldHostname, field.TypeString, value)
		_node.Hostname = value
	}
	if value, ok := sc.mutation.Arch(); ok {
		_spec.SetField(server.FieldArch, field.TypeString, value)
		_node.Arch = value
	}
	if value, ok := sc.mutation.Os(); ok {
		_spec.SetField(server.FieldOs, field.TypeString, value)
		_node.Os = value
	}
	if value, ok := sc.mutation.Version(); ok {
		_spec.SetField(server.FieldVersion, field.TypeString, value)
		_node.Version = value
	}
	if value, ok := sc.mutation.Channel(); ok {
		_spec.SetField(server.FieldChannel, field.TypeEnum, value)
		_node.Channel = value
	}
	if value, ok := sc.mutation.UpdateStatus(); ok {
		_spec.SetField(server.FieldUpdateStatus, field.TypeEnum, value)
		_node.UpdateStatus = value
	}
	if value, ok := sc.mutation.UpdateMessage(); ok {
		_spec.SetField(server.FieldUpdateMessage, field.TypeString, value)
		_node.UpdateMessage = value
	}
	if value, ok := sc.mutation.UpdateWhen(); ok {
		_spec.SetField(server.FieldUpdateWhen, field.TypeTime, value)
		_node.UpdateWhen = value
	}
	if value, ok := sc.mutation.NatsComponent(); ok {
		_spec.SetField(server.FieldNatsComponent, field.TypeBool, value)
		_node.NatsComponent = value
	}
	if value, ok := sc.mutation.OcspComponent(); ok {
		_spec.SetField(server.FieldOcspComponent, field.TypeBool, value)
		_node.OcspComponent = value
	}
	if value, ok := sc.mutation.ConsoleComponent(); ok {
		_spec.SetField(server.FieldConsoleComponent, field.TypeBool, value)
		_node.ConsoleComponent = value
	}
	if value, ok := sc.mutation.AgentWorkerComponent(); ok {
		_spec.SetField(server.FieldAgentWorkerComponent, field.TypeBool, value)
		_node.AgentWorkerComponent = value
	}
	if value, ok := sc.mutation.NotificationWorkerComponent(); ok {
		_spec.SetField(server.FieldNotificationWorkerComponent, field.TypeBool, value)
		_node.NotificationWorkerComponent = value
	}
	if value, ok := sc.mutation.CertManagerWorkerComponent(); ok {
		_spec.SetField(server.FieldCertManagerWorkerComponent, field.TypeBool, value)
		_node.CertManagerWorkerComponent = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Server.Create().
//		SetHostname(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerUpsert) {
//			SetHostname(v+v).
//		}).
//		Exec(ctx)
func (sc *ServerCreate) OnConflict(opts ...sql.ConflictOption) *ServerUpsertOne {
	sc.conflict = opts
	return &ServerUpsertOne{
		create: sc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (sc *ServerCreate) OnConflictColumns(columns ...string) *ServerUpsertOne {
	sc.conflict = append(sc.conflict, sql.ConflictColumns(columns...))
	return &ServerUpsertOne{
		create: sc,
	}
}

type (
	// ServerUpsertOne is the builder for "upsert"-ing
	//  one Server node.
	ServerUpsertOne struct {
		create *ServerCreate
	}

	// ServerUpsert is the "OnConflict" setter.
	ServerUpsert struct {
		*sql.UpdateSet
	}
)

// SetHostname sets the "hostname" field.
func (u *ServerUpsert) SetHostname(v string) *ServerUpsert {
	u.Set(server.FieldHostname, v)
	return u
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ServerUpsert) UpdateHostname() *ServerUpsert {
	u.SetExcluded(server.FieldHostname)
	return u
}

// SetArch sets the "arch" field.
func (u *ServerUpsert) SetArch(v string) *ServerUpsert {
	u.Set(server.FieldArch, v)
	return u
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ServerUpsert) UpdateArch() *ServerUpsert {
	u.SetExcluded(server.FieldArch)
	return u
}

// SetOs sets the "os" field.
func (u *ServerUpsert) SetOs(v string) *ServerUpsert {
	u.Set(server.FieldOs, v)
	return u
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ServerUpsert) UpdateOs() *ServerUpsert {
	u.SetExcluded(server.FieldOs)
	return u
}

// SetVersion sets the "version" field.
func (u *ServerUpsert) SetVersion(v string) *ServerUpsert {
	u.Set(server.FieldVersion, v)
	return u
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerUpsert) UpdateVersion() *ServerUpsert {
	u.SetExcluded(server.FieldVersion)
	return u
}

// SetChannel sets the "channel" field.
func (u *ServerUpsert) SetChannel(v server.Channel) *ServerUpsert {
	u.Set(server.FieldChannel, v)
	return u
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ServerUpsert) UpdateChannel() *ServerUpsert {
	u.SetExcluded(server.FieldChannel)
	return u
}

// SetUpdateStatus sets the "update_status" field.
func (u *ServerUpsert) SetUpdateStatus(v server.UpdateStatus) *ServerUpsert {
	u.Set(server.FieldUpdateStatus, v)
	return u
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ServerUpsert) UpdateUpdateStatus() *ServerUpsert {
	u.SetExcluded(server.FieldUpdateStatus)
	return u
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ServerUpsert) ClearUpdateStatus() *ServerUpsert {
	u.SetNull(server.FieldUpdateStatus)
	return u
}

// SetUpdateMessage sets the "update_message" field.
func (u *ServerUpsert) SetUpdateMessage(v string) *ServerUpsert {
	u.Set(server.FieldUpdateMessage, v)
	return u
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ServerUpsert) UpdateUpdateMessage() *ServerUpsert {
	u.SetExcluded(server.FieldUpdateMessage)
	return u
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ServerUpsert) ClearUpdateMessage() *ServerUpsert {
	u.SetNull(server.FieldUpdateMessage)
	return u
}

// SetUpdateWhen sets the "update_when" field.
func (u *ServerUpsert) SetUpdateWhen(v time.Time) *ServerUpsert {
	u.Set(server.FieldUpdateWhen, v)
	return u
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ServerUpsert) UpdateUpdateWhen() *ServerUpsert {
	u.SetExcluded(server.FieldUpdateWhen)
	return u
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ServerUpsert) ClearUpdateWhen() *ServerUpsert {
	u.SetNull(server.FieldUpdateWhen)
	return u
}

// SetNatsComponent sets the "nats_component" field.
func (u *ServerUpsert) SetNatsComponent(v bool) *ServerUpsert {
	u.Set(server.FieldNatsComponent, v)
	return u
}

// UpdateNatsComponent sets the "nats_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateNatsComponent() *ServerUpsert {
	u.SetExcluded(server.FieldNatsComponent)
	return u
}

// ClearNatsComponent clears the value of the "nats_component" field.
func (u *ServerUpsert) ClearNatsComponent() *ServerUpsert {
	u.SetNull(server.FieldNatsComponent)
	return u
}

// SetOcspComponent sets the "ocsp_component" field.
func (u *ServerUpsert) SetOcspComponent(v bool) *ServerUpsert {
	u.Set(server.FieldOcspComponent, v)
	return u
}

// UpdateOcspComponent sets the "ocsp_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateOcspComponent() *ServerUpsert {
	u.SetExcluded(server.FieldOcspComponent)
	return u
}

// ClearOcspComponent clears the value of the "ocsp_component" field.
func (u *ServerUpsert) ClearOcspComponent() *ServerUpsert {
	u.SetNull(server.FieldOcspComponent)
	return u
}

// SetConsoleComponent sets the "console_component" field.
func (u *ServerUpsert) SetConsoleComponent(v bool) *ServerUpsert {
	u.Set(server.FieldConsoleComponent, v)
	return u
}

// UpdateConsoleComponent sets the "console_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateConsoleComponent() *ServerUpsert {
	u.SetExcluded(server.FieldConsoleComponent)
	return u
}

// ClearConsoleComponent clears the value of the "console_component" field.
func (u *ServerUpsert) ClearConsoleComponent() *ServerUpsert {
	u.SetNull(server.FieldConsoleComponent)
	return u
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (u *ServerUpsert) SetAgentWorkerComponent(v bool) *ServerUpsert {
	u.Set(server.FieldAgentWorkerComponent, v)
	return u
}

// UpdateAgentWorkerComponent sets the "agent_worker_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateAgentWorkerComponent() *ServerUpsert {
	u.SetExcluded(server.FieldAgentWorkerComponent)
	return u
}

// ClearAgentWorkerComponent clears the value of the "agent_worker_component" field.
func (u *ServerUpsert) ClearAgentWorkerComponent() *ServerUpsert {
	u.SetNull(server.FieldAgentWorkerComponent)
	return u
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (u *ServerUpsert) SetNotificationWorkerComponent(v bool) *ServerUpsert {
	u.Set(server.FieldNotificationWorkerComponent, v)
	return u
}

// UpdateNotificationWorkerComponent sets the "notification_worker_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateNotificationWorkerComponent() *ServerUpsert {
	u.SetExcluded(server.FieldNotificationWorkerComponent)
	return u
}

// ClearNotificationWorkerComponent clears the value of the "notification_worker_component" field.
func (u *ServerUpsert) ClearNotificationWorkerComponent() *ServerUpsert {
	u.SetNull(server.FieldNotificationWorkerComponent)
	return u
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (u *ServerUpsert) SetCertManagerWorkerComponent(v bool) *ServerUpsert {
	u.Set(server.FieldCertManagerWorkerComponent, v)
	return u
}

// UpdateCertManagerWorkerComponent sets the "cert_manager_worker_component" field to the value that was provided on create.
func (u *ServerUpsert) UpdateCertManagerWorkerComponent() *ServerUpsert {
	u.SetExcluded(server.FieldCertManagerWorkerComponent)
	return u
}

// ClearCertManagerWorkerComponent clears the value of the "cert_manager_worker_component" field.
func (u *ServerUpsert) ClearCertManagerWorkerComponent() *ServerUpsert {
	u.SetNull(server.FieldCertManagerWorkerComponent)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServerUpsertOne) UpdateNewValues() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Server.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ServerUpsertOne) Ignore() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerUpsertOne) DoNothing() *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerCreate.OnConflict
// documentation for more info.
func (u *ServerUpsertOne) Update(set func(*ServerUpsert)) *ServerUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetHostname sets the "hostname" field.
func (u *ServerUpsertOne) SetHostname(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateHostname() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateHostname()
	})
}

// SetArch sets the "arch" field.
func (u *ServerUpsertOne) SetArch(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateArch() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateArch()
	})
}

// SetOs sets the "os" field.
func (u *ServerUpsertOne) SetOs(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateOs() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateOs()
	})
}

// SetVersion sets the "version" field.
func (u *ServerUpsertOne) SetVersion(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateVersion() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateVersion()
	})
}

// SetChannel sets the "channel" field.
func (u *ServerUpsertOne) SetChannel(v server.Channel) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateChannel() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateChannel()
	})
}

// SetUpdateStatus sets the "update_status" field.
func (u *ServerUpsertOne) SetUpdateStatus(v server.UpdateStatus) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateStatus(v)
	})
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateUpdateStatus() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateStatus()
	})
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ServerUpsertOne) ClearUpdateStatus() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateStatus()
	})
}

// SetUpdateMessage sets the "update_message" field.
func (u *ServerUpsertOne) SetUpdateMessage(v string) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateMessage(v)
	})
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateUpdateMessage() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateMessage()
	})
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ServerUpsertOne) ClearUpdateMessage() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateMessage()
	})
}

// SetUpdateWhen sets the "update_when" field.
func (u *ServerUpsertOne) SetUpdateWhen(v time.Time) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateWhen(v)
	})
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateUpdateWhen() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateWhen()
	})
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ServerUpsertOne) ClearUpdateWhen() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateWhen()
	})
}

// SetNatsComponent sets the "nats_component" field.
func (u *ServerUpsertOne) SetNatsComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetNatsComponent(v)
	})
}

// UpdateNatsComponent sets the "nats_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateNatsComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateNatsComponent()
	})
}

// ClearNatsComponent clears the value of the "nats_component" field.
func (u *ServerUpsertOne) ClearNatsComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearNatsComponent()
	})
}

// SetOcspComponent sets the "ocsp_component" field.
func (u *ServerUpsertOne) SetOcspComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetOcspComponent(v)
	})
}

// UpdateOcspComponent sets the "ocsp_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateOcspComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateOcspComponent()
	})
}

// ClearOcspComponent clears the value of the "ocsp_component" field.
func (u *ServerUpsertOne) ClearOcspComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearOcspComponent()
	})
}

// SetConsoleComponent sets the "console_component" field.
func (u *ServerUpsertOne) SetConsoleComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetConsoleComponent(v)
	})
}

// UpdateConsoleComponent sets the "console_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateConsoleComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateConsoleComponent()
	})
}

// ClearConsoleComponent clears the value of the "console_component" field.
func (u *ServerUpsertOne) ClearConsoleComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearConsoleComponent()
	})
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (u *ServerUpsertOne) SetAgentWorkerComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetAgentWorkerComponent(v)
	})
}

// UpdateAgentWorkerComponent sets the "agent_worker_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateAgentWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateAgentWorkerComponent()
	})
}

// ClearAgentWorkerComponent clears the value of the "agent_worker_component" field.
func (u *ServerUpsertOne) ClearAgentWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearAgentWorkerComponent()
	})
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (u *ServerUpsertOne) SetNotificationWorkerComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetNotificationWorkerComponent(v)
	})
}

// UpdateNotificationWorkerComponent sets the "notification_worker_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateNotificationWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateNotificationWorkerComponent()
	})
}

// ClearNotificationWorkerComponent clears the value of the "notification_worker_component" field.
func (u *ServerUpsertOne) ClearNotificationWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearNotificationWorkerComponent()
	})
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (u *ServerUpsertOne) SetCertManagerWorkerComponent(v bool) *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.SetCertManagerWorkerComponent(v)
	})
}

// UpdateCertManagerWorkerComponent sets the "cert_manager_worker_component" field to the value that was provided on create.
func (u *ServerUpsertOne) UpdateCertManagerWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateCertManagerWorkerComponent()
	})
}

// ClearCertManagerWorkerComponent clears the value of the "cert_manager_worker_component" field.
func (u *ServerUpsertOne) ClearCertManagerWorkerComponent() *ServerUpsertOne {
	return u.Update(func(s *ServerUpsert) {
		s.ClearCertManagerWorkerComponent()
	})
}

// Exec executes the query.
func (u *ServerUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for ServerCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ServerUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ServerUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ServerCreateBulk is the builder for creating many Server entities in bulk.
type ServerCreateBulk struct {
	config
	err      error
	builders []*ServerCreate
	conflict []sql.ConflictOption
}

// Save creates the Server entities in the database.
func (scb *ServerCreateBulk) Save(ctx context.Context) ([]*Server, error) {
	if scb.err != nil {
		return nil, scb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(scb.builders))
	nodes := make([]*Server, len(scb.builders))
	mutators := make([]Mutator, len(scb.builders))
	for i := range scb.builders {
		func(i int, root context.Context) {
			builder := scb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ServerMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, scb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = scb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, scb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, scb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (scb *ServerCreateBulk) SaveX(ctx context.Context) []*Server {
	v, err := scb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (scb *ServerCreateBulk) Exec(ctx context.Context) error {
	_, err := scb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (scb *ServerCreateBulk) ExecX(ctx context.Context) {
	if err := scb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Server.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ServerUpsert) {
//			SetHostname(v+v).
//		}).
//		Exec(ctx)
func (scb *ServerCreateBulk) OnConflict(opts ...sql.ConflictOption) *ServerUpsertBulk {
	scb.conflict = opts
	return &ServerUpsertBulk{
		create: scb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (scb *ServerCreateBulk) OnConflictColumns(columns ...string) *ServerUpsertBulk {
	scb.conflict = append(scb.conflict, sql.ConflictColumns(columns...))
	return &ServerUpsertBulk{
		create: scb,
	}
}

// ServerUpsertBulk is the builder for "upsert"-ing
// a bulk of Server nodes.
type ServerUpsertBulk struct {
	create *ServerCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ServerUpsertBulk) UpdateNewValues() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Server.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ServerUpsertBulk) Ignore() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ServerUpsertBulk) DoNothing() *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ServerCreateBulk.OnConflict
// documentation for more info.
func (u *ServerUpsertBulk) Update(set func(*ServerUpsert)) *ServerUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ServerUpsert{UpdateSet: update})
	}))
	return u
}

// SetHostname sets the "hostname" field.
func (u *ServerUpsertBulk) SetHostname(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetHostname(v)
	})
}

// UpdateHostname sets the "hostname" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateHostname() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateHostname()
	})
}

// SetArch sets the "arch" field.
func (u *ServerUpsertBulk) SetArch(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetArch(v)
	})
}

// UpdateArch sets the "arch" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateArch() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateArch()
	})
}

// SetOs sets the "os" field.
func (u *ServerUpsertBulk) SetOs(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetOs(v)
	})
}

// UpdateOs sets the "os" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateOs() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateOs()
	})
}

// SetVersion sets the "version" field.
func (u *ServerUpsertBulk) SetVersion(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetVersion(v)
	})
}

// UpdateVersion sets the "version" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateVersion() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateVersion()
	})
}

// SetChannel sets the "channel" field.
func (u *ServerUpsertBulk) SetChannel(v server.Channel) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetChannel(v)
	})
}

// UpdateChannel sets the "channel" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateChannel() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateChannel()
	})
}

// SetUpdateStatus sets the "update_status" field.
func (u *ServerUpsertBulk) SetUpdateStatus(v server.UpdateStatus) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateStatus(v)
	})
}

// UpdateUpdateStatus sets the "update_status" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateUpdateStatus() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateStatus()
	})
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (u *ServerUpsertBulk) ClearUpdateStatus() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateStatus()
	})
}

// SetUpdateMessage sets the "update_message" field.
func (u *ServerUpsertBulk) SetUpdateMessage(v string) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateMessage(v)
	})
}

// UpdateUpdateMessage sets the "update_message" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateUpdateMessage() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateMessage()
	})
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (u *ServerUpsertBulk) ClearUpdateMessage() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateMessage()
	})
}

// SetUpdateWhen sets the "update_when" field.
func (u *ServerUpsertBulk) SetUpdateWhen(v time.Time) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetUpdateWhen(v)
	})
}

// UpdateUpdateWhen sets the "update_when" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateUpdateWhen() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateUpdateWhen()
	})
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (u *ServerUpsertBulk) ClearUpdateWhen() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearUpdateWhen()
	})
}

// SetNatsComponent sets the "nats_component" field.
func (u *ServerUpsertBulk) SetNatsComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetNatsComponent(v)
	})
}

// UpdateNatsComponent sets the "nats_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateNatsComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateNatsComponent()
	})
}

// ClearNatsComponent clears the value of the "nats_component" field.
func (u *ServerUpsertBulk) ClearNatsComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearNatsComponent()
	})
}

// SetOcspComponent sets the "ocsp_component" field.
func (u *ServerUpsertBulk) SetOcspComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetOcspComponent(v)
	})
}

// UpdateOcspComponent sets the "ocsp_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateOcspComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateOcspComponent()
	})
}

// ClearOcspComponent clears the value of the "ocsp_component" field.
func (u *ServerUpsertBulk) ClearOcspComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearOcspComponent()
	})
}

// SetConsoleComponent sets the "console_component" field.
func (u *ServerUpsertBulk) SetConsoleComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetConsoleComponent(v)
	})
}

// UpdateConsoleComponent sets the "console_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateConsoleComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateConsoleComponent()
	})
}

// ClearConsoleComponent clears the value of the "console_component" field.
func (u *ServerUpsertBulk) ClearConsoleComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearConsoleComponent()
	})
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (u *ServerUpsertBulk) SetAgentWorkerComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetAgentWorkerComponent(v)
	})
}

// UpdateAgentWorkerComponent sets the "agent_worker_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateAgentWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateAgentWorkerComponent()
	})
}

// ClearAgentWorkerComponent clears the value of the "agent_worker_component" field.
func (u *ServerUpsertBulk) ClearAgentWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearAgentWorkerComponent()
	})
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (u *ServerUpsertBulk) SetNotificationWorkerComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetNotificationWorkerComponent(v)
	})
}

// UpdateNotificationWorkerComponent sets the "notification_worker_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateNotificationWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateNotificationWorkerComponent()
	})
}

// ClearNotificationWorkerComponent clears the value of the "notification_worker_component" field.
func (u *ServerUpsertBulk) ClearNotificationWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearNotificationWorkerComponent()
	})
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (u *ServerUpsertBulk) SetCertManagerWorkerComponent(v bool) *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.SetCertManagerWorkerComponent(v)
	})
}

// UpdateCertManagerWorkerComponent sets the "cert_manager_worker_component" field to the value that was provided on create.
func (u *ServerUpsertBulk) UpdateCertManagerWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.UpdateCertManagerWorkerComponent()
	})
}

// ClearCertManagerWorkerComponent clears the value of the "cert_manager_worker_component" field.
func (u *ServerUpsertBulk) ClearCertManagerWorkerComponent() *ServerUpsertBulk {
	return u.Update(func(s *ServerUpsert) {
		s.ClearCertManagerWorkerComponent()
	})
}

// Exec executes the query.
func (u *ServerUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("openuem_ent: OnConflict was set for builder %d. Set it on the ServerCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("openuem_ent: missing options for ServerCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ServerUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
