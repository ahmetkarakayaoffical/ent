// Code generated by ent, DO NOT EDIT.

package release

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the release type in the database.
	Label = "release"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldChannel holds the string denoting the channel field in the database.
	FieldChannel = "channel"
	// FieldSummary holds the string denoting the summary field in the database.
	FieldSummary = "summary"
	// FieldReleaseNotes holds the string denoting the release_notes field in the database.
	FieldReleaseNotes = "release_notes"
	// FieldFileURL holds the string denoting the file_url field in the database.
	FieldFileURL = "file_url"
	// FieldChecksum holds the string denoting the checksum field in the database.
	FieldChecksum = "checksum"
	// FieldIsCritical holds the string denoting the is_critical field in the database.
	FieldIsCritical = "is_critical"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "oid"
	// Table holds the table name of the release in the database.
	Table = "releases"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "agents"
	// OwnerInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OwnerInverseTable = "agents"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "agent_release"
)

// Columns holds all SQL columns for release fields.
var Columns = []string{
	FieldID,
	FieldChannel,
	FieldSummary,
	FieldReleaseNotes,
	FieldFileURL,
	FieldChecksum,
	FieldIsCritical,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// IDValidator is a validator for the "id" field. It is called by the builders before save.
	IDValidator func(string) error
)

// OrderOption defines the ordering options for the Release queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByChannel orders the results by the channel field.
func ByChannel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChannel, opts...).ToFunc()
}

// BySummary orders the results by the summary field.
func BySummary(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSummary, opts...).ToFunc()
}

// ByReleaseNotes orders the results by the release_notes field.
func ByReleaseNotes(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldReleaseNotes, opts...).ToFunc()
}

// ByFileURL orders the results by the file_url field.
func ByFileURL(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldFileURL, opts...).ToFunc()
}

// ByChecksum orders the results by the checksum field.
func ByChecksum(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldChecksum, opts...).ToFunc()
}

// ByIsCritical orders the results by the is_critical field.
func ByIsCritical(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsCritical, opts...).ToFunc()
}

// ByOwnerCount orders the results by owner count.
func ByOwnerCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newOwnerStep(), opts...)
	}
}

// ByOwner orders the results by owner terms.
func ByOwner(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.O2M, true, OwnerTable, OwnerColumn),
	)
}
