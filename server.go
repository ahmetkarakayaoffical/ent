// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/server"
)

// Server is the model entity for the Server schema.
type Server struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Arch holds the value of the "arch" field.
	Arch string `json:"arch,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel server.Channel `json:"channel,omitempty"`
	// UpdateStatus holds the value of the "update_status" field.
	UpdateStatus server.UpdateStatus `json:"update_status,omitempty"`
	// UpdateMessage holds the value of the "update_message" field.
	UpdateMessage string `json:"update_message,omitempty"`
	// UpdateWhen holds the value of the "update_when" field.
	UpdateWhen   time.Time `json:"update_when,omitempty"`
	selectValues sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Server) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			values[i] = new(sql.NullInt64)
		case server.FieldHostname, server.FieldArch, server.FieldOs, server.FieldVersion, server.FieldChannel, server.FieldUpdateStatus, server.FieldUpdateMessage:
			values[i] = new(sql.NullString)
		case server.FieldUpdateWhen:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Server fields.
func (s *Server) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case server.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			s.ID = int(value.Int64)
		case server.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				s.Hostname = value.String
			}
		case server.FieldArch:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field arch", values[i])
			} else if value.Valid {
				s.Arch = value.String
			}
		case server.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				s.Os = value.String
			}
		case server.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				s.Version = value.String
			}
		case server.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				s.Channel = server.Channel(value.String)
			}
		case server.FieldUpdateStatus:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_status", values[i])
			} else if value.Valid {
				s.UpdateStatus = server.UpdateStatus(value.String)
			}
		case server.FieldUpdateMessage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field update_message", values[i])
			} else if value.Valid {
				s.UpdateMessage = value.String
			}
		case server.FieldUpdateWhen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field update_when", values[i])
			} else if value.Valid {
				s.UpdateWhen = value.Time
			}
		default:
			s.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Server.
// This includes values selected through modifiers, order, etc.
func (s *Server) Value(name string) (ent.Value, error) {
	return s.selectValues.Get(name)
}

// Update returns a builder for updating this Server.
// Note that you need to call Server.Unwrap() before calling this method if this Server
// was returned from a transaction, and the transaction was committed or rolled back.
func (s *Server) Update() *ServerUpdateOne {
	return NewServerClient(s.config).UpdateOne(s)
}

// Unwrap unwraps the Server entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (s *Server) Unwrap() *Server {
	_tx, ok := s.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: Server is not a transactional entity")
	}
	s.config.driver = _tx.drv
	return s
}

// String implements the fmt.Stringer.
func (s *Server) String() string {
	var builder strings.Builder
	builder.WriteString("Server(")
	builder.WriteString(fmt.Sprintf("id=%v, ", s.ID))
	builder.WriteString("hostname=")
	builder.WriteString(s.Hostname)
	builder.WriteString(", ")
	builder.WriteString("arch=")
	builder.WriteString(s.Arch)
	builder.WriteString(", ")
	builder.WriteString("os=")
	builder.WriteString(s.Os)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(s.Version)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(fmt.Sprintf("%v", s.Channel))
	builder.WriteString(", ")
	builder.WriteString("update_status=")
	builder.WriteString(fmt.Sprintf("%v", s.UpdateStatus))
	builder.WriteString(", ")
	builder.WriteString("update_message=")
	builder.WriteString(s.UpdateMessage)
	builder.WriteString(", ")
	builder.WriteString("update_when=")
	builder.WriteString(s.UpdateWhen.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Servers is a parsable slice of Server.
type Servers []*Server
