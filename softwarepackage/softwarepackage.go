// Code generated by ent, DO NOT EDIT.

package softwarepackage

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
)

const (
	// Label holds the string label denoting the softwarepackage type in the database.
	Label = "software_package"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldSource holds the string denoting the source field in the database.
	FieldSource = "source"
	// Table holds the table name of the softwarepackage in the database.
	Table = "software_packages"
)

// Columns holds all SQL columns for softwarepackage fields.
var Columns = []string{
	FieldID,
	FieldPackageID,
	FieldName,
	FieldSource,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// PackageIDValidator is a validator for the "package_id" field. It is called by the builders before save.
	PackageIDValidator func(string) error
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
)

// Source defines the type for the "source" enum field.
type Source string

// Source values.
const (
	SourceWinget  Source = "winget"
	SourceFlatpak Source = "flatpak"
)

func (s Source) String() string {
	return string(s)
}

// SourceValidator is a validator for the "source" field enum values. It is called by the builders before save.
func SourceValidator(s Source) error {
	switch s {
	case SourceWinget, SourceFlatpak:
		return nil
	default:
		return fmt.Errorf("softwarepackage: invalid enum value for source field: %q", s)
	}
}

// OrderOption defines the ordering options for the SoftwarePackage queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// BySource orders the results by the source field.
func BySource(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSource, opts...).ToFunc()
}
