// Code generated by ent, DO NOT EDIT.

package softwarepackage

import (
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLTE(FieldID, id))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldPackageID, v))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldName, v))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldContains(FieldPackageID, v))
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldHasPrefix(FieldPackageID, v))
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldHasSuffix(FieldPackageID, v))
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEqualFold(FieldPackageID, v))
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldContainsFold(FieldPackageID, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldContainsFold(FieldName, v))
}

// SourceEQ applies the EQ predicate on the "source" field.
func SourceEQ(v Source) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldEQ(FieldSource, v))
}

// SourceNEQ applies the NEQ predicate on the "source" field.
func SourceNEQ(v Source) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNEQ(FieldSource, v))
}

// SourceIn applies the In predicate on the "source" field.
func SourceIn(vs ...Source) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldIn(FieldSource, vs...))
}

// SourceNotIn applies the NotIn predicate on the "source" field.
func SourceNotIn(vs ...Source) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.FieldNotIn(FieldSource, vs...))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.SoftwarePackage) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.SoftwarePackage) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.SoftwarePackage) predicate.SoftwarePackage {
	return predicate.SoftwarePackage(sql.NotPredicates(p))
}
