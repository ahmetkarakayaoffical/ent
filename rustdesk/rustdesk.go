// Code generated by ent, DO NOT EDIT.

package rustdesk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the rustdesk type in the database.
	Label = "rustdesk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldCustomRendezvousServer holds the string denoting the custom_rendezvous_server field in the database.
	FieldCustomRendezvousServer = "custom_rendezvous_server"
	// FieldRelayServer holds the string denoting the relay_server field in the database.
	FieldRelayServer = "relay_server"
	// FieldAPIServer holds the string denoting the api_server field in the database.
	FieldAPIServer = "api_server"
	// FieldKey holds the string denoting the key field in the database.
	FieldKey = "key"
	// FieldUsePermanentPassword holds the string denoting the use_permanent_password field in the database.
	FieldUsePermanentPassword = "use_permanent_password"
	// FieldWhitelist holds the string denoting the whitelist field in the database.
	FieldWhitelist = "whitelist"
	// FieldDirectIPAccess holds the string denoting the direct_ip_access field in the database.
	FieldDirectIPAccess = "direct_ip_access"
	// EdgeTenant holds the string denoting the tenant edge name in mutations.
	EdgeTenant = "tenant"
	// Table holds the table name of the rustdesk in the database.
	Table = "rustdesks"
	// TenantTable is the table that holds the tenant relation/edge. The primary key declared below.
	TenantTable = "tenant_rustdesk"
	// TenantInverseTable is the table name for the Tenant entity.
	// It exists in this package in order to avoid circular dependency with the "tenant" package.
	TenantInverseTable = "tenants"
)

// Columns holds all SQL columns for rustdesk fields.
var Columns = []string{
	FieldID,
	FieldCustomRendezvousServer,
	FieldRelayServer,
	FieldAPIServer,
	FieldKey,
	FieldUsePermanentPassword,
	FieldWhitelist,
	FieldDirectIPAccess,
}

var (
	// TenantPrimaryKey and TenantColumn2 are the table columns denoting the
	// primary key for the tenant relation (M2M).
	TenantPrimaryKey = []string{"tenant_id", "rustdesk_id"}
)

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCustomRendezvousServer holds the default value on creation for the "custom_rendezvous_server" field.
	DefaultCustomRendezvousServer string
	// DefaultRelayServer holds the default value on creation for the "relay_server" field.
	DefaultRelayServer string
	// DefaultAPIServer holds the default value on creation for the "api_server" field.
	DefaultAPIServer string
	// DefaultKey holds the default value on creation for the "key" field.
	DefaultKey string
	// DefaultUsePermanentPassword holds the default value on creation for the "use_permanent_password" field.
	DefaultUsePermanentPassword bool
	// DefaultWhitelist holds the default value on creation for the "whitelist" field.
	DefaultWhitelist string
	// DefaultDirectIPAccess holds the default value on creation for the "direct_ip_access" field.
	DefaultDirectIPAccess bool
)

// OrderOption defines the ordering options for the Rustdesk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByCustomRendezvousServer orders the results by the custom_rendezvous_server field.
func ByCustomRendezvousServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCustomRendezvousServer, opts...).ToFunc()
}

// ByRelayServer orders the results by the relay_server field.
func ByRelayServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRelayServer, opts...).ToFunc()
}

// ByAPIServer orders the results by the api_server field.
func ByAPIServer(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAPIServer, opts...).ToFunc()
}

// ByKey orders the results by the key field.
func ByKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldKey, opts...).ToFunc()
}

// ByUsePermanentPassword orders the results by the use_permanent_password field.
func ByUsePermanentPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldUsePermanentPassword, opts...).ToFunc()
}

// ByWhitelist orders the results by the whitelist field.
func ByWhitelist(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhitelist, opts...).ToFunc()
}

// ByDirectIPAccess orders the results by the direct_ip_access field.
func ByDirectIPAccess(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDirectIPAccess, opts...).ToFunc()
}

// ByTenantCount orders the results by tenant count.
func ByTenantCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTenantStep(), opts...)
	}
}

// ByTenant orders the results by tenant terms.
func ByTenant(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTenantStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newTenantStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TenantInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2M, true, TenantTable, TenantPrimaryKey...),
	)
}
