// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/doncicuto/openuem_ent/predicate"
	"github.com/doncicuto/openuem_ent/release"
	"github.com/doncicuto/openuem_ent/server"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetHostname sets the "hostname" field.
func (su *ServerUpdate) SetHostname(s string) *ServerUpdate {
	su.mutation.SetHostname(s)
	return su
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (su *ServerUpdate) SetNillableHostname(s *string) *ServerUpdate {
	if s != nil {
		su.SetHostname(*s)
	}
	return su
}

// SetArch sets the "arch" field.
func (su *ServerUpdate) SetArch(s string) *ServerUpdate {
	su.mutation.SetArch(s)
	return su
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (su *ServerUpdate) SetNillableArch(s *string) *ServerUpdate {
	if s != nil {
		su.SetArch(*s)
	}
	return su
}

// SetOs sets the "os" field.
func (su *ServerUpdate) SetOs(s string) *ServerUpdate {
	su.mutation.SetOs(s)
	return su
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOs(s *string) *ServerUpdate {
	if s != nil {
		su.SetOs(*s)
	}
	return su
}

// SetComponent sets the "component" field.
func (su *ServerUpdate) SetComponent(s server.Component) *ServerUpdate {
	su.mutation.SetComponent(s)
	return su
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableComponent(s *server.Component) *ServerUpdate {
	if s != nil {
		su.SetComponent(*s)
	}
	return su
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (su *ServerUpdate) SetReleaseID(id int) *ServerUpdate {
	su.mutation.SetReleaseID(id)
	return su
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (su *ServerUpdate) SetNillableReleaseID(id *int) *ServerUpdate {
	if id != nil {
		su = su.SetReleaseID(*id)
	}
	return su
}

// SetRelease sets the "release" edge to the Release entity.
func (su *ServerUpdate) SetRelease(r *Release) *ServerUpdate {
	return su.SetReleaseID(r.ID)
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (su *ServerUpdate) ClearRelease() *ServerUpdate {
	su.mutation.ClearRelease()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServerUpdate) check() error {
	if v, ok := su.mutation.Component(); ok {
		if err := server.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`openuem_ent: validator failed for field "Server.component": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ServerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Hostname(); ok {
		_spec.SetField(server.FieldHostname, field.TypeString, value)
	}
	if value, ok := su.mutation.Arch(); ok {
		_spec.SetField(server.FieldArch, field.TypeString, value)
	}
	if value, ok := su.mutation.Os(); ok {
		_spec.SetField(server.FieldOs, field.TypeString, value)
	}
	if value, ok := su.mutation.Component(); ok {
		_spec.SetField(server.FieldComponent, field.TypeEnum, value)
	}
	if su.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.ReleaseTable,
			Columns: []string{server.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.ReleaseTable,
			Columns: []string{server.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetHostname sets the "hostname" field.
func (suo *ServerUpdateOne) SetHostname(s string) *ServerUpdateOne {
	suo.mutation.SetHostname(s)
	return suo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableHostname(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetHostname(*s)
	}
	return suo
}

// SetArch sets the "arch" field.
func (suo *ServerUpdateOne) SetArch(s string) *ServerUpdateOne {
	suo.mutation.SetArch(s)
	return suo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableArch(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetArch(*s)
	}
	return suo
}

// SetOs sets the "os" field.
func (suo *ServerUpdateOne) SetOs(s string) *ServerUpdateOne {
	suo.mutation.SetOs(s)
	return suo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOs(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetOs(*s)
	}
	return suo
}

// SetComponent sets the "component" field.
func (suo *ServerUpdateOne) SetComponent(s server.Component) *ServerUpdateOne {
	suo.mutation.SetComponent(s)
	return suo
}

// SetNillableComponent sets the "component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableComponent(s *server.Component) *ServerUpdateOne {
	if s != nil {
		suo.SetComponent(*s)
	}
	return suo
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (suo *ServerUpdateOne) SetReleaseID(id int) *ServerUpdateOne {
	suo.mutation.SetReleaseID(id)
	return suo
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableReleaseID(id *int) *ServerUpdateOne {
	if id != nil {
		suo = suo.SetReleaseID(*id)
	}
	return suo
}

// SetRelease sets the "release" edge to the Release entity.
func (suo *ServerUpdateOne) SetRelease(r *Release) *ServerUpdateOne {
	return suo.SetReleaseID(r.ID)
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// ClearRelease clears the "release" edge to the Release entity.
func (suo *ServerUpdateOne) ClearRelease() *ServerUpdateOne {
	suo.mutation.ClearRelease()
	return suo
}

// Where appends a list predicates to the ServerUpdate builder.
func (suo *ServerUpdateOne) Where(ps ...predicate.Server) *ServerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServerUpdateOne) check() error {
	if v, ok := suo.mutation.Component(); ok {
		if err := server.ComponentValidator(v); err != nil {
			return &ValidationError{Name: "component", err: fmt.Errorf(`openuem_ent: validator failed for field "Server.component": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ServerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`openuem_ent: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("openuem_ent: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Hostname(); ok {
		_spec.SetField(server.FieldHostname, field.TypeString, value)
	}
	if value, ok := suo.mutation.Arch(); ok {
		_spec.SetField(server.FieldArch, field.TypeString, value)
	}
	if value, ok := suo.mutation.Os(); ok {
		_spec.SetField(server.FieldOs, field.TypeString, value)
	}
	if value, ok := suo.mutation.Component(); ok {
		_spec.SetField(server.FieldComponent, field.TypeEnum, value)
	}
	if suo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.ReleaseTable,
			Columns: []string{server.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   server.ReleaseTable,
			Columns: []string{server.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
