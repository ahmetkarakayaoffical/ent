// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/server"
)

// ServerUpdate is the builder for updating Server entities.
type ServerUpdate struct {
	config
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ServerUpdate builder.
func (su *ServerUpdate) Where(ps ...predicate.Server) *ServerUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetHostname sets the "hostname" field.
func (su *ServerUpdate) SetHostname(s string) *ServerUpdate {
	su.mutation.SetHostname(s)
	return su
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (su *ServerUpdate) SetNillableHostname(s *string) *ServerUpdate {
	if s != nil {
		su.SetHostname(*s)
	}
	return su
}

// SetArch sets the "arch" field.
func (su *ServerUpdate) SetArch(s string) *ServerUpdate {
	su.mutation.SetArch(s)
	return su
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (su *ServerUpdate) SetNillableArch(s *string) *ServerUpdate {
	if s != nil {
		su.SetArch(*s)
	}
	return su
}

// SetOs sets the "os" field.
func (su *ServerUpdate) SetOs(s string) *ServerUpdate {
	su.mutation.SetOs(s)
	return su
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOs(s *string) *ServerUpdate {
	if s != nil {
		su.SetOs(*s)
	}
	return su
}

// SetVersion sets the "version" field.
func (su *ServerUpdate) SetVersion(s string) *ServerUpdate {
	su.mutation.SetVersion(s)
	return su
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (su *ServerUpdate) SetNillableVersion(s *string) *ServerUpdate {
	if s != nil {
		su.SetVersion(*s)
	}
	return su
}

// SetChannel sets the "channel" field.
func (su *ServerUpdate) SetChannel(s server.Channel) *ServerUpdate {
	su.mutation.SetChannel(s)
	return su
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (su *ServerUpdate) SetNillableChannel(s *server.Channel) *ServerUpdate {
	if s != nil {
		su.SetChannel(*s)
	}
	return su
}

// SetUpdateStatus sets the "update_status" field.
func (su *ServerUpdate) SetUpdateStatus(ss server.UpdateStatus) *ServerUpdate {
	su.mutation.SetUpdateStatus(ss)
	return su
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (su *ServerUpdate) SetNillableUpdateStatus(ss *server.UpdateStatus) *ServerUpdate {
	if ss != nil {
		su.SetUpdateStatus(*ss)
	}
	return su
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (su *ServerUpdate) ClearUpdateStatus() *ServerUpdate {
	su.mutation.ClearUpdateStatus()
	return su
}

// SetUpdateMessage sets the "update_message" field.
func (su *ServerUpdate) SetUpdateMessage(s string) *ServerUpdate {
	su.mutation.SetUpdateMessage(s)
	return su
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (su *ServerUpdate) SetNillableUpdateMessage(s *string) *ServerUpdate {
	if s != nil {
		su.SetUpdateMessage(*s)
	}
	return su
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (su *ServerUpdate) ClearUpdateMessage() *ServerUpdate {
	su.mutation.ClearUpdateMessage()
	return su
}

// SetUpdateWhen sets the "update_when" field.
func (su *ServerUpdate) SetUpdateWhen(t time.Time) *ServerUpdate {
	su.mutation.SetUpdateWhen(t)
	return su
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (su *ServerUpdate) SetNillableUpdateWhen(t *time.Time) *ServerUpdate {
	if t != nil {
		su.SetUpdateWhen(*t)
	}
	return su
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (su *ServerUpdate) ClearUpdateWhen() *ServerUpdate {
	su.mutation.ClearUpdateWhen()
	return su
}

// SetNatsComponent sets the "nats_component" field.
func (su *ServerUpdate) SetNatsComponent(b bool) *ServerUpdate {
	su.mutation.SetNatsComponent(b)
	return su
}

// SetNillableNatsComponent sets the "nats_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableNatsComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetNatsComponent(*b)
	}
	return su
}

// ClearNatsComponent clears the value of the "nats_component" field.
func (su *ServerUpdate) ClearNatsComponent() *ServerUpdate {
	su.mutation.ClearNatsComponent()
	return su
}

// SetOcspComponent sets the "ocsp_component" field.
func (su *ServerUpdate) SetOcspComponent(b bool) *ServerUpdate {
	su.mutation.SetOcspComponent(b)
	return su
}

// SetNillableOcspComponent sets the "ocsp_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableOcspComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetOcspComponent(*b)
	}
	return su
}

// ClearOcspComponent clears the value of the "ocsp_component" field.
func (su *ServerUpdate) ClearOcspComponent() *ServerUpdate {
	su.mutation.ClearOcspComponent()
	return su
}

// SetConsoleComponent sets the "console_component" field.
func (su *ServerUpdate) SetConsoleComponent(b bool) *ServerUpdate {
	su.mutation.SetConsoleComponent(b)
	return su
}

// SetNillableConsoleComponent sets the "console_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableConsoleComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetConsoleComponent(*b)
	}
	return su
}

// ClearConsoleComponent clears the value of the "console_component" field.
func (su *ServerUpdate) ClearConsoleComponent() *ServerUpdate {
	su.mutation.ClearConsoleComponent()
	return su
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (su *ServerUpdate) SetAgentWorkerComponent(b bool) *ServerUpdate {
	su.mutation.SetAgentWorkerComponent(b)
	return su
}

// SetNillableAgentWorkerComponent sets the "agent_worker_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableAgentWorkerComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetAgentWorkerComponent(*b)
	}
	return su
}

// ClearAgentWorkerComponent clears the value of the "agent_worker_component" field.
func (su *ServerUpdate) ClearAgentWorkerComponent() *ServerUpdate {
	su.mutation.ClearAgentWorkerComponent()
	return su
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (su *ServerUpdate) SetNotificationWorkerComponent(b bool) *ServerUpdate {
	su.mutation.SetNotificationWorkerComponent(b)
	return su
}

// SetNillableNotificationWorkerComponent sets the "notification_worker_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableNotificationWorkerComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetNotificationWorkerComponent(*b)
	}
	return su
}

// ClearNotificationWorkerComponent clears the value of the "notification_worker_component" field.
func (su *ServerUpdate) ClearNotificationWorkerComponent() *ServerUpdate {
	su.mutation.ClearNotificationWorkerComponent()
	return su
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (su *ServerUpdate) SetCertManagerWorkerComponent(b bool) *ServerUpdate {
	su.mutation.SetCertManagerWorkerComponent(b)
	return su
}

// SetNillableCertManagerWorkerComponent sets the "cert_manager_worker_component" field if the given value is not nil.
func (su *ServerUpdate) SetNillableCertManagerWorkerComponent(b *bool) *ServerUpdate {
	if b != nil {
		su.SetCertManagerWorkerComponent(*b)
	}
	return su
}

// ClearCertManagerWorkerComponent clears the value of the "cert_manager_worker_component" field.
func (su *ServerUpdate) ClearCertManagerWorkerComponent() *ServerUpdate {
	su.mutation.ClearCertManagerWorkerComponent()
	return su
}

// Mutation returns the ServerMutation object of the builder.
func (su *ServerUpdate) Mutation() *ServerMutation {
	return su.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *ServerUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *ServerUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *ServerUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *ServerUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *ServerUpdate) check() error {
	if v, ok := su.mutation.Channel(); ok {
		if err := server.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Server.channel": %w`, err)}
		}
	}
	if v, ok := su.mutation.UpdateStatus(); ok {
		if err := server.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`ent: validator failed for field "Server.update_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (su *ServerUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdate {
	su.modifiers = append(su.modifiers, modifiers...)
	return su
}

func (su *ServerUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Hostname(); ok {
		_spec.SetField(server.FieldHostname, field.TypeString, value)
	}
	if value, ok := su.mutation.Arch(); ok {
		_spec.SetField(server.FieldArch, field.TypeString, value)
	}
	if value, ok := su.mutation.Os(); ok {
		_spec.SetField(server.FieldOs, field.TypeString, value)
	}
	if value, ok := su.mutation.Version(); ok {
		_spec.SetField(server.FieldVersion, field.TypeString, value)
	}
	if value, ok := su.mutation.Channel(); ok {
		_spec.SetField(server.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := su.mutation.UpdateStatus(); ok {
		_spec.SetField(server.FieldUpdateStatus, field.TypeEnum, value)
	}
	if su.mutation.UpdateStatusCleared() {
		_spec.ClearField(server.FieldUpdateStatus, field.TypeEnum)
	}
	if value, ok := su.mutation.UpdateMessage(); ok {
		_spec.SetField(server.FieldUpdateMessage, field.TypeString, value)
	}
	if su.mutation.UpdateMessageCleared() {
		_spec.ClearField(server.FieldUpdateMessage, field.TypeString)
	}
	if value, ok := su.mutation.UpdateWhen(); ok {
		_spec.SetField(server.FieldUpdateWhen, field.TypeTime, value)
	}
	if su.mutation.UpdateWhenCleared() {
		_spec.ClearField(server.FieldUpdateWhen, field.TypeTime)
	}
	if value, ok := su.mutation.NatsComponent(); ok {
		_spec.SetField(server.FieldNatsComponent, field.TypeBool, value)
	}
	if su.mutation.NatsComponentCleared() {
		_spec.ClearField(server.FieldNatsComponent, field.TypeBool)
	}
	if value, ok := su.mutation.OcspComponent(); ok {
		_spec.SetField(server.FieldOcspComponent, field.TypeBool, value)
	}
	if su.mutation.OcspComponentCleared() {
		_spec.ClearField(server.FieldOcspComponent, field.TypeBool)
	}
	if value, ok := su.mutation.ConsoleComponent(); ok {
		_spec.SetField(server.FieldConsoleComponent, field.TypeBool, value)
	}
	if su.mutation.ConsoleComponentCleared() {
		_spec.ClearField(server.FieldConsoleComponent, field.TypeBool)
	}
	if value, ok := su.mutation.AgentWorkerComponent(); ok {
		_spec.SetField(server.FieldAgentWorkerComponent, field.TypeBool, value)
	}
	if su.mutation.AgentWorkerComponentCleared() {
		_spec.ClearField(server.FieldAgentWorkerComponent, field.TypeBool)
	}
	if value, ok := su.mutation.NotificationWorkerComponent(); ok {
		_spec.SetField(server.FieldNotificationWorkerComponent, field.TypeBool, value)
	}
	if su.mutation.NotificationWorkerComponentCleared() {
		_spec.ClearField(server.FieldNotificationWorkerComponent, field.TypeBool)
	}
	if value, ok := su.mutation.CertManagerWorkerComponent(); ok {
		_spec.SetField(server.FieldCertManagerWorkerComponent, field.TypeBool, value)
	}
	if su.mutation.CertManagerWorkerComponentCleared() {
		_spec.ClearField(server.FieldCertManagerWorkerComponent, field.TypeBool)
	}
	_spec.AddModifiers(su.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// ServerUpdateOne is the builder for updating a single Server entity.
type ServerUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ServerMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetHostname sets the "hostname" field.
func (suo *ServerUpdateOne) SetHostname(s string) *ServerUpdateOne {
	suo.mutation.SetHostname(s)
	return suo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableHostname(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetHostname(*s)
	}
	return suo
}

// SetArch sets the "arch" field.
func (suo *ServerUpdateOne) SetArch(s string) *ServerUpdateOne {
	suo.mutation.SetArch(s)
	return suo
}

// SetNillableArch sets the "arch" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableArch(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetArch(*s)
	}
	return suo
}

// SetOs sets the "os" field.
func (suo *ServerUpdateOne) SetOs(s string) *ServerUpdateOne {
	suo.mutation.SetOs(s)
	return suo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOs(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetOs(*s)
	}
	return suo
}

// SetVersion sets the "version" field.
func (suo *ServerUpdateOne) SetVersion(s string) *ServerUpdateOne {
	suo.mutation.SetVersion(s)
	return suo
}

// SetNillableVersion sets the "version" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableVersion(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetVersion(*s)
	}
	return suo
}

// SetChannel sets the "channel" field.
func (suo *ServerUpdateOne) SetChannel(s server.Channel) *ServerUpdateOne {
	suo.mutation.SetChannel(s)
	return suo
}

// SetNillableChannel sets the "channel" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableChannel(s *server.Channel) *ServerUpdateOne {
	if s != nil {
		suo.SetChannel(*s)
	}
	return suo
}

// SetUpdateStatus sets the "update_status" field.
func (suo *ServerUpdateOne) SetUpdateStatus(ss server.UpdateStatus) *ServerUpdateOne {
	suo.mutation.SetUpdateStatus(ss)
	return suo
}

// SetNillableUpdateStatus sets the "update_status" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableUpdateStatus(ss *server.UpdateStatus) *ServerUpdateOne {
	if ss != nil {
		suo.SetUpdateStatus(*ss)
	}
	return suo
}

// ClearUpdateStatus clears the value of the "update_status" field.
func (suo *ServerUpdateOne) ClearUpdateStatus() *ServerUpdateOne {
	suo.mutation.ClearUpdateStatus()
	return suo
}

// SetUpdateMessage sets the "update_message" field.
func (suo *ServerUpdateOne) SetUpdateMessage(s string) *ServerUpdateOne {
	suo.mutation.SetUpdateMessage(s)
	return suo
}

// SetNillableUpdateMessage sets the "update_message" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableUpdateMessage(s *string) *ServerUpdateOne {
	if s != nil {
		suo.SetUpdateMessage(*s)
	}
	return suo
}

// ClearUpdateMessage clears the value of the "update_message" field.
func (suo *ServerUpdateOne) ClearUpdateMessage() *ServerUpdateOne {
	suo.mutation.ClearUpdateMessage()
	return suo
}

// SetUpdateWhen sets the "update_when" field.
func (suo *ServerUpdateOne) SetUpdateWhen(t time.Time) *ServerUpdateOne {
	suo.mutation.SetUpdateWhen(t)
	return suo
}

// SetNillableUpdateWhen sets the "update_when" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableUpdateWhen(t *time.Time) *ServerUpdateOne {
	if t != nil {
		suo.SetUpdateWhen(*t)
	}
	return suo
}

// ClearUpdateWhen clears the value of the "update_when" field.
func (suo *ServerUpdateOne) ClearUpdateWhen() *ServerUpdateOne {
	suo.mutation.ClearUpdateWhen()
	return suo
}

// SetNatsComponent sets the "nats_component" field.
func (suo *ServerUpdateOne) SetNatsComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetNatsComponent(b)
	return suo
}

// SetNillableNatsComponent sets the "nats_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableNatsComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetNatsComponent(*b)
	}
	return suo
}

// ClearNatsComponent clears the value of the "nats_component" field.
func (suo *ServerUpdateOne) ClearNatsComponent() *ServerUpdateOne {
	suo.mutation.ClearNatsComponent()
	return suo
}

// SetOcspComponent sets the "ocsp_component" field.
func (suo *ServerUpdateOne) SetOcspComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetOcspComponent(b)
	return suo
}

// SetNillableOcspComponent sets the "ocsp_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableOcspComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetOcspComponent(*b)
	}
	return suo
}

// ClearOcspComponent clears the value of the "ocsp_component" field.
func (suo *ServerUpdateOne) ClearOcspComponent() *ServerUpdateOne {
	suo.mutation.ClearOcspComponent()
	return suo
}

// SetConsoleComponent sets the "console_component" field.
func (suo *ServerUpdateOne) SetConsoleComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetConsoleComponent(b)
	return suo
}

// SetNillableConsoleComponent sets the "console_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableConsoleComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetConsoleComponent(*b)
	}
	return suo
}

// ClearConsoleComponent clears the value of the "console_component" field.
func (suo *ServerUpdateOne) ClearConsoleComponent() *ServerUpdateOne {
	suo.mutation.ClearConsoleComponent()
	return suo
}

// SetAgentWorkerComponent sets the "agent_worker_component" field.
func (suo *ServerUpdateOne) SetAgentWorkerComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetAgentWorkerComponent(b)
	return suo
}

// SetNillableAgentWorkerComponent sets the "agent_worker_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableAgentWorkerComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetAgentWorkerComponent(*b)
	}
	return suo
}

// ClearAgentWorkerComponent clears the value of the "agent_worker_component" field.
func (suo *ServerUpdateOne) ClearAgentWorkerComponent() *ServerUpdateOne {
	suo.mutation.ClearAgentWorkerComponent()
	return suo
}

// SetNotificationWorkerComponent sets the "notification_worker_component" field.
func (suo *ServerUpdateOne) SetNotificationWorkerComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetNotificationWorkerComponent(b)
	return suo
}

// SetNillableNotificationWorkerComponent sets the "notification_worker_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableNotificationWorkerComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetNotificationWorkerComponent(*b)
	}
	return suo
}

// ClearNotificationWorkerComponent clears the value of the "notification_worker_component" field.
func (suo *ServerUpdateOne) ClearNotificationWorkerComponent() *ServerUpdateOne {
	suo.mutation.ClearNotificationWorkerComponent()
	return suo
}

// SetCertManagerWorkerComponent sets the "cert_manager_worker_component" field.
func (suo *ServerUpdateOne) SetCertManagerWorkerComponent(b bool) *ServerUpdateOne {
	suo.mutation.SetCertManagerWorkerComponent(b)
	return suo
}

// SetNillableCertManagerWorkerComponent sets the "cert_manager_worker_component" field if the given value is not nil.
func (suo *ServerUpdateOne) SetNillableCertManagerWorkerComponent(b *bool) *ServerUpdateOne {
	if b != nil {
		suo.SetCertManagerWorkerComponent(*b)
	}
	return suo
}

// ClearCertManagerWorkerComponent clears the value of the "cert_manager_worker_component" field.
func (suo *ServerUpdateOne) ClearCertManagerWorkerComponent() *ServerUpdateOne {
	suo.mutation.ClearCertManagerWorkerComponent()
	return suo
}

// Mutation returns the ServerMutation object of the builder.
func (suo *ServerUpdateOne) Mutation() *ServerMutation {
	return suo.mutation
}

// Where appends a list predicates to the ServerUpdate builder.
func (suo *ServerUpdateOne) Where(ps ...predicate.Server) *ServerUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *ServerUpdateOne) Select(field string, fields ...string) *ServerUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Server entity.
func (suo *ServerUpdateOne) Save(ctx context.Context) (*Server, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *ServerUpdateOne) SaveX(ctx context.Context) *Server {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *ServerUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *ServerUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *ServerUpdateOne) check() error {
	if v, ok := suo.mutation.Channel(); ok {
		if err := server.ChannelValidator(v); err != nil {
			return &ValidationError{Name: "channel", err: fmt.Errorf(`ent: validator failed for field "Server.channel": %w`, err)}
		}
	}
	if v, ok := suo.mutation.UpdateStatus(); ok {
		if err := server.UpdateStatusValidator(v); err != nil {
			return &ValidationError{Name: "update_status", err: fmt.Errorf(`ent: validator failed for field "Server.update_status": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (suo *ServerUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ServerUpdateOne {
	suo.modifiers = append(suo.modifiers, modifiers...)
	return suo
}

func (suo *ServerUpdateOne) sqlSave(ctx context.Context) (_node *Server, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(server.Table, server.Columns, sqlgraph.NewFieldSpec(server.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Server.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, server.FieldID)
		for _, f := range fields {
			if !server.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != server.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Hostname(); ok {
		_spec.SetField(server.FieldHostname, field.TypeString, value)
	}
	if value, ok := suo.mutation.Arch(); ok {
		_spec.SetField(server.FieldArch, field.TypeString, value)
	}
	if value, ok := suo.mutation.Os(); ok {
		_spec.SetField(server.FieldOs, field.TypeString, value)
	}
	if value, ok := suo.mutation.Version(); ok {
		_spec.SetField(server.FieldVersion, field.TypeString, value)
	}
	if value, ok := suo.mutation.Channel(); ok {
		_spec.SetField(server.FieldChannel, field.TypeEnum, value)
	}
	if value, ok := suo.mutation.UpdateStatus(); ok {
		_spec.SetField(server.FieldUpdateStatus, field.TypeEnum, value)
	}
	if suo.mutation.UpdateStatusCleared() {
		_spec.ClearField(server.FieldUpdateStatus, field.TypeEnum)
	}
	if value, ok := suo.mutation.UpdateMessage(); ok {
		_spec.SetField(server.FieldUpdateMessage, field.TypeString, value)
	}
	if suo.mutation.UpdateMessageCleared() {
		_spec.ClearField(server.FieldUpdateMessage, field.TypeString)
	}
	if value, ok := suo.mutation.UpdateWhen(); ok {
		_spec.SetField(server.FieldUpdateWhen, field.TypeTime, value)
	}
	if suo.mutation.UpdateWhenCleared() {
		_spec.ClearField(server.FieldUpdateWhen, field.TypeTime)
	}
	if value, ok := suo.mutation.NatsComponent(); ok {
		_spec.SetField(server.FieldNatsComponent, field.TypeBool, value)
	}
	if suo.mutation.NatsComponentCleared() {
		_spec.ClearField(server.FieldNatsComponent, field.TypeBool)
	}
	if value, ok := suo.mutation.OcspComponent(); ok {
		_spec.SetField(server.FieldOcspComponent, field.TypeBool, value)
	}
	if suo.mutation.OcspComponentCleared() {
		_spec.ClearField(server.FieldOcspComponent, field.TypeBool)
	}
	if value, ok := suo.mutation.ConsoleComponent(); ok {
		_spec.SetField(server.FieldConsoleComponent, field.TypeBool, value)
	}
	if suo.mutation.ConsoleComponentCleared() {
		_spec.ClearField(server.FieldConsoleComponent, field.TypeBool)
	}
	if value, ok := suo.mutation.AgentWorkerComponent(); ok {
		_spec.SetField(server.FieldAgentWorkerComponent, field.TypeBool, value)
	}
	if suo.mutation.AgentWorkerComponentCleared() {
		_spec.ClearField(server.FieldAgentWorkerComponent, field.TypeBool)
	}
	if value, ok := suo.mutation.NotificationWorkerComponent(); ok {
		_spec.SetField(server.FieldNotificationWorkerComponent, field.TypeBool, value)
	}
	if suo.mutation.NotificationWorkerComponentCleared() {
		_spec.ClearField(server.FieldNotificationWorkerComponent, field.TypeBool)
	}
	if value, ok := suo.mutation.CertManagerWorkerComponent(); ok {
		_spec.SetField(server.FieldCertManagerWorkerComponent, field.TypeBool, value)
	}
	if suo.mutation.CertManagerWorkerComponentCleared() {
		_spec.ClearField(server.FieldCertManagerWorkerComponent, field.TypeBool)
	}
	_spec.AddModifiers(suo.modifiers...)
	_node = &Server{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{server.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
