// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/softwarepackage"
)

// SoftwarePackageUpdate is the builder for updating SoftwarePackage entities.
type SoftwarePackageUpdate struct {
	config
	hooks     []Hook
	mutation  *SoftwarePackageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the SoftwarePackageUpdate builder.
func (spu *SoftwarePackageUpdate) Where(ps ...predicate.SoftwarePackage) *SoftwarePackageUpdate {
	spu.mutation.Where(ps...)
	return spu
}

// SetPackageID sets the "package_id" field.
func (spu *SoftwarePackageUpdate) SetPackageID(s string) *SoftwarePackageUpdate {
	spu.mutation.SetPackageID(s)
	return spu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (spu *SoftwarePackageUpdate) SetNillablePackageID(s *string) *SoftwarePackageUpdate {
	if s != nil {
		spu.SetPackageID(*s)
	}
	return spu
}

// SetName sets the "name" field.
func (spu *SoftwarePackageUpdate) SetName(s string) *SoftwarePackageUpdate {
	spu.mutation.SetName(s)
	return spu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spu *SoftwarePackageUpdate) SetNillableName(s *string) *SoftwarePackageUpdate {
	if s != nil {
		spu.SetName(*s)
	}
	return spu
}

// SetSource sets the "source" field.
func (spu *SoftwarePackageUpdate) SetSource(s softwarepackage.Source) *SoftwarePackageUpdate {
	spu.mutation.SetSource(s)
	return spu
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (spu *SoftwarePackageUpdate) SetNillableSource(s *softwarepackage.Source) *SoftwarePackageUpdate {
	if s != nil {
		spu.SetSource(*s)
	}
	return spu
}

// Mutation returns the SoftwarePackageMutation object of the builder.
func (spu *SoftwarePackageUpdate) Mutation() *SoftwarePackageMutation {
	return spu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (spu *SoftwarePackageUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, spu.sqlSave, spu.mutation, spu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spu *SoftwarePackageUpdate) SaveX(ctx context.Context) int {
	affected, err := spu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (spu *SoftwarePackageUpdate) Exec(ctx context.Context) error {
	_, err := spu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spu *SoftwarePackageUpdate) ExecX(ctx context.Context) {
	if err := spu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spu *SoftwarePackageUpdate) check() error {
	if v, ok := spu.mutation.PackageID(); ok {
		if err := softwarepackage.PackageIDValidator(v); err != nil {
			return &ValidationError{Name: "package_id", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.package_id": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Name(); ok {
		if err := softwarepackage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.name": %w`, err)}
		}
	}
	if v, ok := spu.mutation.Source(); ok {
		if err := softwarepackage.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spu *SoftwarePackageUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SoftwarePackageUpdate {
	spu.modifiers = append(spu.modifiers, modifiers...)
	return spu
}

func (spu *SoftwarePackageUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := spu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(softwarepackage.Table, softwarepackage.Columns, sqlgraph.NewFieldSpec(softwarepackage.FieldID, field.TypeInt))
	if ps := spu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spu.mutation.PackageID(); ok {
		_spec.SetField(softwarepackage.FieldPackageID, field.TypeString, value)
	}
	if value, ok := spu.mutation.Name(); ok {
		_spec.SetField(softwarepackage.FieldName, field.TypeString, value)
	}
	if value, ok := spu.mutation.Source(); ok {
		_spec.SetField(softwarepackage.FieldSource, field.TypeEnum, value)
	}
	_spec.AddModifiers(spu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, spu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{softwarepackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	spu.mutation.done = true
	return n, nil
}

// SoftwarePackageUpdateOne is the builder for updating a single SoftwarePackage entity.
type SoftwarePackageUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *SoftwarePackageMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPackageID sets the "package_id" field.
func (spuo *SoftwarePackageUpdateOne) SetPackageID(s string) *SoftwarePackageUpdateOne {
	spuo.mutation.SetPackageID(s)
	return spuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (spuo *SoftwarePackageUpdateOne) SetNillablePackageID(s *string) *SoftwarePackageUpdateOne {
	if s != nil {
		spuo.SetPackageID(*s)
	}
	return spuo
}

// SetName sets the "name" field.
func (spuo *SoftwarePackageUpdateOne) SetName(s string) *SoftwarePackageUpdateOne {
	spuo.mutation.SetName(s)
	return spuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (spuo *SoftwarePackageUpdateOne) SetNillableName(s *string) *SoftwarePackageUpdateOne {
	if s != nil {
		spuo.SetName(*s)
	}
	return spuo
}

// SetSource sets the "source" field.
func (spuo *SoftwarePackageUpdateOne) SetSource(s softwarepackage.Source) *SoftwarePackageUpdateOne {
	spuo.mutation.SetSource(s)
	return spuo
}

// SetNillableSource sets the "source" field if the given value is not nil.
func (spuo *SoftwarePackageUpdateOne) SetNillableSource(s *softwarepackage.Source) *SoftwarePackageUpdateOne {
	if s != nil {
		spuo.SetSource(*s)
	}
	return spuo
}

// Mutation returns the SoftwarePackageMutation object of the builder.
func (spuo *SoftwarePackageUpdateOne) Mutation() *SoftwarePackageMutation {
	return spuo.mutation
}

// Where appends a list predicates to the SoftwarePackageUpdate builder.
func (spuo *SoftwarePackageUpdateOne) Where(ps ...predicate.SoftwarePackage) *SoftwarePackageUpdateOne {
	spuo.mutation.Where(ps...)
	return spuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (spuo *SoftwarePackageUpdateOne) Select(field string, fields ...string) *SoftwarePackageUpdateOne {
	spuo.fields = append([]string{field}, fields...)
	return spuo
}

// Save executes the query and returns the updated SoftwarePackage entity.
func (spuo *SoftwarePackageUpdateOne) Save(ctx context.Context) (*SoftwarePackage, error) {
	return withHooks(ctx, spuo.sqlSave, spuo.mutation, spuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (spuo *SoftwarePackageUpdateOne) SaveX(ctx context.Context) *SoftwarePackage {
	node, err := spuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (spuo *SoftwarePackageUpdateOne) Exec(ctx context.Context) error {
	_, err := spuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spuo *SoftwarePackageUpdateOne) ExecX(ctx context.Context) {
	if err := spuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spuo *SoftwarePackageUpdateOne) check() error {
	if v, ok := spuo.mutation.PackageID(); ok {
		if err := softwarepackage.PackageIDValidator(v); err != nil {
			return &ValidationError{Name: "package_id", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.package_id": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Name(); ok {
		if err := softwarepackage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.name": %w`, err)}
		}
	}
	if v, ok := spuo.mutation.Source(); ok {
		if err := softwarepackage.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.source": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (spuo *SoftwarePackageUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *SoftwarePackageUpdateOne {
	spuo.modifiers = append(spuo.modifiers, modifiers...)
	return spuo
}

func (spuo *SoftwarePackageUpdateOne) sqlSave(ctx context.Context) (_node *SoftwarePackage, err error) {
	if err := spuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(softwarepackage.Table, softwarepackage.Columns, sqlgraph.NewFieldSpec(softwarepackage.FieldID, field.TypeInt))
	id, ok := spuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "SoftwarePackage.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := spuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, softwarepackage.FieldID)
		for _, f := range fields {
			if !softwarepackage.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != softwarepackage.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := spuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := spuo.mutation.PackageID(); ok {
		_spec.SetField(softwarepackage.FieldPackageID, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Name(); ok {
		_spec.SetField(softwarepackage.FieldName, field.TypeString, value)
	}
	if value, ok := spuo.mutation.Source(); ok {
		_spec.SetField(softwarepackage.FieldSource, field.TypeEnum, value)
	}
	_spec.AddModifiers(spuo.modifiers...)
	_node = &SoftwarePackage{config: spuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, spuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{softwarepackage.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	spuo.mutation.done = true
	return _node, nil
}
