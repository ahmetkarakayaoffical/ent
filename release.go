// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/release"
)

// Release is the model entity for the Release schema.
type Release struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// Channel holds the value of the "channel" field.
	Channel string `json:"channel,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// ReleaseNotes holds the value of the "release_notes" field.
	ReleaseNotes string `json:"release_notes,omitempty"`
	// FileURL holds the value of the "file_url" field.
	FileURL string `json:"file_url,omitempty"`
	// Checksum holds the value of the "checksum" field.
	Checksum string `json:"checksum,omitempty"`
	// IsCritical holds the value of the "is_critical" field.
	IsCritical string `json:"is_critical,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ReleaseQuery when eager-loading is set.
	Edges        ReleaseEdges `json:"edges"`
	selectValues sql.SelectValues
}

// ReleaseEdges holds the relations/edges for other nodes in the graph.
type ReleaseEdges struct {
	// Owner holds the value of the owner edge.
	Owner []*Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading.
func (e ReleaseEdges) OwnerOrErr() ([]*Agent, error) {
	if e.loadedTypes[0] {
		return e.Owner, nil
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Release) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			values[i] = new(sql.NullInt64)
		case release.FieldVersion, release.FieldChannel, release.FieldSummary, release.FieldReleaseNotes, release.FieldFileURL, release.FieldChecksum, release.FieldIsCritical:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Release fields.
func (r *Release) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case release.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case release.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				r.Version = value.String
			}
		case release.FieldChannel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field channel", values[i])
			} else if value.Valid {
				r.Channel = value.String
			}
		case release.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				r.Summary = value.String
			}
		case release.FieldReleaseNotes:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field release_notes", values[i])
			} else if value.Valid {
				r.ReleaseNotes = value.String
			}
		case release.FieldFileURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field file_url", values[i])
			} else if value.Valid {
				r.FileURL = value.String
			}
		case release.FieldChecksum:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field checksum", values[i])
			} else if value.Valid {
				r.Checksum = value.String
			}
		case release.FieldIsCritical:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field is_critical", values[i])
			} else if value.Valid {
				r.IsCritical = value.String
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Release.
// This includes values selected through modifiers, order, etc.
func (r *Release) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the Release entity.
func (r *Release) QueryOwner() *AgentQuery {
	return NewReleaseClient(r.config).QueryOwner(r)
}

// Update returns a builder for updating this Release.
// Note that you need to call Release.Unwrap() before calling this method if this Release
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Release) Update() *ReleaseUpdateOne {
	return NewReleaseClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Release entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Release) Unwrap() *Release {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: Release is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Release) String() string {
	var builder strings.Builder
	builder.WriteString("Release(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("version=")
	builder.WriteString(r.Version)
	builder.WriteString(", ")
	builder.WriteString("channel=")
	builder.WriteString(r.Channel)
	builder.WriteString(", ")
	builder.WriteString("summary=")
	builder.WriteString(r.Summary)
	builder.WriteString(", ")
	builder.WriteString("release_notes=")
	builder.WriteString(r.ReleaseNotes)
	builder.WriteString(", ")
	builder.WriteString("file_url=")
	builder.WriteString(r.FileURL)
	builder.WriteString(", ")
	builder.WriteString("checksum=")
	builder.WriteString(r.Checksum)
	builder.WriteString(", ")
	builder.WriteString("is_critical=")
	builder.WriteString(r.IsCritical)
	builder.WriteByte(')')
	return builder.String()
}

// Releases is a parsable slice of Release.
type Releases []*Release
