package schema

import (
	"entgo.io/ent"
	"entgo.io/ent/schema/edge"
	"entgo.io/ent/schema/field"
)

// Task holds the schema definition for the Task entity.
type Task struct {
	ent.Schema
}

// Fields of the Task.
func (Task) Fields() []ent.Field {
	return []ent.Field{
		field.String("name").NotEmpty(),
		field.Enum("type").Values(
			"winget_install",
			"winget_update",
			"winget_delete",
			"add_registry_key",
			"update_registry_key_default_value",
			"add_registry_key_value",
			"remove_registry_key",
			"remove_registry_key_value",
			"add_local_user",
			"remove_local_user",
			"add_unix_local_user",
			"modify_unix_local_user",
			"remove_unix_local_user",
			"add_macos_local_user",
			"remove_macos_local_user",
			"add_local_group",
			"remove_local_group",
			"add_unix_local_group",
			"remove_unix_local_group",
			"add_users_to_local_group",
			"remove_users_from_local_group",
			"msi_install",
			"msi_uninstall",
			"powershell_script",
			"unix_script",
			"flatpak_install",
			"flatpak_uninstall",
			"brew_formula_install",
			"brew_formula_upgrade",
			"brew_formula_uninstall",
			"brew_cask_install",
			"brew_cask_upgrade",
			"brew_cask_uninstall"),
		field.String("package_id").Optional().Default(""),
		field.String("package_name").Optional().Default(""),
		field.Bool("package_latest").Optional().Default(false),
		field.String("registry_key").Optional().Default(""),
		field.String("registry_key_value_name").Optional().Default(""),
		field.Enum("registry_key_value_type").Values("String", "Binary", "DWord", "QWord", "MultiString", "ExpandString").Optional(),
		field.String("registry_key_value_data").Optional().Default(""),
		field.Bool("registry_hex").Optional().Default(false),
		field.Bool("registry_force").Optional().Default(false),
		field.String("local_user_username").Optional().Default(""),
		field.String("local_user_description").Optional().Default(""),
		field.Bool("local_user_disable").Optional().Default(false),
		field.String("local_user_fullname").Optional().Default(""),
		field.String("local_user_password").Optional().Default(""),
		field.Bool("local_user_password_change_not_allowed").Optional().Default(false),
		field.Bool("local_user_password_change_required").Optional().Default(false),
		field.Bool("local_user_password_never_expires").Optional().Default(false),
		field.Bool("local_user_append").Optional().Default(false),
		field.Bool("local_user_create_home").Optional().Default(true),
		field.String("local_user_expires").Optional(),
		field.Bool("local_user_force").Optional().Default(false),
		field.Bool("local_user_generate_ssh_key").Optional().Default(false),
		field.String("local_user_group").Optional(),
		field.String("local_user_groups").Optional(),
		field.String("local_user_home").Optional(),
		field.Bool("local_user_move_home").Optional().Default(false),
		field.Bool("local_user_nonunique").Optional().Default(false),
		field.String("local_user_password_expire_account_disable").Optional(),
		field.String("local_user_password_expire_max").Optional(),
		field.String("local_user_password_expire_min").Optional(),
		field.String("local_user_password_expire_warn").Optional(),
		field.Bool("local_user_password_lock").Optional().Default(false),
		field.String("local_user_seuser").Optional(),
		field.String("local_user_shell").Optional(),
		field.String("local_user_skeleton").Optional(),
		field.Bool("local_user_system").Optional().Default(false),
		field.String("local_user_id").Optional(),
		field.String("local_user_id_max").Optional(),
		field.String("local_user_id_min").Optional(),
		field.String("local_user_ssh_key_bits").Optional(),
		field.String("local_user_ssh_key_comment").Optional(),
		field.String("local_user_ssh_key_file").Optional(),
		field.String("local_user_ssh_key_passphrase").Optional(),
		field.String("local_user_ssh_key_type").Optional().Default("rsa"),
		field.String("local_user_umask").Optional(),
		field.String("local_group_id").Optional().Default(""),
		field.String("local_group_name").Optional().Default(""),
		field.String("local_group_description").Optional().Default(""),
		field.Bool("local_group_system").Optional().Default(false),
		field.Bool("local_group_force").Optional().Default(false),
		field.String("local_group_members").Optional().Default(""),
		field.String("local_group_members_to_include").Optional().Default(""),
		field.String("local_group_members_to_exclude").Optional().Default(""),
		field.String("msi_productid").Optional().Default(""),
		field.String("msi_path").Optional().Default(""),
		field.String("msi_arguments").Optional().Default(""),
		field.String("msi_file_hash").Optional().Default(""),
		field.Enum("msi_file_hash_alg").Values("MD5", "RIPEMD160", "SHA1", "SHA256", "SHA384", "SHA512").Optional(),
		field.String("msi_log_path").Optional().Default(""),
		field.String("script").Optional().Default(""),
		field.String("script_executable").Optional().Default(""),
		field.String("script_creates").Optional().Default(""),
		field.Enum("script_run").Values("once", "always").Optional(),
		field.Enum("agent_type").Values("windows", "linux", "macos").Optional().Default("windows"),
		field.Time("when").Optional(),
		field.Bool("brew_update").Optional(),
		field.Bool("brew_upgrade_all").Optional(),
		field.String("brew_upgrade_options").Optional(),
		field.String("brew_install_options").Optional(),
		field.Bool("brew_greedy").Optional(),
		field.String("package_version").Optional().Default(""),
		field.Bool("apt_allow_downgrade").Optional().Default(false),
		field.String("apt_deb").Optional().Default(""),
		field.String("apt_dpkg_options").Optional(),
		field.Bool("apt_fail_on_autoremove").Optional().Default(false),
		field.Bool("apt_force").Optional().Default(false),
		field.Bool("apt_install_recommends").Optional(),
		field.String("apt_name").Optional().Default(""),
		field.Bool("apt_only_upgrade").Optional().Default(false),
		field.Bool("apt_purge").Optional().Default(false),
		field.Bool("apt_update_cache").Optional().Default(false),
		field.Enum("apt_upgrade_type").Values("dist", "full", "no", "safe", "yes").Optional().Default("no"),
	}
}

// Edges of the Task.
func (Task) Edges() []ent.Edge {
	return []ent.Edge{
		edge.To("tags", Tag.Type),
		edge.From("profile", Profile.Type).Unique().Ref("tasks"),
	}
}
