// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/rustdesk"
	"github.com/open-uem/ent/tenant"
)

// RustDesk is the model entity for the RustDesk schema.
type RustDesk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomRendezvousServer holds the value of the "custom_rendezvous_server" field.
	CustomRendezvousServer string `json:"custom_rendezvous_server,omitempty"`
	// RelayServer holds the value of the "relay_server" field.
	RelayServer string `json:"relay_server,omitempty"`
	// APIServer holds the value of the "api_server" field.
	APIServer string `json:"api_server,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// UsePermanentPassword holds the value of the "use_permanent_password" field.
	UsePermanentPassword bool `json:"use_permanent_password,omitempty"`
	// Whitelist holds the value of the "whitelist" field.
	Whitelist string `json:"whitelist,omitempty"`
	// DirectIPAccess holds the value of the "direct_ip_access" field.
	DirectIPAccess bool `json:"direct_ip_access,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RustDeskQuery when eager-loading is set.
	Edges           RustDeskEdges `json:"edges"`
	tenant_rustdesk *int
	selectValues    sql.SelectValues
}

// RustDeskEdges holds the relations/edges for other nodes in the graph.
type RustDeskEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant *Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e RustDeskEdges) TenantOrErr() (*Tenant, error) {
	if e.Tenant != nil {
		return e.Tenant, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: tenant.Label}
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*RustDesk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rustdesk.FieldUsePermanentPassword, rustdesk.FieldDirectIPAccess:
			values[i] = new(sql.NullBool)
		case rustdesk.FieldID:
			values[i] = new(sql.NullInt64)
		case rustdesk.FieldCustomRendezvousServer, rustdesk.FieldRelayServer, rustdesk.FieldAPIServer, rustdesk.FieldKey, rustdesk.FieldWhitelist:
			values[i] = new(sql.NullString)
		case rustdesk.ForeignKeys[0]: // tenant_rustdesk
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the RustDesk fields.
func (rd *RustDesk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rustdesk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			rd.ID = int(value.Int64)
		case rustdesk.FieldCustomRendezvousServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_rendezvous_server", values[i])
			} else if value.Valid {
				rd.CustomRendezvousServer = value.String
			}
		case rustdesk.FieldRelayServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relay_server", values[i])
			} else if value.Valid {
				rd.RelayServer = value.String
			}
		case rustdesk.FieldAPIServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_server", values[i])
			} else if value.Valid {
				rd.APIServer = value.String
			}
		case rustdesk.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				rd.Key = value.String
			}
		case rustdesk.FieldUsePermanentPassword:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_permanent_password", values[i])
			} else if value.Valid {
				rd.UsePermanentPassword = value.Bool
			}
		case rustdesk.FieldWhitelist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whitelist", values[i])
			} else if value.Valid {
				rd.Whitelist = value.String
			}
		case rustdesk.FieldDirectIPAccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field direct_ip_access", values[i])
			} else if value.Valid {
				rd.DirectIPAccess = value.Bool
			}
		case rustdesk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field tenant_rustdesk", value)
			} else if value.Valid {
				rd.tenant_rustdesk = new(int)
				*rd.tenant_rustdesk = int(value.Int64)
			}
		default:
			rd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the RustDesk.
// This includes values selected through modifiers, order, etc.
func (rd *RustDesk) Value(name string) (ent.Value, error) {
	return rd.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the RustDesk entity.
func (rd *RustDesk) QueryTenant() *TenantQuery {
	return NewRustDeskClient(rd.config).QueryTenant(rd)
}

// Update returns a builder for updating this RustDesk.
// Note that you need to call RustDesk.Unwrap() before calling this method if this RustDesk
// was returned from a transaction, and the transaction was committed or rolled back.
func (rd *RustDesk) Update() *RustDeskUpdateOne {
	return NewRustDeskClient(rd.config).UpdateOne(rd)
}

// Unwrap unwraps the RustDesk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (rd *RustDesk) Unwrap() *RustDesk {
	_tx, ok := rd.config.driver.(*txDriver)
	if !ok {
		panic("ent: RustDesk is not a transactional entity")
	}
	rd.config.driver = _tx.drv
	return rd
}

// String implements the fmt.Stringer.
func (rd *RustDesk) String() string {
	var builder strings.Builder
	builder.WriteString("RustDesk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", rd.ID))
	builder.WriteString("custom_rendezvous_server=")
	builder.WriteString(rd.CustomRendezvousServer)
	builder.WriteString(", ")
	builder.WriteString("relay_server=")
	builder.WriteString(rd.RelayServer)
	builder.WriteString(", ")
	builder.WriteString("api_server=")
	builder.WriteString(rd.APIServer)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(rd.Key)
	builder.WriteString(", ")
	builder.WriteString("use_permanent_password=")
	builder.WriteString(fmt.Sprintf("%v", rd.UsePermanentPassword))
	builder.WriteString(", ")
	builder.WriteString("whitelist=")
	builder.WriteString(rd.Whitelist)
	builder.WriteString(", ")
	builder.WriteString("direct_ip_access=")
	builder.WriteString(fmt.Sprintf("%v", rd.DirectIPAccess))
	builder.WriteByte(')')
	return builder.String()
}

// RustDesks is a parsable slice of RustDesk.
type RustDesks []*RustDesk
