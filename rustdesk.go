// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/ahmetkarakayaoffical/ent/rustdesk"
)

// Rustdesk is the model entity for the Rustdesk schema.
type Rustdesk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// CustomRendezvousServer holds the value of the "custom_rendezvous_server" field.
	CustomRendezvousServer string `json:"custom_rendezvous_server,omitempty"`
	// RelayServer holds the value of the "relay_server" field.
	RelayServer string `json:"relay_server,omitempty"`
	// APIServer holds the value of the "api_server" field.
	APIServer string `json:"api_server,omitempty"`
	// Key holds the value of the "key" field.
	Key string `json:"key,omitempty"`
	// UsePermanentPassword holds the value of the "use_permanent_password" field.
	UsePermanentPassword bool `json:"use_permanent_password,omitempty"`
	// Whitelist holds the value of the "whitelist" field.
	Whitelist string `json:"whitelist,omitempty"`
	// DirectIPAccess holds the value of the "direct_ip_access" field.
	DirectIPAccess bool `json:"direct_ip_access,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the RustdeskQuery when eager-loading is set.
	Edges        RustdeskEdges `json:"edges"`
	selectValues sql.SelectValues
}

// RustdeskEdges holds the relations/edges for other nodes in the graph.
type RustdeskEdges struct {
	// Tenant holds the value of the tenant edge.
	Tenant []*Tenant `json:"tenant,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// TenantOrErr returns the Tenant value or an error if the edge
// was not loaded in eager-loading.
func (e RustdeskEdges) TenantOrErr() ([]*Tenant, error) {
	if e.loadedTypes[0] {
		return e.Tenant, nil
	}
	return nil, &NotLoadedError{edge: "tenant"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Rustdesk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case rustdesk.FieldUsePermanentPassword, rustdesk.FieldDirectIPAccess:
			values[i] = new(sql.NullBool)
		case rustdesk.FieldID:
			values[i] = new(sql.NullInt64)
		case rustdesk.FieldCustomRendezvousServer, rustdesk.FieldRelayServer, rustdesk.FieldAPIServer, rustdesk.FieldKey, rustdesk.FieldWhitelist:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Rustdesk fields.
func (r *Rustdesk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case rustdesk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			r.ID = int(value.Int64)
		case rustdesk.FieldCustomRendezvousServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field custom_rendezvous_server", values[i])
			} else if value.Valid {
				r.CustomRendezvousServer = value.String
			}
		case rustdesk.FieldRelayServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field relay_server", values[i])
			} else if value.Valid {
				r.RelayServer = value.String
			}
		case rustdesk.FieldAPIServer:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field api_server", values[i])
			} else if value.Valid {
				r.APIServer = value.String
			}
		case rustdesk.FieldKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field key", values[i])
			} else if value.Valid {
				r.Key = value.String
			}
		case rustdesk.FieldUsePermanentPassword:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_permanent_password", values[i])
			} else if value.Valid {
				r.UsePermanentPassword = value.Bool
			}
		case rustdesk.FieldWhitelist:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field whitelist", values[i])
			} else if value.Valid {
				r.Whitelist = value.String
			}
		case rustdesk.FieldDirectIPAccess:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field direct_ip_access", values[i])
			} else if value.Valid {
				r.DirectIPAccess = value.Bool
			}
		default:
			r.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Rustdesk.
// This includes values selected through modifiers, order, etc.
func (r *Rustdesk) Value(name string) (ent.Value, error) {
	return r.selectValues.Get(name)
}

// QueryTenant queries the "tenant" edge of the Rustdesk entity.
func (r *Rustdesk) QueryTenant() *TenantQuery {
	return NewRustdeskClient(r.config).QueryTenant(r)
}

// Update returns a builder for updating this Rustdesk.
// Note that you need to call Rustdesk.Unwrap() before calling this method if this Rustdesk
// was returned from a transaction, and the transaction was committed or rolled back.
func (r *Rustdesk) Update() *RustdeskUpdateOne {
	return NewRustdeskClient(r.config).UpdateOne(r)
}

// Unwrap unwraps the Rustdesk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (r *Rustdesk) Unwrap() *Rustdesk {
	_tx, ok := r.config.driver.(*txDriver)
	if !ok {
		panic("ent: Rustdesk is not a transactional entity")
	}
	r.config.driver = _tx.drv
	return r
}

// String implements the fmt.Stringer.
func (r *Rustdesk) String() string {
	var builder strings.Builder
	builder.WriteString("Rustdesk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", r.ID))
	builder.WriteString("custom_rendezvous_server=")
	builder.WriteString(r.CustomRendezvousServer)
	builder.WriteString(", ")
	builder.WriteString("relay_server=")
	builder.WriteString(r.RelayServer)
	builder.WriteString(", ")
	builder.WriteString("api_server=")
	builder.WriteString(r.APIServer)
	builder.WriteString(", ")
	builder.WriteString("key=")
	builder.WriteString(r.Key)
	builder.WriteString(", ")
	builder.WriteString("use_permanent_password=")
	builder.WriteString(fmt.Sprintf("%v", r.UsePermanentPassword))
	builder.WriteString(", ")
	builder.WriteString("whitelist=")
	builder.WriteString(r.Whitelist)
	builder.WriteString(", ")
	builder.WriteString("direct_ip_access=")
	builder.WriteString(fmt.Sprintf("%v", r.DirectIPAccess))
	builder.WriteByte(')')
	return builder.String()
}

// Rustdesks is a parsable slice of Rustdesk.
type Rustdesks []*Rustdesk
