// Code generated by ent, DO NOT EDIT.

package tenant

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the tenant type in the database.
	Label = "tenant"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDescription holds the string denoting the description field in the database.
	FieldDescription = "description"
	// FieldIsDefault holds the string denoting the is_default field in the database.
	FieldIsDefault = "is_default"
	// FieldCreated holds the string denoting the created field in the database.
	FieldCreated = "created"
	// FieldModified holds the string denoting the modified field in the database.
	FieldModified = "modified"
	// EdgeSites holds the string denoting the sites edge name in mutations.
	EdgeSites = "sites"
	// EdgeSettings holds the string denoting the settings edge name in mutations.
	EdgeSettings = "settings"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeMetadata holds the string denoting the metadata edge name in mutations.
	EdgeMetadata = "metadata"
	// EdgeRustdesk holds the string denoting the rustdesk edge name in mutations.
	EdgeRustdesk = "rustdesk"
	// Table holds the table name of the tenant in the database.
	Table = "tenants"
	// SitesTable is the table that holds the sites relation/edge.
	SitesTable = "sites"
	// SitesInverseTable is the table name for the Site entity.
	// It exists in this package in order to avoid circular dependency with the "site" package.
	SitesInverseTable = "sites"
	// SitesColumn is the table column denoting the sites relation/edge.
	SitesColumn = "tenant_sites"
	// SettingsTable is the table that holds the settings relation/edge.
	SettingsTable = "settings"
	// SettingsInverseTable is the table name for the Settings entity.
	// It exists in this package in order to avoid circular dependency with the "settings" package.
	SettingsInverseTable = "settings"
	// SettingsColumn is the table column denoting the settings relation/edge.
	SettingsColumn = "tenant_settings"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "tenant_tags"
	// MetadataTable is the table that holds the metadata relation/edge.
	MetadataTable = "org_metadata"
	// MetadataInverseTable is the table name for the OrgMetadata entity.
	// It exists in this package in order to avoid circular dependency with the "orgmetadata" package.
	MetadataInverseTable = "org_metadata"
	// MetadataColumn is the table column denoting the metadata relation/edge.
	MetadataColumn = "tenant_metadata"
	// RustdeskTable is the table that holds the rustdesk relation/edge.
	RustdeskTable = "rustdesks"
	// RustdeskInverseTable is the table name for the Rustdesk entity.
	// It exists in this package in order to avoid circular dependency with the "rustdesk" package.
	RustdeskInverseTable = "rustdesks"
	// RustdeskColumn is the table column denoting the rustdesk relation/edge.
	RustdeskColumn = "tenant_rustdesk"
)

// Columns holds all SQL columns for tenant fields.
var Columns = []string{
	FieldID,
	FieldDescription,
	FieldIsDefault,
	FieldCreated,
	FieldModified,
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	return false
}

var (
	// DefaultCreated holds the default value on creation for the "created" field.
	DefaultCreated func() time.Time
	// DefaultModified holds the default value on creation for the "modified" field.
	DefaultModified func() time.Time
	// UpdateDefaultModified holds the default value on update for the "modified" field.
	UpdateDefaultModified func() time.Time
)

// OrderOption defines the ordering options for the Tenant queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDescription orders the results by the description field.
func ByDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDescription, opts...).ToFunc()
}

// ByIsDefault orders the results by the is_default field.
func ByIsDefault(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldIsDefault, opts...).ToFunc()
}

// ByCreated orders the results by the created field.
func ByCreated(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldCreated, opts...).ToFunc()
}

// ByModified orders the results by the modified field.
func ByModified(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModified, opts...).ToFunc()
}

// BySitesCount orders the results by sites count.
func BySitesCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newSitesStep(), opts...)
	}
}

// BySites orders the results by sites terms.
func BySites(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSitesStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// BySettingsField orders the results by settings field.
func BySettingsField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newSettingsStep(), sql.OrderByField(field, opts...))
	}
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByMetadataCount orders the results by metadata count.
func ByMetadataCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newMetadataStep(), opts...)
	}
}

// ByMetadata orders the results by metadata terms.
func ByMetadata(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newMetadataStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByRustdeskCount orders the results by rustdesk count.
func ByRustdeskCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newRustdeskStep(), opts...)
	}
}

// ByRustdesk orders the results by rustdesk terms.
func ByRustdesk(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newRustdeskStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}
func newSitesStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SitesInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, SitesTable, SitesColumn),
	)
}
func newSettingsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(SettingsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2O, false, SettingsTable, SettingsColumn),
	)
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
	)
}
func newMetadataStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(MetadataInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, MetadataTable, MetadataColumn),
	)
}
func newRustdeskStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(RustdeskInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, RustdeskTable, RustdeskColumn),
	)
}
