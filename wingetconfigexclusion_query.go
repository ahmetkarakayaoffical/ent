// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"math"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/wingetconfigexclusion"
)

// WingetConfigExclusionQuery is the builder for querying WingetConfigExclusion entities.
type WingetConfigExclusionQuery struct {
	config
	ctx        *QueryContext
	order      []wingetconfigexclusion.OrderOption
	inters     []Interceptor
	predicates []predicate.WingetConfigExclusion
	withOwner  *AgentQuery
	withFKs    bool
	modifiers  []func(*sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the WingetConfigExclusionQuery builder.
func (wceq *WingetConfigExclusionQuery) Where(ps ...predicate.WingetConfigExclusion) *WingetConfigExclusionQuery {
	wceq.predicates = append(wceq.predicates, ps...)
	return wceq
}

// Limit the number of records to be returned by this query.
func (wceq *WingetConfigExclusionQuery) Limit(limit int) *WingetConfigExclusionQuery {
	wceq.ctx.Limit = &limit
	return wceq
}

// Offset to start from.
func (wceq *WingetConfigExclusionQuery) Offset(offset int) *WingetConfigExclusionQuery {
	wceq.ctx.Offset = &offset
	return wceq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (wceq *WingetConfigExclusionQuery) Unique(unique bool) *WingetConfigExclusionQuery {
	wceq.ctx.Unique = &unique
	return wceq
}

// Order specifies how the records should be ordered.
func (wceq *WingetConfigExclusionQuery) Order(o ...wingetconfigexclusion.OrderOption) *WingetConfigExclusionQuery {
	wceq.order = append(wceq.order, o...)
	return wceq
}

// QueryOwner chains the current query on the "owner" edge.
func (wceq *WingetConfigExclusionQuery) QueryOwner() *AgentQuery {
	query := (&AgentClient{config: wceq.config}).Query()
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := wceq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := wceq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(wingetconfigexclusion.Table, wingetconfigexclusion.FieldID, selector),
			sqlgraph.To(agent.Table, agent.FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, wingetconfigexclusion.OwnerTable, wingetconfigexclusion.OwnerColumn),
		)
		fromU = sqlgraph.SetNeighbors(wceq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first WingetConfigExclusion entity from the query.
// Returns a *NotFoundError when no WingetConfigExclusion was found.
func (wceq *WingetConfigExclusionQuery) First(ctx context.Context) (*WingetConfigExclusion, error) {
	nodes, err := wceq.Limit(1).All(setContextOp(ctx, wceq.ctx, ent.OpQueryFirst))
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{wingetconfigexclusion.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) FirstX(ctx context.Context) *WingetConfigExclusion {
	node, err := wceq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first WingetConfigExclusion ID from the query.
// Returns a *NotFoundError when no WingetConfigExclusion ID was found.
func (wceq *WingetConfigExclusionQuery) FirstID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wceq.Limit(1).IDs(setContextOp(ctx, wceq.ctx, ent.OpQueryFirstID)); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{wingetconfigexclusion.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) FirstIDX(ctx context.Context) int {
	id, err := wceq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single WingetConfigExclusion entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one WingetConfigExclusion entity is found.
// Returns a *NotFoundError when no WingetConfigExclusion entities are found.
func (wceq *WingetConfigExclusionQuery) Only(ctx context.Context) (*WingetConfigExclusion, error) {
	nodes, err := wceq.Limit(2).All(setContextOp(ctx, wceq.ctx, ent.OpQueryOnly))
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{wingetconfigexclusion.Label}
	default:
		return nil, &NotSingularError{wingetconfigexclusion.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) OnlyX(ctx context.Context) *WingetConfigExclusion {
	node, err := wceq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only WingetConfigExclusion ID in the query.
// Returns a *NotSingularError when more than one WingetConfigExclusion ID is found.
// Returns a *NotFoundError when no entities are found.
func (wceq *WingetConfigExclusionQuery) OnlyID(ctx context.Context) (id int, err error) {
	var ids []int
	if ids, err = wceq.Limit(2).IDs(setContextOp(ctx, wceq.ctx, ent.OpQueryOnlyID)); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{wingetconfigexclusion.Label}
	default:
		err = &NotSingularError{wingetconfigexclusion.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) OnlyIDX(ctx context.Context) int {
	id, err := wceq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of WingetConfigExclusions.
func (wceq *WingetConfigExclusionQuery) All(ctx context.Context) ([]*WingetConfigExclusion, error) {
	ctx = setContextOp(ctx, wceq.ctx, ent.OpQueryAll)
	if err := wceq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	qr := querierAll[[]*WingetConfigExclusion, *WingetConfigExclusionQuery]()
	return withInterceptors[[]*WingetConfigExclusion](ctx, wceq, qr, wceq.inters)
}

// AllX is like All, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) AllX(ctx context.Context) []*WingetConfigExclusion {
	nodes, err := wceq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of WingetConfigExclusion IDs.
func (wceq *WingetConfigExclusionQuery) IDs(ctx context.Context) (ids []int, err error) {
	if wceq.ctx.Unique == nil && wceq.path != nil {
		wceq.Unique(true)
	}
	ctx = setContextOp(ctx, wceq.ctx, ent.OpQueryIDs)
	if err = wceq.Select(wingetconfigexclusion.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) IDsX(ctx context.Context) []int {
	ids, err := wceq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (wceq *WingetConfigExclusionQuery) Count(ctx context.Context) (int, error) {
	ctx = setContextOp(ctx, wceq.ctx, ent.OpQueryCount)
	if err := wceq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return withInterceptors[int](ctx, wceq, querierCount[*WingetConfigExclusionQuery](), wceq.inters)
}

// CountX is like Count, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) CountX(ctx context.Context) int {
	count, err := wceq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (wceq *WingetConfigExclusionQuery) Exist(ctx context.Context) (bool, error) {
	ctx = setContextOp(ctx, wceq.ctx, ent.OpQueryExist)
	switch _, err := wceq.FirstID(ctx); {
	case IsNotFound(err):
		return false, nil
	case err != nil:
		return false, fmt.Errorf("ent: check existence: %w", err)
	default:
		return true, nil
	}
}

// ExistX is like Exist, but panics if an error occurs.
func (wceq *WingetConfigExclusionQuery) ExistX(ctx context.Context) bool {
	exist, err := wceq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the WingetConfigExclusionQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (wceq *WingetConfigExclusionQuery) Clone() *WingetConfigExclusionQuery {
	if wceq == nil {
		return nil
	}
	return &WingetConfigExclusionQuery{
		config:     wceq.config,
		ctx:        wceq.ctx.Clone(),
		order:      append([]wingetconfigexclusion.OrderOption{}, wceq.order...),
		inters:     append([]Interceptor{}, wceq.inters...),
		predicates: append([]predicate.WingetConfigExclusion{}, wceq.predicates...),
		withOwner:  wceq.withOwner.Clone(),
		// clone intermediate query.
		sql:       wceq.sql.Clone(),
		path:      wceq.path,
		modifiers: append([]func(*sql.Selector){}, wceq.modifiers...),
	}
}

// WithOwner tells the query-builder to eager-load the nodes that are connected to
// the "owner" edge. The optional arguments are used to configure the query builder of the edge.
func (wceq *WingetConfigExclusionQuery) WithOwner(opts ...func(*AgentQuery)) *WingetConfigExclusionQuery {
	query := (&AgentClient{config: wceq.config}).Query()
	for _, opt := range opts {
		opt(query)
	}
	wceq.withOwner = query
	return wceq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		PackageID string `json:"package_id,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.WingetConfigExclusion.Query().
//		GroupBy(wingetconfigexclusion.FieldPackageID).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
func (wceq *WingetConfigExclusionQuery) GroupBy(field string, fields ...string) *WingetConfigExclusionGroupBy {
	wceq.ctx.Fields = append([]string{field}, fields...)
	grbuild := &WingetConfigExclusionGroupBy{build: wceq}
	grbuild.flds = &wceq.ctx.Fields
	grbuild.label = wingetconfigexclusion.Label
	grbuild.scan = grbuild.Scan
	return grbuild
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		PackageID string `json:"package_id,omitempty"`
//	}
//
//	client.WingetConfigExclusion.Query().
//		Select(wingetconfigexclusion.FieldPackageID).
//		Scan(ctx, &v)
func (wceq *WingetConfigExclusionQuery) Select(fields ...string) *WingetConfigExclusionSelect {
	wceq.ctx.Fields = append(wceq.ctx.Fields, fields...)
	sbuild := &WingetConfigExclusionSelect{WingetConfigExclusionQuery: wceq}
	sbuild.label = wingetconfigexclusion.Label
	sbuild.flds, sbuild.scan = &wceq.ctx.Fields, sbuild.Scan
	return sbuild
}

// Aggregate returns a WingetConfigExclusionSelect configured with the given aggregations.
func (wceq *WingetConfigExclusionQuery) Aggregate(fns ...AggregateFunc) *WingetConfigExclusionSelect {
	return wceq.Select().Aggregate(fns...)
}

func (wceq *WingetConfigExclusionQuery) prepareQuery(ctx context.Context) error {
	for _, inter := range wceq.inters {
		if inter == nil {
			return fmt.Errorf("ent: uninitialized interceptor (forgotten import ent/runtime?)")
		}
		if trv, ok := inter.(Traverser); ok {
			if err := trv.Traverse(ctx, wceq); err != nil {
				return err
			}
		}
	}
	for _, f := range wceq.ctx.Fields {
		if !wingetconfigexclusion.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if wceq.path != nil {
		prev, err := wceq.path(ctx)
		if err != nil {
			return err
		}
		wceq.sql = prev
	}
	return nil
}

func (wceq *WingetConfigExclusionQuery) sqlAll(ctx context.Context, hooks ...queryHook) ([]*WingetConfigExclusion, error) {
	var (
		nodes       = []*WingetConfigExclusion{}
		withFKs     = wceq.withFKs
		_spec       = wceq.querySpec()
		loadedTypes = [1]bool{
			wceq.withOwner != nil,
		}
	)
	if wceq.withOwner != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, wingetconfigexclusion.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]any, error) {
		return (*WingetConfigExclusion).scanValues(nil, columns)
	}
	_spec.Assign = func(columns []string, values []any) error {
		node := &WingetConfigExclusion{config: wceq.config}
		nodes = append(nodes, node)
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(wceq.modifiers) > 0 {
		_spec.Modifiers = wceq.modifiers
	}
	for i := range hooks {
		hooks[i](ctx, _spec)
	}
	if err := sqlgraph.QueryNodes(ctx, wceq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}
	if query := wceq.withOwner; query != nil {
		if err := wceq.loadOwner(ctx, query, nodes, nil,
			func(n *WingetConfigExclusion, e *Agent) { n.Edges.Owner = e }); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

func (wceq *WingetConfigExclusionQuery) loadOwner(ctx context.Context, query *AgentQuery, nodes []*WingetConfigExclusion, init func(*WingetConfigExclusion), assign func(*WingetConfigExclusion, *Agent)) error {
	ids := make([]string, 0, len(nodes))
	nodeids := make(map[string][]*WingetConfigExclusion)
	for i := range nodes {
		if nodes[i].agent_wingetcfgexclusions == nil {
			continue
		}
		fk := *nodes[i].agent_wingetcfgexclusions
		if _, ok := nodeids[fk]; !ok {
			ids = append(ids, fk)
		}
		nodeids[fk] = append(nodeids[fk], nodes[i])
	}
	if len(ids) == 0 {
		return nil
	}
	query.Where(agent.IDIn(ids...))
	neighbors, err := query.All(ctx)
	if err != nil {
		return err
	}
	for _, n := range neighbors {
		nodes, ok := nodeids[n.ID]
		if !ok {
			return fmt.Errorf(`unexpected foreign-key "agent_wingetcfgexclusions" returned %v`, n.ID)
		}
		for i := range nodes {
			assign(nodes[i], n)
		}
	}
	return nil
}

func (wceq *WingetConfigExclusionQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := wceq.querySpec()
	if len(wceq.modifiers) > 0 {
		_spec.Modifiers = wceq.modifiers
	}
	_spec.Node.Columns = wceq.ctx.Fields
	if len(wceq.ctx.Fields) > 0 {
		_spec.Unique = wceq.ctx.Unique != nil && *wceq.ctx.Unique
	}
	return sqlgraph.CountNodes(ctx, wceq.driver, _spec)
}

func (wceq *WingetConfigExclusionQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := sqlgraph.NewQuerySpec(wingetconfigexclusion.Table, wingetconfigexclusion.Columns, sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt))
	_spec.From = wceq.sql
	if unique := wceq.ctx.Unique; unique != nil {
		_spec.Unique = *unique
	} else if wceq.path != nil {
		_spec.Unique = true
	}
	if fields := wceq.ctx.Fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wingetconfigexclusion.FieldID)
		for i := range fields {
			if fields[i] != wingetconfigexclusion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := wceq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := wceq.ctx.Limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := wceq.ctx.Offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := wceq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (wceq *WingetConfigExclusionQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(wceq.driver.Dialect())
	t1 := builder.Table(wingetconfigexclusion.Table)
	columns := wceq.ctx.Fields
	if len(columns) == 0 {
		columns = wingetconfigexclusion.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if wceq.sql != nil {
		selector = wceq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if wceq.ctx.Unique != nil && *wceq.ctx.Unique {
		selector.Distinct()
	}
	for _, m := range wceq.modifiers {
		m(selector)
	}
	for _, p := range wceq.predicates {
		p(selector)
	}
	for _, p := range wceq.order {
		p(selector)
	}
	if offset := wceq.ctx.Offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := wceq.ctx.Limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wceq *WingetConfigExclusionQuery) Modify(modifiers ...func(s *sql.Selector)) *WingetConfigExclusionSelect {
	wceq.modifiers = append(wceq.modifiers, modifiers...)
	return wceq.Select()
}

// WingetConfigExclusionGroupBy is the group-by builder for WingetConfigExclusion entities.
type WingetConfigExclusionGroupBy struct {
	selector
	build *WingetConfigExclusionQuery
}

// Aggregate adds the given aggregation functions to the group-by query.
func (wcegb *WingetConfigExclusionGroupBy) Aggregate(fns ...AggregateFunc) *WingetConfigExclusionGroupBy {
	wcegb.fns = append(wcegb.fns, fns...)
	return wcegb
}

// Scan applies the selector query and scans the result into the given value.
func (wcegb *WingetConfigExclusionGroupBy) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wcegb.build.ctx, ent.OpQueryGroupBy)
	if err := wcegb.build.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WingetConfigExclusionQuery, *WingetConfigExclusionGroupBy](ctx, wcegb.build, wcegb, wcegb.build.inters, v)
}

func (wcegb *WingetConfigExclusionGroupBy) sqlScan(ctx context.Context, root *WingetConfigExclusionQuery, v any) error {
	selector := root.sqlQuery(ctx).Select()
	aggregation := make([]string, 0, len(wcegb.fns))
	for _, fn := range wcegb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(*wcegb.flds)+len(wcegb.fns))
		for _, f := range *wcegb.flds {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	selector.GroupBy(selector.Columns(*wcegb.flds...)...)
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wcegb.build.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// WingetConfigExclusionSelect is the builder for selecting fields of WingetConfigExclusion entities.
type WingetConfigExclusionSelect struct {
	*WingetConfigExclusionQuery
	selector
}

// Aggregate adds the given aggregation functions to the selector query.
func (wces *WingetConfigExclusionSelect) Aggregate(fns ...AggregateFunc) *WingetConfigExclusionSelect {
	wces.fns = append(wces.fns, fns...)
	return wces
}

// Scan applies the selector query and scans the result into the given value.
func (wces *WingetConfigExclusionSelect) Scan(ctx context.Context, v any) error {
	ctx = setContextOp(ctx, wces.ctx, ent.OpQuerySelect)
	if err := wces.prepareQuery(ctx); err != nil {
		return err
	}
	return scanWithInterceptors[*WingetConfigExclusionQuery, *WingetConfigExclusionSelect](ctx, wces.WingetConfigExclusionQuery, wces, wces.inters, v)
}

func (wces *WingetConfigExclusionSelect) sqlScan(ctx context.Context, root *WingetConfigExclusionQuery, v any) error {
	selector := root.sqlQuery(ctx)
	aggregation := make([]string, 0, len(wces.fns))
	for _, fn := range wces.fns {
		aggregation = append(aggregation, fn(selector))
	}
	switch n := len(*wces.selector.flds); {
	case n == 0 && len(aggregation) > 0:
		selector.Select(aggregation...)
	case n != 0 && len(aggregation) > 0:
		selector.AppendSelect(aggregation...)
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := wces.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (wces *WingetConfigExclusionSelect) Modify(modifiers ...func(s *sql.Selector)) *WingetConfigExclusionSelect {
	wces.modifiers = append(wces.modifiers, modifiers...)
	return wces
}
