// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/profileissue"
	"github.com/open-uem/ent/site"
	"github.com/open-uem/ent/tag"
	"github.com/open-uem/ent/task"
)

// ProfileCreate is the builder for creating a Profile entity.
type ProfileCreate struct {
	config
	mutation *ProfileMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (pc *ProfileCreate) SetName(s string) *ProfileCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetApplyToAll sets the "apply_to_all" field.
func (pc *ProfileCreate) SetApplyToAll(b bool) *ProfileCreate {
	pc.mutation.SetApplyToAll(b)
	return pc
}

// SetNillableApplyToAll sets the "apply_to_all" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableApplyToAll(b *bool) *ProfileCreate {
	if b != nil {
		pc.SetApplyToAll(*b)
	}
	return pc
}

// SetType sets the "type" field.
func (pc *ProfileCreate) SetType(pr profile.Type) *ProfileCreate {
	pc.mutation.SetType(pr)
	return pc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (pc *ProfileCreate) SetNillableType(pr *profile.Type) *ProfileCreate {
	if pr != nil {
		pc.SetType(*pr)
	}
	return pc
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (pc *ProfileCreate) AddTagIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddTagIDs(ids...)
	return pc
}

// AddTags adds the "tags" edges to the Tag entity.
func (pc *ProfileCreate) AddTags(t ...*Tag) *ProfileCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTagIDs(ids...)
}

// AddTaskIDs adds the "tasks" edge to the Task entity by IDs.
func (pc *ProfileCreate) AddTaskIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddTaskIDs(ids...)
	return pc
}

// AddTasks adds the "tasks" edges to the Task entity.
func (pc *ProfileCreate) AddTasks(t ...*Task) *ProfileCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return pc.AddTaskIDs(ids...)
}

// AddIssueIDs adds the "issues" edge to the ProfileIssue entity by IDs.
func (pc *ProfileCreate) AddIssueIDs(ids ...int) *ProfileCreate {
	pc.mutation.AddIssueIDs(ids...)
	return pc
}

// AddIssues adds the "issues" edges to the ProfileIssue entity.
func (pc *ProfileCreate) AddIssues(p ...*ProfileIssue) *ProfileCreate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return pc.AddIssueIDs(ids...)
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (pc *ProfileCreate) SetSiteID(id int) *ProfileCreate {
	pc.mutation.SetSiteID(id)
	return pc
}

// SetNillableSiteID sets the "site" edge to the Site entity by ID if the given value is not nil.
func (pc *ProfileCreate) SetNillableSiteID(id *int) *ProfileCreate {
	if id != nil {
		pc = pc.SetSiteID(*id)
	}
	return pc
}

// SetSite sets the "site" edge to the Site entity.
func (pc *ProfileCreate) SetSite(s *Site) *ProfileCreate {
	return pc.SetSiteID(s.ID)
}

// Mutation returns the ProfileMutation object of the builder.
func (pc *ProfileCreate) Mutation() *ProfileMutation {
	return pc.mutation
}

// Save creates the Profile in the database.
func (pc *ProfileCreate) Save(ctx context.Context) (*Profile, error) {
	pc.defaults()
	return withHooks(ctx, pc.sqlSave, pc.mutation, pc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pc *ProfileCreate) SaveX(ctx context.Context) *Profile {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *ProfileCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *ProfileCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *ProfileCreate) defaults() {
	if _, ok := pc.mutation.ApplyToAll(); !ok {
		v := profile.DefaultApplyToAll
		pc.mutation.SetApplyToAll(v)
	}
	if _, ok := pc.mutation.GetType(); !ok {
		v := profile.DefaultType
		pc.mutation.SetType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *ProfileCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Profile.name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := profile.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Profile.name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ApplyToAll(); !ok {
		return &ValidationError{Name: "apply_to_all", err: errors.New(`ent: missing required field "Profile.apply_to_all"`)}
	}
	if v, ok := pc.mutation.GetType(); ok {
		if err := profile.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Profile.type": %w`, err)}
		}
	}
	return nil
}

func (pc *ProfileCreate) sqlSave(ctx context.Context) (*Profile, error) {
	if err := pc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pc.mutation.id = &_node.ID
	pc.mutation.done = true
	return _node, nil
}

func (pc *ProfileCreate) createSpec() (*Profile, *sqlgraph.CreateSpec) {
	var (
		_node = &Profile{config: pc.config}
		_spec = sqlgraph.NewCreateSpec(profile.Table, sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pc.conflict
	if value, ok := pc.mutation.Name(); ok {
		_spec.SetField(profile.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := pc.mutation.ApplyToAll(); ok {
		_spec.SetField(profile.FieldApplyToAll, field.TypeBool, value)
		_node.ApplyToAll = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.SetField(profile.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if nodes := pc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   profile.TagsTable,
			Columns: profile.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.TasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.TasksTable,
			Columns: []string{profile.TasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.IssuesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   profile.IssuesTable,
			Columns: []string{profile.IssuesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := pc.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profile.SiteTable,
			Columns: []string{profile.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.site_profiles = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Profile.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfileUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pc *ProfileCreate) OnConflict(opts ...sql.ConflictOption) *ProfileUpsertOne {
	pc.conflict = opts
	return &ProfileUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pc *ProfileCreate) OnConflictColumns(columns ...string) *ProfileUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &ProfileUpsertOne{
		create: pc,
	}
}

type (
	// ProfileUpsertOne is the builder for "upsert"-ing
	//  one Profile node.
	ProfileUpsertOne struct {
		create *ProfileCreate
	}

	// ProfileUpsert is the "OnConflict" setter.
	ProfileUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *ProfileUpsert) SetName(v string) *ProfileUpsert {
	u.Set(profile.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateName() *ProfileUpsert {
	u.SetExcluded(profile.FieldName)
	return u
}

// SetApplyToAll sets the "apply_to_all" field.
func (u *ProfileUpsert) SetApplyToAll(v bool) *ProfileUpsert {
	u.Set(profile.FieldApplyToAll, v)
	return u
}

// UpdateApplyToAll sets the "apply_to_all" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateApplyToAll() *ProfileUpsert {
	u.SetExcluded(profile.FieldApplyToAll)
	return u
}

// SetType sets the "type" field.
func (u *ProfileUpsert) SetType(v profile.Type) *ProfileUpsert {
	u.Set(profile.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProfileUpsert) UpdateType() *ProfileUpsert {
	u.SetExcluded(profile.FieldType)
	return u
}

// ClearType clears the value of the "type" field.
func (u *ProfileUpsert) ClearType() *ProfileUpsert {
	u.SetNull(profile.FieldType)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProfileUpsertOne) UpdateNewValues() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *ProfileUpsertOne) Ignore() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfileUpsertOne) DoNothing() *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfileCreate.OnConflict
// documentation for more info.
func (u *ProfileUpsertOne) Update(set func(*ProfileUpsert)) *ProfileUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ProfileUpsertOne) SetName(v string) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateName() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateName()
	})
}

// SetApplyToAll sets the "apply_to_all" field.
func (u *ProfileUpsertOne) SetApplyToAll(v bool) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetApplyToAll(v)
	})
}

// UpdateApplyToAll sets the "apply_to_all" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateApplyToAll() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateApplyToAll()
	})
}

// SetType sets the "type" field.
func (u *ProfileUpsertOne) SetType(v profile.Type) *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProfileUpsertOne) UpdateType() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ProfileUpsertOne) ClearType() *ProfileUpsertOne {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *ProfileUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfileCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfileUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *ProfileUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *ProfileUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// ProfileCreateBulk is the builder for creating many Profile entities in bulk.
type ProfileCreateBulk struct {
	config
	err      error
	builders []*ProfileCreate
	conflict []sql.ConflictOption
}

// Save creates the Profile entities in the database.
func (pcb *ProfileCreateBulk) Save(ctx context.Context) ([]*Profile, error) {
	if pcb.err != nil {
		return nil, pcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Profile, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*ProfileMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *ProfileCreateBulk) SaveX(ctx context.Context) []*Profile {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *ProfileCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *ProfileCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Profile.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.ProfileUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (pcb *ProfileCreateBulk) OnConflict(opts ...sql.ConflictOption) *ProfileUpsertBulk {
	pcb.conflict = opts
	return &ProfileUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pcb *ProfileCreateBulk) OnConflictColumns(columns ...string) *ProfileUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &ProfileUpsertBulk{
		create: pcb,
	}
}

// ProfileUpsertBulk is the builder for "upsert"-ing
// a bulk of Profile nodes.
type ProfileUpsertBulk struct {
	create *ProfileCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *ProfileUpsertBulk) UpdateNewValues() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Profile.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *ProfileUpsertBulk) Ignore() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *ProfileUpsertBulk) DoNothing() *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the ProfileCreateBulk.OnConflict
// documentation for more info.
func (u *ProfileUpsertBulk) Update(set func(*ProfileUpsert)) *ProfileUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&ProfileUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *ProfileUpsertBulk) SetName(v string) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateName() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateName()
	})
}

// SetApplyToAll sets the "apply_to_all" field.
func (u *ProfileUpsertBulk) SetApplyToAll(v bool) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetApplyToAll(v)
	})
}

// UpdateApplyToAll sets the "apply_to_all" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateApplyToAll() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateApplyToAll()
	})
}

// SetType sets the "type" field.
func (u *ProfileUpsertBulk) SetType(v profile.Type) *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *ProfileUpsertBulk) UpdateType() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.UpdateType()
	})
}

// ClearType clears the value of the "type" field.
func (u *ProfileUpsertBulk) ClearType() *ProfileUpsertBulk {
	return u.Update(func(s *ProfileUpsert) {
		s.ClearType()
	})
}

// Exec executes the query.
func (u *ProfileUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the ProfileCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for ProfileCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *ProfileUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
