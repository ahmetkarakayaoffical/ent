// Code generated by ent, DO NOT EDIT.

package revocation

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int64) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldID, id))
}

// Reason applies equality check predicate on the "reason" field. It's identical to ReasonEQ.
func Reason(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldReason, v))
}

// Revoked applies equality check predicate on the "revoked" field. It's identical to RevokedEQ.
func Revoked(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldRevoked, v))
}

// ReasonEQ applies the EQ predicate on the "reason" field.
func ReasonEQ(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldReason, v))
}

// ReasonNEQ applies the NEQ predicate on the "reason" field.
func ReasonNEQ(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldReason, v))
}

// ReasonIn applies the In predicate on the "reason" field.
func ReasonIn(vs ...string) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldReason, vs...))
}

// ReasonNotIn applies the NotIn predicate on the "reason" field.
func ReasonNotIn(vs ...string) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldReason, vs...))
}

// ReasonGT applies the GT predicate on the "reason" field.
func ReasonGT(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldReason, v))
}

// ReasonGTE applies the GTE predicate on the "reason" field.
func ReasonGTE(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldReason, v))
}

// ReasonLT applies the LT predicate on the "reason" field.
func ReasonLT(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldReason, v))
}

// ReasonLTE applies the LTE predicate on the "reason" field.
func ReasonLTE(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldReason, v))
}

// ReasonContains applies the Contains predicate on the "reason" field.
func ReasonContains(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldContains(FieldReason, v))
}

// ReasonHasPrefix applies the HasPrefix predicate on the "reason" field.
func ReasonHasPrefix(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldHasPrefix(FieldReason, v))
}

// ReasonHasSuffix applies the HasSuffix predicate on the "reason" field.
func ReasonHasSuffix(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldHasSuffix(FieldReason, v))
}

// ReasonIsNil applies the IsNil predicate on the "reason" field.
func ReasonIsNil() predicate.Revocation {
	return predicate.Revocation(sql.FieldIsNull(FieldReason))
}

// ReasonNotNil applies the NotNil predicate on the "reason" field.
func ReasonNotNil() predicate.Revocation {
	return predicate.Revocation(sql.FieldNotNull(FieldReason))
}

// ReasonEqualFold applies the EqualFold predicate on the "reason" field.
func ReasonEqualFold(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldEqualFold(FieldReason, v))
}

// ReasonContainsFold applies the ContainsFold predicate on the "reason" field.
func ReasonContainsFold(v string) predicate.Revocation {
	return predicate.Revocation(sql.FieldContainsFold(FieldReason, v))
}

// RevokedEQ applies the EQ predicate on the "revoked" field.
func RevokedEQ(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldEQ(FieldRevoked, v))
}

// RevokedNEQ applies the NEQ predicate on the "revoked" field.
func RevokedNEQ(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldNEQ(FieldRevoked, v))
}

// RevokedIn applies the In predicate on the "revoked" field.
func RevokedIn(vs ...time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldIn(FieldRevoked, vs...))
}

// RevokedNotIn applies the NotIn predicate on the "revoked" field.
func RevokedNotIn(vs ...time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldNotIn(FieldRevoked, vs...))
}

// RevokedGT applies the GT predicate on the "revoked" field.
func RevokedGT(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldGT(FieldRevoked, v))
}

// RevokedGTE applies the GTE predicate on the "revoked" field.
func RevokedGTE(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldGTE(FieldRevoked, v))
}

// RevokedLT applies the LT predicate on the "revoked" field.
func RevokedLT(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldLT(FieldRevoked, v))
}

// RevokedLTE applies the LTE predicate on the "revoked" field.
func RevokedLTE(v time.Time) predicate.Revocation {
	return predicate.Revocation(sql.FieldLTE(FieldRevoked, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Revocation) predicate.Revocation {
	return predicate.Revocation(sql.NotPredicates(p))
}
