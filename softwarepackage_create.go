// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/softwarepackage"
)

// SoftwarePackageCreate is the builder for creating a SoftwarePackage entity.
type SoftwarePackageCreate struct {
	config
	mutation *SoftwarePackageMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetPackageID sets the "package_id" field.
func (spc *SoftwarePackageCreate) SetPackageID(s string) *SoftwarePackageCreate {
	spc.mutation.SetPackageID(s)
	return spc
}

// SetName sets the "name" field.
func (spc *SoftwarePackageCreate) SetName(s string) *SoftwarePackageCreate {
	spc.mutation.SetName(s)
	return spc
}

// SetSource sets the "source" field.
func (spc *SoftwarePackageCreate) SetSource(s softwarepackage.Source) *SoftwarePackageCreate {
	spc.mutation.SetSource(s)
	return spc
}

// Mutation returns the SoftwarePackageMutation object of the builder.
func (spc *SoftwarePackageCreate) Mutation() *SoftwarePackageMutation {
	return spc.mutation
}

// Save creates the SoftwarePackage in the database.
func (spc *SoftwarePackageCreate) Save(ctx context.Context) (*SoftwarePackage, error) {
	return withHooks(ctx, spc.sqlSave, spc.mutation, spc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (spc *SoftwarePackageCreate) SaveX(ctx context.Context) *SoftwarePackage {
	v, err := spc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spc *SoftwarePackageCreate) Exec(ctx context.Context) error {
	_, err := spc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spc *SoftwarePackageCreate) ExecX(ctx context.Context) {
	if err := spc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (spc *SoftwarePackageCreate) check() error {
	if _, ok := spc.mutation.PackageID(); !ok {
		return &ValidationError{Name: "package_id", err: errors.New(`ent: missing required field "SoftwarePackage.package_id"`)}
	}
	if v, ok := spc.mutation.PackageID(); ok {
		if err := softwarepackage.PackageIDValidator(v); err != nil {
			return &ValidationError{Name: "package_id", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.package_id": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "SoftwarePackage.name"`)}
	}
	if v, ok := spc.mutation.Name(); ok {
		if err := softwarepackage.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.name": %w`, err)}
		}
	}
	if _, ok := spc.mutation.Source(); !ok {
		return &ValidationError{Name: "source", err: errors.New(`ent: missing required field "SoftwarePackage.source"`)}
	}
	if v, ok := spc.mutation.Source(); ok {
		if err := softwarepackage.SourceValidator(v); err != nil {
			return &ValidationError{Name: "source", err: fmt.Errorf(`ent: validator failed for field "SoftwarePackage.source": %w`, err)}
		}
	}
	return nil
}

func (spc *SoftwarePackageCreate) sqlSave(ctx context.Context) (*SoftwarePackage, error) {
	if err := spc.check(); err != nil {
		return nil, err
	}
	_node, _spec := spc.createSpec()
	if err := sqlgraph.CreateNode(ctx, spc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	spc.mutation.id = &_node.ID
	spc.mutation.done = true
	return _node, nil
}

func (spc *SoftwarePackageCreate) createSpec() (*SoftwarePackage, *sqlgraph.CreateSpec) {
	var (
		_node = &SoftwarePackage{config: spc.config}
		_spec = sqlgraph.NewCreateSpec(softwarepackage.Table, sqlgraph.NewFieldSpec(softwarepackage.FieldID, field.TypeInt))
	)
	_spec.OnConflict = spc.conflict
	if value, ok := spc.mutation.PackageID(); ok {
		_spec.SetField(softwarepackage.FieldPackageID, field.TypeString, value)
		_node.PackageID = value
	}
	if value, ok := spc.mutation.Name(); ok {
		_spec.SetField(softwarepackage.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := spc.mutation.Source(); ok {
		_spec.SetField(softwarepackage.FieldSource, field.TypeEnum, value)
		_node.Source = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SoftwarePackage.Create().
//		SetPackageID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SoftwarePackageUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (spc *SoftwarePackageCreate) OnConflict(opts ...sql.ConflictOption) *SoftwarePackageUpsertOne {
	spc.conflict = opts
	return &SoftwarePackageUpsertOne{
		create: spc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spc *SoftwarePackageCreate) OnConflictColumns(columns ...string) *SoftwarePackageUpsertOne {
	spc.conflict = append(spc.conflict, sql.ConflictColumns(columns...))
	return &SoftwarePackageUpsertOne{
		create: spc,
	}
}

type (
	// SoftwarePackageUpsertOne is the builder for "upsert"-ing
	//  one SoftwarePackage node.
	SoftwarePackageUpsertOne struct {
		create *SoftwarePackageCreate
	}

	// SoftwarePackageUpsert is the "OnConflict" setter.
	SoftwarePackageUpsert struct {
		*sql.UpdateSet
	}
)

// SetPackageID sets the "package_id" field.
func (u *SoftwarePackageUpsert) SetPackageID(v string) *SoftwarePackageUpsert {
	u.Set(softwarepackage.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *SoftwarePackageUpsert) UpdatePackageID() *SoftwarePackageUpsert {
	u.SetExcluded(softwarepackage.FieldPackageID)
	return u
}

// SetName sets the "name" field.
func (u *SoftwarePackageUpsert) SetName(v string) *SoftwarePackageUpsert {
	u.Set(softwarepackage.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SoftwarePackageUpsert) UpdateName() *SoftwarePackageUpsert {
	u.SetExcluded(softwarepackage.FieldName)
	return u
}

// SetSource sets the "source" field.
func (u *SoftwarePackageUpsert) SetSource(v softwarepackage.Source) *SoftwarePackageUpsert {
	u.Set(softwarepackage.FieldSource, v)
	return u
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SoftwarePackageUpsert) UpdateSource() *SoftwarePackageUpsert {
	u.SetExcluded(softwarepackage.FieldSource)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SoftwarePackageUpsertOne) UpdateNewValues() *SoftwarePackageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *SoftwarePackageUpsertOne) Ignore() *SoftwarePackageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SoftwarePackageUpsertOne) DoNothing() *SoftwarePackageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SoftwarePackageCreate.OnConflict
// documentation for more info.
func (u *SoftwarePackageUpsertOne) Update(set func(*SoftwarePackageUpsert)) *SoftwarePackageUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SoftwarePackageUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *SoftwarePackageUpsertOne) SetPackageID(v string) *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *SoftwarePackageUpsertOne) UpdatePackageID() *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdatePackageID()
	})
}

// SetName sets the "name" field.
func (u *SoftwarePackageUpsertOne) SetName(v string) *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SoftwarePackageUpsertOne) UpdateName() *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdateName()
	})
}

// SetSource sets the "source" field.
func (u *SoftwarePackageUpsertOne) SetSource(v softwarepackage.Source) *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SoftwarePackageUpsertOne) UpdateSource() *SoftwarePackageUpsertOne {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *SoftwarePackageUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SoftwarePackageCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SoftwarePackageUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *SoftwarePackageUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *SoftwarePackageUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// SoftwarePackageCreateBulk is the builder for creating many SoftwarePackage entities in bulk.
type SoftwarePackageCreateBulk struct {
	config
	err      error
	builders []*SoftwarePackageCreate
	conflict []sql.ConflictOption
}

// Save creates the SoftwarePackage entities in the database.
func (spcb *SoftwarePackageCreateBulk) Save(ctx context.Context) ([]*SoftwarePackage, error) {
	if spcb.err != nil {
		return nil, spcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(spcb.builders))
	nodes := make([]*SoftwarePackage, len(spcb.builders))
	mutators := make([]Mutator, len(spcb.builders))
	for i := range spcb.builders {
		func(i int, root context.Context) {
			builder := spcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*SoftwarePackageMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, spcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = spcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, spcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, spcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (spcb *SoftwarePackageCreateBulk) SaveX(ctx context.Context) []*SoftwarePackage {
	v, err := spcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (spcb *SoftwarePackageCreateBulk) Exec(ctx context.Context) error {
	_, err := spcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (spcb *SoftwarePackageCreateBulk) ExecX(ctx context.Context) {
	if err := spcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.SoftwarePackage.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.SoftwarePackageUpsert) {
//			SetPackageID(v+v).
//		}).
//		Exec(ctx)
func (spcb *SoftwarePackageCreateBulk) OnConflict(opts ...sql.ConflictOption) *SoftwarePackageUpsertBulk {
	spcb.conflict = opts
	return &SoftwarePackageUpsertBulk{
		create: spcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (spcb *SoftwarePackageCreateBulk) OnConflictColumns(columns ...string) *SoftwarePackageUpsertBulk {
	spcb.conflict = append(spcb.conflict, sql.ConflictColumns(columns...))
	return &SoftwarePackageUpsertBulk{
		create: spcb,
	}
}

// SoftwarePackageUpsertBulk is the builder for "upsert"-ing
// a bulk of SoftwarePackage nodes.
type SoftwarePackageUpsertBulk struct {
	create *SoftwarePackageCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *SoftwarePackageUpsertBulk) UpdateNewValues() *SoftwarePackageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.SoftwarePackage.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *SoftwarePackageUpsertBulk) Ignore() *SoftwarePackageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *SoftwarePackageUpsertBulk) DoNothing() *SoftwarePackageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the SoftwarePackageCreateBulk.OnConflict
// documentation for more info.
func (u *SoftwarePackageUpsertBulk) Update(set func(*SoftwarePackageUpsert)) *SoftwarePackageUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&SoftwarePackageUpsert{UpdateSet: update})
	}))
	return u
}

// SetPackageID sets the "package_id" field.
func (u *SoftwarePackageUpsertBulk) SetPackageID(v string) *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *SoftwarePackageUpsertBulk) UpdatePackageID() *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdatePackageID()
	})
}

// SetName sets the "name" field.
func (u *SoftwarePackageUpsertBulk) SetName(v string) *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *SoftwarePackageUpsertBulk) UpdateName() *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdateName()
	})
}

// SetSource sets the "source" field.
func (u *SoftwarePackageUpsertBulk) SetSource(v softwarepackage.Source) *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.SetSource(v)
	})
}

// UpdateSource sets the "source" field to the value that was provided on create.
func (u *SoftwarePackageUpsertBulk) UpdateSource() *SoftwarePackageUpsertBulk {
	return u.Update(func(s *SoftwarePackageUpsert) {
		s.UpdateSource()
	})
}

// Exec executes the query.
func (u *SoftwarePackageUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the SoftwarePackageCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for SoftwarePackageCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *SoftwarePackageUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
