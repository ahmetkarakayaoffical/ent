// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/wingetconfigexclusion"
)

// WingetConfigExclusion is the model entity for the WingetConfigExclusion schema.
type WingetConfigExclusion struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// PackageID holds the value of the "package_id" field.
	PackageID string `json:"package_id,omitempty"`
	// When holds the value of the "when" field.
	When time.Time `json:"when,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the WingetConfigExclusionQuery when eager-loading is set.
	Edges                     WingetConfigExclusionEdges `json:"edges"`
	agent_wingetcfgexclusions *string
	selectValues              sql.SelectValues
}

// WingetConfigExclusionEdges holds the relations/edges for other nodes in the graph.
type WingetConfigExclusionEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e WingetConfigExclusionEdges) OwnerOrErr() (*Agent, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*WingetConfigExclusion) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case wingetconfigexclusion.FieldID:
			values[i] = new(sql.NullInt64)
		case wingetconfigexclusion.FieldPackageID:
			values[i] = new(sql.NullString)
		case wingetconfigexclusion.FieldWhen:
			values[i] = new(sql.NullTime)
		case wingetconfigexclusion.ForeignKeys[0]: // agent_wingetcfgexclusions
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the WingetConfigExclusion fields.
func (wce *WingetConfigExclusion) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case wingetconfigexclusion.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			wce.ID = int(value.Int64)
		case wingetconfigexclusion.FieldPackageID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field package_id", values[i])
			} else if value.Valid {
				wce.PackageID = value.String
			}
		case wingetconfigexclusion.FieldWhen:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field when", values[i])
			} else if value.Valid {
				wce.When = value.Time
			}
		case wingetconfigexclusion.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_wingetcfgexclusions", values[i])
			} else if value.Valid {
				wce.agent_wingetcfgexclusions = new(string)
				*wce.agent_wingetcfgexclusions = value.String
			}
		default:
			wce.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the WingetConfigExclusion.
// This includes values selected through modifiers, order, etc.
func (wce *WingetConfigExclusion) Value(name string) (ent.Value, error) {
	return wce.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the WingetConfigExclusion entity.
func (wce *WingetConfigExclusion) QueryOwner() *AgentQuery {
	return NewWingetConfigExclusionClient(wce.config).QueryOwner(wce)
}

// Update returns a builder for updating this WingetConfigExclusion.
// Note that you need to call WingetConfigExclusion.Unwrap() before calling this method if this WingetConfigExclusion
// was returned from a transaction, and the transaction was committed or rolled back.
func (wce *WingetConfigExclusion) Update() *WingetConfigExclusionUpdateOne {
	return NewWingetConfigExclusionClient(wce.config).UpdateOne(wce)
}

// Unwrap unwraps the WingetConfigExclusion entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (wce *WingetConfigExclusion) Unwrap() *WingetConfigExclusion {
	_tx, ok := wce.config.driver.(*txDriver)
	if !ok {
		panic("ent: WingetConfigExclusion is not a transactional entity")
	}
	wce.config.driver = _tx.drv
	return wce
}

// String implements the fmt.Stringer.
func (wce *WingetConfigExclusion) String() string {
	var builder strings.Builder
	builder.WriteString("WingetConfigExclusion(")
	builder.WriteString(fmt.Sprintf("id=%v, ", wce.ID))
	builder.WriteString("package_id=")
	builder.WriteString(wce.PackageID)
	builder.WriteString(", ")
	builder.WriteString("when=")
	builder.WriteString(wce.When.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// WingetConfigExclusions is a parsable slice of WingetConfigExclusion.
type WingetConfigExclusions []*WingetConfigExclusion
