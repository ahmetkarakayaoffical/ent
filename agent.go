// Code generated by ent, DO NOT EDIT.

package openuem_ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/doncicuto/openuem_ent/agent"
	"github.com/doncicuto/openuem_ent/antivirus"
	"github.com/doncicuto/openuem_ent/computer"
	"github.com/doncicuto/openuem_ent/operatingsystem"
	"github.com/doncicuto/openuem_ent/systemupdate"
)

// Agent is the model entity for the Agent schema.
type Agent struct {
	config `json:"-"`
	// ID of the ent.
	ID string `json:"id,omitempty"`
	// Os holds the value of the "os" field.
	Os string `json:"os,omitempty"`
	// Hostname holds the value of the "hostname" field.
	Hostname string `json:"hostname,omitempty"`
	// Version holds the value of the "version" field.
	Version string `json:"version,omitempty"`
	// IP holds the value of the "ip" field.
	IP string `json:"ip,omitempty"`
	// FirstContact holds the value of the "first_contact" field.
	FirstContact time.Time `json:"first_contact,omitempty"`
	// LastContact holds the value of the "last_contact" field.
	LastContact time.Time `json:"last_contact,omitempty"`
	// Enabled holds the value of the "enabled" field.
	Enabled bool `json:"enabled,omitempty"`
	// Vnc holds the value of the "vnc" field.
	Vnc string `json:"vnc,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the AgentQuery when eager-loading is set.
	Edges        AgentEdges `json:"edges"`
	selectValues sql.SelectValues
}

// AgentEdges holds the relations/edges for other nodes in the graph.
type AgentEdges struct {
	// Computer holds the value of the computer edge.
	Computer *Computer `json:"computer,omitempty"`
	// Operatingsystem holds the value of the operatingsystem edge.
	Operatingsystem *OperatingSystem `json:"operatingsystem,omitempty"`
	// Systemupdate holds the value of the systemupdate edge.
	Systemupdate *SystemUpdate `json:"systemupdate,omitempty"`
	// Antivirus holds the value of the antivirus edge.
	Antivirus *Antivirus `json:"antivirus,omitempty"`
	// Logicaldisks holds the value of the logicaldisks edge.
	Logicaldisks []*LogicalDisk `json:"logicaldisks,omitempty"`
	// Apps holds the value of the apps edge.
	Apps []*App `json:"apps,omitempty"`
	// Monitors holds the value of the monitors edge.
	Monitors []*Monitor `json:"monitors,omitempty"`
	// Shares holds the value of the shares edge.
	Shares []*Share `json:"shares,omitempty"`
	// Printers holds the value of the printers edge.
	Printers []*Printer `json:"printers,omitempty"`
	// Networkadapters holds the value of the networkadapters edge.
	Networkadapters []*NetworkAdapter `json:"networkadapters,omitempty"`
	// Deployments holds the value of the deployments edge.
	Deployments []*Deployment `json:"deployments,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [11]bool
}

// ComputerOrErr returns the Computer value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentEdges) ComputerOrErr() (*Computer, error) {
	if e.Computer != nil {
		return e.Computer, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: computer.Label}
	}
	return nil, &NotLoadedError{edge: "computer"}
}

// OperatingsystemOrErr returns the Operatingsystem value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentEdges) OperatingsystemOrErr() (*OperatingSystem, error) {
	if e.Operatingsystem != nil {
		return e.Operatingsystem, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: operatingsystem.Label}
	}
	return nil, &NotLoadedError{edge: "operatingsystem"}
}

// SystemupdateOrErr returns the Systemupdate value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentEdges) SystemupdateOrErr() (*SystemUpdate, error) {
	if e.Systemupdate != nil {
		return e.Systemupdate, nil
	} else if e.loadedTypes[2] {
		return nil, &NotFoundError{label: systemupdate.Label}
	}
	return nil, &NotLoadedError{edge: "systemupdate"}
}

// AntivirusOrErr returns the Antivirus value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e AgentEdges) AntivirusOrErr() (*Antivirus, error) {
	if e.Antivirus != nil {
		return e.Antivirus, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: antivirus.Label}
	}
	return nil, &NotLoadedError{edge: "antivirus"}
}

// LogicaldisksOrErr returns the Logicaldisks value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) LogicaldisksOrErr() ([]*LogicalDisk, error) {
	if e.loadedTypes[4] {
		return e.Logicaldisks, nil
	}
	return nil, &NotLoadedError{edge: "logicaldisks"}
}

// AppsOrErr returns the Apps value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) AppsOrErr() ([]*App, error) {
	if e.loadedTypes[5] {
		return e.Apps, nil
	}
	return nil, &NotLoadedError{edge: "apps"}
}

// MonitorsOrErr returns the Monitors value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) MonitorsOrErr() ([]*Monitor, error) {
	if e.loadedTypes[6] {
		return e.Monitors, nil
	}
	return nil, &NotLoadedError{edge: "monitors"}
}

// SharesOrErr returns the Shares value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) SharesOrErr() ([]*Share, error) {
	if e.loadedTypes[7] {
		return e.Shares, nil
	}
	return nil, &NotLoadedError{edge: "shares"}
}

// PrintersOrErr returns the Printers value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) PrintersOrErr() ([]*Printer, error) {
	if e.loadedTypes[8] {
		return e.Printers, nil
	}
	return nil, &NotLoadedError{edge: "printers"}
}

// NetworkadaptersOrErr returns the Networkadapters value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) NetworkadaptersOrErr() ([]*NetworkAdapter, error) {
	if e.loadedTypes[9] {
		return e.Networkadapters, nil
	}
	return nil, &NotLoadedError{edge: "networkadapters"}
}

// DeploymentsOrErr returns the Deployments value or an error if the edge
// was not loaded in eager-loading.
func (e AgentEdges) DeploymentsOrErr() ([]*Deployment, error) {
	if e.loadedTypes[10] {
		return e.Deployments, nil
	}
	return nil, &NotLoadedError{edge: "deployments"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Agent) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case agent.FieldEnabled:
			values[i] = new(sql.NullBool)
		case agent.FieldID, agent.FieldOs, agent.FieldHostname, agent.FieldVersion, agent.FieldIP, agent.FieldVnc:
			values[i] = new(sql.NullString)
		case agent.FieldFirstContact, agent.FieldLastContact:
			values[i] = new(sql.NullTime)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Agent fields.
func (a *Agent) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case agent.FieldID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value.Valid {
				a.ID = value.String
			}
		case agent.FieldOs:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field os", values[i])
			} else if value.Valid {
				a.Os = value.String
			}
		case agent.FieldHostname:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field hostname", values[i])
			} else if value.Valid {
				a.Hostname = value.String
			}
		case agent.FieldVersion:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field version", values[i])
			} else if value.Valid {
				a.Version = value.String
			}
		case agent.FieldIP:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field ip", values[i])
			} else if value.Valid {
				a.IP = value.String
			}
		case agent.FieldFirstContact:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field first_contact", values[i])
			} else if value.Valid {
				a.FirstContact = value.Time
			}
		case agent.FieldLastContact:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field last_contact", values[i])
			} else if value.Valid {
				a.LastContact = value.Time
			}
		case agent.FieldEnabled:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field enabled", values[i])
			} else if value.Valid {
				a.Enabled = value.Bool
			}
		case agent.FieldVnc:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field vnc", values[i])
			} else if value.Valid {
				a.Vnc = value.String
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Agent.
// This includes values selected through modifiers, order, etc.
func (a *Agent) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// QueryComputer queries the "computer" edge of the Agent entity.
func (a *Agent) QueryComputer() *ComputerQuery {
	return NewAgentClient(a.config).QueryComputer(a)
}

// QueryOperatingsystem queries the "operatingsystem" edge of the Agent entity.
func (a *Agent) QueryOperatingsystem() *OperatingSystemQuery {
	return NewAgentClient(a.config).QueryOperatingsystem(a)
}

// QuerySystemupdate queries the "systemupdate" edge of the Agent entity.
func (a *Agent) QuerySystemupdate() *SystemUpdateQuery {
	return NewAgentClient(a.config).QuerySystemupdate(a)
}

// QueryAntivirus queries the "antivirus" edge of the Agent entity.
func (a *Agent) QueryAntivirus() *AntivirusQuery {
	return NewAgentClient(a.config).QueryAntivirus(a)
}

// QueryLogicaldisks queries the "logicaldisks" edge of the Agent entity.
func (a *Agent) QueryLogicaldisks() *LogicalDiskQuery {
	return NewAgentClient(a.config).QueryLogicaldisks(a)
}

// QueryApps queries the "apps" edge of the Agent entity.
func (a *Agent) QueryApps() *AppQuery {
	return NewAgentClient(a.config).QueryApps(a)
}

// QueryMonitors queries the "monitors" edge of the Agent entity.
func (a *Agent) QueryMonitors() *MonitorQuery {
	return NewAgentClient(a.config).QueryMonitors(a)
}

// QueryShares queries the "shares" edge of the Agent entity.
func (a *Agent) QueryShares() *ShareQuery {
	return NewAgentClient(a.config).QueryShares(a)
}

// QueryPrinters queries the "printers" edge of the Agent entity.
func (a *Agent) QueryPrinters() *PrinterQuery {
	return NewAgentClient(a.config).QueryPrinters(a)
}

// QueryNetworkadapters queries the "networkadapters" edge of the Agent entity.
func (a *Agent) QueryNetworkadapters() *NetworkAdapterQuery {
	return NewAgentClient(a.config).QueryNetworkadapters(a)
}

// QueryDeployments queries the "deployments" edge of the Agent entity.
func (a *Agent) QueryDeployments() *DeploymentQuery {
	return NewAgentClient(a.config).QueryDeployments(a)
}

// Update returns a builder for updating this Agent.
// Note that you need to call Agent.Unwrap() before calling this method if this Agent
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Agent) Update() *AgentUpdateOne {
	return NewAgentClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Agent entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Agent) Unwrap() *Agent {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("openuem_ent: Agent is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Agent) String() string {
	var builder strings.Builder
	builder.WriteString("Agent(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("os=")
	builder.WriteString(a.Os)
	builder.WriteString(", ")
	builder.WriteString("hostname=")
	builder.WriteString(a.Hostname)
	builder.WriteString(", ")
	builder.WriteString("version=")
	builder.WriteString(a.Version)
	builder.WriteString(", ")
	builder.WriteString("ip=")
	builder.WriteString(a.IP)
	builder.WriteString(", ")
	builder.WriteString("first_contact=")
	builder.WriteString(a.FirstContact.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("last_contact=")
	builder.WriteString(a.LastContact.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("enabled=")
	builder.WriteString(fmt.Sprintf("%v", a.Enabled))
	builder.WriteString(", ")
	builder.WriteString("vnc=")
	builder.WriteString(a.Vnc)
	builder.WriteByte(')')
	return builder.String()
}

// Agents is a parsable slice of Agent.
type Agents []*Agent
