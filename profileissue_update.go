// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/profileissue"
)

// ProfileIssueUpdate is the builder for updating ProfileIssue entities.
type ProfileIssueUpdate struct {
	config
	hooks     []Hook
	mutation  *ProfileIssueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the ProfileIssueUpdate builder.
func (piu *ProfileIssueUpdate) Where(ps ...predicate.ProfileIssue) *ProfileIssueUpdate {
	piu.mutation.Where(ps...)
	return piu
}

// SetError sets the "error" field.
func (piu *ProfileIssueUpdate) SetError(s string) *ProfileIssueUpdate {
	piu.mutation.SetError(s)
	return piu
}

// SetNillableError sets the "error" field if the given value is not nil.
func (piu *ProfileIssueUpdate) SetNillableError(s *string) *ProfileIssueUpdate {
	if s != nil {
		piu.SetError(*s)
	}
	return piu
}

// ClearError clears the value of the "error" field.
func (piu *ProfileIssueUpdate) ClearError() *ProfileIssueUpdate {
	piu.mutation.ClearError()
	return piu
}

// SetWhen sets the "when" field.
func (piu *ProfileIssueUpdate) SetWhen(t time.Time) *ProfileIssueUpdate {
	piu.mutation.SetWhen(t)
	return piu
}

// ClearWhen clears the value of the "when" field.
func (piu *ProfileIssueUpdate) ClearWhen() *ProfileIssueUpdate {
	piu.mutation.ClearWhen()
	return piu
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (piu *ProfileIssueUpdate) SetProfileID(id int) *ProfileIssueUpdate {
	piu.mutation.SetProfileID(id)
	return piu
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (piu *ProfileIssueUpdate) SetNillableProfileID(id *int) *ProfileIssueUpdate {
	if id != nil {
		piu = piu.SetProfileID(*id)
	}
	return piu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (piu *ProfileIssueUpdate) SetProfile(p *Profile) *ProfileIssueUpdate {
	return piu.SetProfileID(p.ID)
}

// SetAgentsID sets the "agents" edge to the Agent entity by ID.
func (piu *ProfileIssueUpdate) SetAgentsID(id string) *ProfileIssueUpdate {
	piu.mutation.SetAgentsID(id)
	return piu
}

// SetNillableAgentsID sets the "agents" edge to the Agent entity by ID if the given value is not nil.
func (piu *ProfileIssueUpdate) SetNillableAgentsID(id *string) *ProfileIssueUpdate {
	if id != nil {
		piu = piu.SetAgentsID(*id)
	}
	return piu
}

// SetAgents sets the "agents" edge to the Agent entity.
func (piu *ProfileIssueUpdate) SetAgents(a *Agent) *ProfileIssueUpdate {
	return piu.SetAgentsID(a.ID)
}

// Mutation returns the ProfileIssueMutation object of the builder.
func (piu *ProfileIssueUpdate) Mutation() *ProfileIssueMutation {
	return piu.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (piu *ProfileIssueUpdate) ClearProfile() *ProfileIssueUpdate {
	piu.mutation.ClearProfile()
	return piu
}

// ClearAgents clears the "agents" edge to the Agent entity.
func (piu *ProfileIssueUpdate) ClearAgents() *ProfileIssueUpdate {
	piu.mutation.ClearAgents()
	return piu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (piu *ProfileIssueUpdate) Save(ctx context.Context) (int, error) {
	piu.defaults()
	return withHooks(ctx, piu.sqlSave, piu.mutation, piu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piu *ProfileIssueUpdate) SaveX(ctx context.Context) int {
	affected, err := piu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (piu *ProfileIssueUpdate) Exec(ctx context.Context) error {
	_, err := piu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piu *ProfileIssueUpdate) ExecX(ctx context.Context) {
	if err := piu.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piu *ProfileIssueUpdate) defaults() {
	if _, ok := piu.mutation.When(); !ok && !piu.mutation.WhenCleared() {
		v := profileissue.UpdateDefaultWhen()
		piu.mutation.SetWhen(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piu *ProfileIssueUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProfileIssueUpdate {
	piu.modifiers = append(piu.modifiers, modifiers...)
	return piu
}

func (piu *ProfileIssueUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(profileissue.Table, profileissue.Columns, sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt))
	if ps := piu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piu.mutation.Error(); ok {
		_spec.SetField(profileissue.FieldError, field.TypeString, value)
	}
	if piu.mutation.ErrorCleared() {
		_spec.ClearField(profileissue.FieldError, field.TypeString)
	}
	if value, ok := piu.mutation.When(); ok {
		_spec.SetField(profileissue.FieldWhen, field.TypeTime, value)
	}
	if piu.mutation.WhenCleared() {
		_spec.ClearField(profileissue.FieldWhen, field.TypeTime)
	}
	if piu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileissue.ProfileTable,
			Columns: []string{profileissue.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileissue.ProfileTable,
			Columns: []string{profileissue.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piu.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profileissue.AgentsTable,
			Columns: []string{profileissue.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piu.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profileissue.AgentsTable,
			Columns: []string{profileissue.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(piu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, piu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profileissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	piu.mutation.done = true
	return n, nil
}

// ProfileIssueUpdateOne is the builder for updating a single ProfileIssue entity.
type ProfileIssueUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *ProfileIssueMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetError sets the "error" field.
func (piuo *ProfileIssueUpdateOne) SetError(s string) *ProfileIssueUpdateOne {
	piuo.mutation.SetError(s)
	return piuo
}

// SetNillableError sets the "error" field if the given value is not nil.
func (piuo *ProfileIssueUpdateOne) SetNillableError(s *string) *ProfileIssueUpdateOne {
	if s != nil {
		piuo.SetError(*s)
	}
	return piuo
}

// ClearError clears the value of the "error" field.
func (piuo *ProfileIssueUpdateOne) ClearError() *ProfileIssueUpdateOne {
	piuo.mutation.ClearError()
	return piuo
}

// SetWhen sets the "when" field.
func (piuo *ProfileIssueUpdateOne) SetWhen(t time.Time) *ProfileIssueUpdateOne {
	piuo.mutation.SetWhen(t)
	return piuo
}

// ClearWhen clears the value of the "when" field.
func (piuo *ProfileIssueUpdateOne) ClearWhen() *ProfileIssueUpdateOne {
	piuo.mutation.ClearWhen()
	return piuo
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (piuo *ProfileIssueUpdateOne) SetProfileID(id int) *ProfileIssueUpdateOne {
	piuo.mutation.SetProfileID(id)
	return piuo
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (piuo *ProfileIssueUpdateOne) SetNillableProfileID(id *int) *ProfileIssueUpdateOne {
	if id != nil {
		piuo = piuo.SetProfileID(*id)
	}
	return piuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (piuo *ProfileIssueUpdateOne) SetProfile(p *Profile) *ProfileIssueUpdateOne {
	return piuo.SetProfileID(p.ID)
}

// SetAgentsID sets the "agents" edge to the Agent entity by ID.
func (piuo *ProfileIssueUpdateOne) SetAgentsID(id string) *ProfileIssueUpdateOne {
	piuo.mutation.SetAgentsID(id)
	return piuo
}

// SetNillableAgentsID sets the "agents" edge to the Agent entity by ID if the given value is not nil.
func (piuo *ProfileIssueUpdateOne) SetNillableAgentsID(id *string) *ProfileIssueUpdateOne {
	if id != nil {
		piuo = piuo.SetAgentsID(*id)
	}
	return piuo
}

// SetAgents sets the "agents" edge to the Agent entity.
func (piuo *ProfileIssueUpdateOne) SetAgents(a *Agent) *ProfileIssueUpdateOne {
	return piuo.SetAgentsID(a.ID)
}

// Mutation returns the ProfileIssueMutation object of the builder.
func (piuo *ProfileIssueUpdateOne) Mutation() *ProfileIssueMutation {
	return piuo.mutation
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (piuo *ProfileIssueUpdateOne) ClearProfile() *ProfileIssueUpdateOne {
	piuo.mutation.ClearProfile()
	return piuo
}

// ClearAgents clears the "agents" edge to the Agent entity.
func (piuo *ProfileIssueUpdateOne) ClearAgents() *ProfileIssueUpdateOne {
	piuo.mutation.ClearAgents()
	return piuo
}

// Where appends a list predicates to the ProfileIssueUpdate builder.
func (piuo *ProfileIssueUpdateOne) Where(ps ...predicate.ProfileIssue) *ProfileIssueUpdateOne {
	piuo.mutation.Where(ps...)
	return piuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (piuo *ProfileIssueUpdateOne) Select(field string, fields ...string) *ProfileIssueUpdateOne {
	piuo.fields = append([]string{field}, fields...)
	return piuo
}

// Save executes the query and returns the updated ProfileIssue entity.
func (piuo *ProfileIssueUpdateOne) Save(ctx context.Context) (*ProfileIssue, error) {
	piuo.defaults()
	return withHooks(ctx, piuo.sqlSave, piuo.mutation, piuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (piuo *ProfileIssueUpdateOne) SaveX(ctx context.Context) *ProfileIssue {
	node, err := piuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (piuo *ProfileIssueUpdateOne) Exec(ctx context.Context) error {
	_, err := piuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (piuo *ProfileIssueUpdateOne) ExecX(ctx context.Context) {
	if err := piuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (piuo *ProfileIssueUpdateOne) defaults() {
	if _, ok := piuo.mutation.When(); !ok && !piuo.mutation.WhenCleared() {
		v := profileissue.UpdateDefaultWhen()
		piuo.mutation.SetWhen(v)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (piuo *ProfileIssueUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *ProfileIssueUpdateOne {
	piuo.modifiers = append(piuo.modifiers, modifiers...)
	return piuo
}

func (piuo *ProfileIssueUpdateOne) sqlSave(ctx context.Context) (_node *ProfileIssue, err error) {
	_spec := sqlgraph.NewUpdateSpec(profileissue.Table, profileissue.Columns, sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt))
	id, ok := piuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "ProfileIssue.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := piuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, profileissue.FieldID)
		for _, f := range fields {
			if !profileissue.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != profileissue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := piuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := piuo.mutation.Error(); ok {
		_spec.SetField(profileissue.FieldError, field.TypeString, value)
	}
	if piuo.mutation.ErrorCleared() {
		_spec.ClearField(profileissue.FieldError, field.TypeString)
	}
	if value, ok := piuo.mutation.When(); ok {
		_spec.SetField(profileissue.FieldWhen, field.TypeTime, value)
	}
	if piuo.mutation.WhenCleared() {
		_spec.ClearField(profileissue.FieldWhen, field.TypeTime)
	}
	if piuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileissue.ProfileTable,
			Columns: []string{profileissue.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   profileissue.ProfileTable,
			Columns: []string{profileissue.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if piuo.mutation.AgentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profileissue.AgentsTable,
			Columns: []string{profileissue.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := piuo.mutation.AgentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: false,
			Table:   profileissue.AgentsTable,
			Columns: []string{profileissue.AgentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(piuo.modifiers...)
	_node = &ProfileIssue{config: piuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, piuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{profileissue.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	piuo.mutation.done = true
	return _node, nil
}
