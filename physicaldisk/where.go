// Code generated by ent, DO NOT EDIT.

package physicaldisk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLTE(FieldID, id))
}

// DeviceID applies equality check predicate on the "device_id" field. It's identical to DeviceIDEQ.
func DeviceID(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldDeviceID, v))
}

// Model applies equality check predicate on the "model" field. It's identical to ModelEQ.
func Model(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldModel, v))
}

// SerialNumber applies equality check predicate on the "serial_number" field. It's identical to SerialNumberEQ.
func SerialNumber(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldSerialNumber, v))
}

// SizeInUnits applies equality check predicate on the "size_in_units" field. It's identical to SizeInUnitsEQ.
func SizeInUnits(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldSizeInUnits, v))
}

// DeviceIDEQ applies the EQ predicate on the "device_id" field.
func DeviceIDEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldDeviceID, v))
}

// DeviceIDNEQ applies the NEQ predicate on the "device_id" field.
func DeviceIDNEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNEQ(FieldDeviceID, v))
}

// DeviceIDIn applies the In predicate on the "device_id" field.
func DeviceIDIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIn(FieldDeviceID, vs...))
}

// DeviceIDNotIn applies the NotIn predicate on the "device_id" field.
func DeviceIDNotIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotIn(FieldDeviceID, vs...))
}

// DeviceIDGT applies the GT predicate on the "device_id" field.
func DeviceIDGT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGT(FieldDeviceID, v))
}

// DeviceIDGTE applies the GTE predicate on the "device_id" field.
func DeviceIDGTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGTE(FieldDeviceID, v))
}

// DeviceIDLT applies the LT predicate on the "device_id" field.
func DeviceIDLT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLT(FieldDeviceID, v))
}

// DeviceIDLTE applies the LTE predicate on the "device_id" field.
func DeviceIDLTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLTE(FieldDeviceID, v))
}

// DeviceIDContains applies the Contains predicate on the "device_id" field.
func DeviceIDContains(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContains(FieldDeviceID, v))
}

// DeviceIDHasPrefix applies the HasPrefix predicate on the "device_id" field.
func DeviceIDHasPrefix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasPrefix(FieldDeviceID, v))
}

// DeviceIDHasSuffix applies the HasSuffix predicate on the "device_id" field.
func DeviceIDHasSuffix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasSuffix(FieldDeviceID, v))
}

// DeviceIDEqualFold applies the EqualFold predicate on the "device_id" field.
func DeviceIDEqualFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEqualFold(FieldDeviceID, v))
}

// DeviceIDContainsFold applies the ContainsFold predicate on the "device_id" field.
func DeviceIDContainsFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContainsFold(FieldDeviceID, v))
}

// ModelEQ applies the EQ predicate on the "model" field.
func ModelEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldModel, v))
}

// ModelNEQ applies the NEQ predicate on the "model" field.
func ModelNEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNEQ(FieldModel, v))
}

// ModelIn applies the In predicate on the "model" field.
func ModelIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIn(FieldModel, vs...))
}

// ModelNotIn applies the NotIn predicate on the "model" field.
func ModelNotIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotIn(FieldModel, vs...))
}

// ModelGT applies the GT predicate on the "model" field.
func ModelGT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGT(FieldModel, v))
}

// ModelGTE applies the GTE predicate on the "model" field.
func ModelGTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGTE(FieldModel, v))
}

// ModelLT applies the LT predicate on the "model" field.
func ModelLT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLT(FieldModel, v))
}

// ModelLTE applies the LTE predicate on the "model" field.
func ModelLTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLTE(FieldModel, v))
}

// ModelContains applies the Contains predicate on the "model" field.
func ModelContains(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContains(FieldModel, v))
}

// ModelHasPrefix applies the HasPrefix predicate on the "model" field.
func ModelHasPrefix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasPrefix(FieldModel, v))
}

// ModelHasSuffix applies the HasSuffix predicate on the "model" field.
func ModelHasSuffix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasSuffix(FieldModel, v))
}

// ModelIsNil applies the IsNil predicate on the "model" field.
func ModelIsNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIsNull(FieldModel))
}

// ModelNotNil applies the NotNil predicate on the "model" field.
func ModelNotNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotNull(FieldModel))
}

// ModelEqualFold applies the EqualFold predicate on the "model" field.
func ModelEqualFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEqualFold(FieldModel, v))
}

// ModelContainsFold applies the ContainsFold predicate on the "model" field.
func ModelContainsFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContainsFold(FieldModel, v))
}

// SerialNumberEQ applies the EQ predicate on the "serial_number" field.
func SerialNumberEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldSerialNumber, v))
}

// SerialNumberNEQ applies the NEQ predicate on the "serial_number" field.
func SerialNumberNEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNEQ(FieldSerialNumber, v))
}

// SerialNumberIn applies the In predicate on the "serial_number" field.
func SerialNumberIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIn(FieldSerialNumber, vs...))
}

// SerialNumberNotIn applies the NotIn predicate on the "serial_number" field.
func SerialNumberNotIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotIn(FieldSerialNumber, vs...))
}

// SerialNumberGT applies the GT predicate on the "serial_number" field.
func SerialNumberGT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGT(FieldSerialNumber, v))
}

// SerialNumberGTE applies the GTE predicate on the "serial_number" field.
func SerialNumberGTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGTE(FieldSerialNumber, v))
}

// SerialNumberLT applies the LT predicate on the "serial_number" field.
func SerialNumberLT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLT(FieldSerialNumber, v))
}

// SerialNumberLTE applies the LTE predicate on the "serial_number" field.
func SerialNumberLTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLTE(FieldSerialNumber, v))
}

// SerialNumberContains applies the Contains predicate on the "serial_number" field.
func SerialNumberContains(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContains(FieldSerialNumber, v))
}

// SerialNumberHasPrefix applies the HasPrefix predicate on the "serial_number" field.
func SerialNumberHasPrefix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasPrefix(FieldSerialNumber, v))
}

// SerialNumberHasSuffix applies the HasSuffix predicate on the "serial_number" field.
func SerialNumberHasSuffix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasSuffix(FieldSerialNumber, v))
}

// SerialNumberIsNil applies the IsNil predicate on the "serial_number" field.
func SerialNumberIsNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIsNull(FieldSerialNumber))
}

// SerialNumberNotNil applies the NotNil predicate on the "serial_number" field.
func SerialNumberNotNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotNull(FieldSerialNumber))
}

// SerialNumberEqualFold applies the EqualFold predicate on the "serial_number" field.
func SerialNumberEqualFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEqualFold(FieldSerialNumber, v))
}

// SerialNumberContainsFold applies the ContainsFold predicate on the "serial_number" field.
func SerialNumberContainsFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContainsFold(FieldSerialNumber, v))
}

// SizeInUnitsEQ applies the EQ predicate on the "size_in_units" field.
func SizeInUnitsEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEQ(FieldSizeInUnits, v))
}

// SizeInUnitsNEQ applies the NEQ predicate on the "size_in_units" field.
func SizeInUnitsNEQ(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNEQ(FieldSizeInUnits, v))
}

// SizeInUnitsIn applies the In predicate on the "size_in_units" field.
func SizeInUnitsIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIn(FieldSizeInUnits, vs...))
}

// SizeInUnitsNotIn applies the NotIn predicate on the "size_in_units" field.
func SizeInUnitsNotIn(vs ...string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotIn(FieldSizeInUnits, vs...))
}

// SizeInUnitsGT applies the GT predicate on the "size_in_units" field.
func SizeInUnitsGT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGT(FieldSizeInUnits, v))
}

// SizeInUnitsGTE applies the GTE predicate on the "size_in_units" field.
func SizeInUnitsGTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldGTE(FieldSizeInUnits, v))
}

// SizeInUnitsLT applies the LT predicate on the "size_in_units" field.
func SizeInUnitsLT(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLT(FieldSizeInUnits, v))
}

// SizeInUnitsLTE applies the LTE predicate on the "size_in_units" field.
func SizeInUnitsLTE(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldLTE(FieldSizeInUnits, v))
}

// SizeInUnitsContains applies the Contains predicate on the "size_in_units" field.
func SizeInUnitsContains(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContains(FieldSizeInUnits, v))
}

// SizeInUnitsHasPrefix applies the HasPrefix predicate on the "size_in_units" field.
func SizeInUnitsHasPrefix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasPrefix(FieldSizeInUnits, v))
}

// SizeInUnitsHasSuffix applies the HasSuffix predicate on the "size_in_units" field.
func SizeInUnitsHasSuffix(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldHasSuffix(FieldSizeInUnits, v))
}

// SizeInUnitsIsNil applies the IsNil predicate on the "size_in_units" field.
func SizeInUnitsIsNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldIsNull(FieldSizeInUnits))
}

// SizeInUnitsNotNil applies the NotNil predicate on the "size_in_units" field.
func SizeInUnitsNotNil() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldNotNull(FieldSizeInUnits))
}

// SizeInUnitsEqualFold applies the EqualFold predicate on the "size_in_units" field.
func SizeInUnitsEqualFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldEqualFold(FieldSizeInUnits, v))
}

// SizeInUnitsContainsFold applies the ContainsFold predicate on the "size_in_units" field.
func SizeInUnitsContainsFold(v string) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.FieldContainsFold(FieldSizeInUnits, v))
}

// HasOwner applies the HasEdge predicate on the "owner" edge.
func HasOwner() predicate.PhysicalDisk {
	return predicate.PhysicalDisk(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasOwnerWith applies the HasEdge predicate on the "owner" edge with a given conditions (other predicates).
func HasOwnerWith(preds ...predicate.Agent) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(func(s *sql.Selector) {
		step := newOwnerStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PhysicalDisk) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PhysicalDisk) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PhysicalDisk) predicate.PhysicalDisk {
	return predicate.PhysicalDisk(sql.NotPredicates(p))
}
