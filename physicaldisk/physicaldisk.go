// Code generated by ent, DO NOT EDIT.

package physicaldisk

import (
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the physicaldisk type in the database.
	Label = "physical_disk"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldDeviceID holds the string denoting the device_id field in the database.
	FieldDeviceID = "device_id"
	// FieldModel holds the string denoting the model field in the database.
	FieldModel = "model"
	// FieldSerialNumber holds the string denoting the serial_number field in the database.
	FieldSerialNumber = "serial_number"
	// FieldSizeInUnits holds the string denoting the size_in_units field in the database.
	FieldSizeInUnits = "size_in_units"
	// EdgeOwner holds the string denoting the owner edge name in mutations.
	EdgeOwner = "owner"
	// AgentFieldID holds the string denoting the ID field of the Agent.
	AgentFieldID = "oid"
	// Table holds the table name of the physicaldisk in the database.
	Table = "physical_disks"
	// OwnerTable is the table that holds the owner relation/edge.
	OwnerTable = "physical_disks"
	// OwnerInverseTable is the table name for the Agent entity.
	// It exists in this package in order to avoid circular dependency with the "agent" package.
	OwnerInverseTable = "agents"
	// OwnerColumn is the table column denoting the owner relation/edge.
	OwnerColumn = "agent_physicaldisks"
)

// Columns holds all SQL columns for physicaldisk fields.
var Columns = []string{
	FieldID,
	FieldDeviceID,
	FieldModel,
	FieldSerialNumber,
	FieldSizeInUnits,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "physical_disks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"agent_physicaldisks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

// OrderOption defines the ordering options for the PhysicalDisk queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByDeviceID orders the results by the device_id field.
func ByDeviceID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldDeviceID, opts...).ToFunc()
}

// ByModel orders the results by the model field.
func ByModel(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldModel, opts...).ToFunc()
}

// BySerialNumber orders the results by the serial_number field.
func BySerialNumber(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSerialNumber, opts...).ToFunc()
}

// BySizeInUnits orders the results by the size_in_units field.
func BySizeInUnits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldSizeInUnits, opts...).ToFunc()
}

// ByOwnerField orders the results by owner field.
func ByOwnerField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newOwnerStep(), sql.OrderByField(field, opts...))
	}
}
func newOwnerStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(OwnerInverseTable, AgentFieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, OwnerTable, OwnerColumn),
	)
}
