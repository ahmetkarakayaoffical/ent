// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/physicaldisk"
)

// PhysicalDisk is the model entity for the PhysicalDisk schema.
type PhysicalDisk struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// DeviceID holds the value of the "device_id" field.
	DeviceID string `json:"device_id,omitempty"`
	// Model holds the value of the "model" field.
	Model string `json:"model,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// SizeInUnits holds the value of the "size_in_units" field.
	SizeInUnits string `json:"size_in_units,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the PhysicalDiskQuery when eager-loading is set.
	Edges               PhysicalDiskEdges `json:"edges"`
	agent_physicaldisks *string
	selectValues        sql.SelectValues
}

// PhysicalDiskEdges holds the relations/edges for other nodes in the graph.
type PhysicalDiskEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e PhysicalDiskEdges) OwnerOrErr() (*Agent, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PhysicalDisk) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case physicaldisk.FieldID:
			values[i] = new(sql.NullInt64)
		case physicaldisk.FieldDeviceID, physicaldisk.FieldModel, physicaldisk.FieldSerialNumber, physicaldisk.FieldSizeInUnits:
			values[i] = new(sql.NullString)
		case physicaldisk.ForeignKeys[0]: // agent_physicaldisks
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PhysicalDisk fields.
func (pd *PhysicalDisk) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case physicaldisk.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pd.ID = int(value.Int64)
		case physicaldisk.FieldDeviceID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field device_id", values[i])
			} else if value.Valid {
				pd.DeviceID = value.String
			}
		case physicaldisk.FieldModel:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field model", values[i])
			} else if value.Valid {
				pd.Model = value.String
			}
		case physicaldisk.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				pd.SerialNumber = value.String
			}
		case physicaldisk.FieldSizeInUnits:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size_in_units", values[i])
			} else if value.Valid {
				pd.SizeInUnits = value.String
			}
		case physicaldisk.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_physicaldisks", values[i])
			} else if value.Valid {
				pd.agent_physicaldisks = new(string)
				*pd.agent_physicaldisks = value.String
			}
		default:
			pd.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the PhysicalDisk.
// This includes values selected through modifiers, order, etc.
func (pd *PhysicalDisk) Value(name string) (ent.Value, error) {
	return pd.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the PhysicalDisk entity.
func (pd *PhysicalDisk) QueryOwner() *AgentQuery {
	return NewPhysicalDiskClient(pd.config).QueryOwner(pd)
}

// Update returns a builder for updating this PhysicalDisk.
// Note that you need to call PhysicalDisk.Unwrap() before calling this method if this PhysicalDisk
// was returned from a transaction, and the transaction was committed or rolled back.
func (pd *PhysicalDisk) Update() *PhysicalDiskUpdateOne {
	return NewPhysicalDiskClient(pd.config).UpdateOne(pd)
}

// Unwrap unwraps the PhysicalDisk entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pd *PhysicalDisk) Unwrap() *PhysicalDisk {
	_tx, ok := pd.config.driver.(*txDriver)
	if !ok {
		panic("ent: PhysicalDisk is not a transactional entity")
	}
	pd.config.driver = _tx.drv
	return pd
}

// String implements the fmt.Stringer.
func (pd *PhysicalDisk) String() string {
	var builder strings.Builder
	builder.WriteString("PhysicalDisk(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pd.ID))
	builder.WriteString("device_id=")
	builder.WriteString(pd.DeviceID)
	builder.WriteString(", ")
	builder.WriteString("model=")
	builder.WriteString(pd.Model)
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(pd.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("size_in_units=")
	builder.WriteString(pd.SizeInUnits)
	builder.WriteByte(')')
	return builder.String()
}

// PhysicalDisks is a parsable slice of PhysicalDisk.
type PhysicalDisks []*PhysicalDisk
