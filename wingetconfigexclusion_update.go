// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/agent"
	"github.com/ahmetkarakayaoffical/ent/predicate"
	"github.com/ahmetkarakayaoffical/ent/wingetconfigexclusion"
)

// WingetConfigExclusionUpdate is the builder for updating WingetConfigExclusion entities.
type WingetConfigExclusionUpdate struct {
	config
	hooks     []Hook
	mutation  *WingetConfigExclusionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the WingetConfigExclusionUpdate builder.
func (wceu *WingetConfigExclusionUpdate) Where(ps ...predicate.WingetConfigExclusion) *WingetConfigExclusionUpdate {
	wceu.mutation.Where(ps...)
	return wceu
}

// SetPackageID sets the "package_id" field.
func (wceu *WingetConfigExclusionUpdate) SetPackageID(s string) *WingetConfigExclusionUpdate {
	wceu.mutation.SetPackageID(s)
	return wceu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (wceu *WingetConfigExclusionUpdate) SetNillablePackageID(s *string) *WingetConfigExclusionUpdate {
	if s != nil {
		wceu.SetPackageID(*s)
	}
	return wceu
}

// SetWhen sets the "when" field.
func (wceu *WingetConfigExclusionUpdate) SetWhen(t time.Time) *WingetConfigExclusionUpdate {
	wceu.mutation.SetWhen(t)
	return wceu
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (wceu *WingetConfigExclusionUpdate) SetNillableWhen(t *time.Time) *WingetConfigExclusionUpdate {
	if t != nil {
		wceu.SetWhen(*t)
	}
	return wceu
}

// ClearWhen clears the value of the "when" field.
func (wceu *WingetConfigExclusionUpdate) ClearWhen() *WingetConfigExclusionUpdate {
	wceu.mutation.ClearWhen()
	return wceu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (wceu *WingetConfigExclusionUpdate) SetOwnerID(id string) *WingetConfigExclusionUpdate {
	wceu.mutation.SetOwnerID(id)
	return wceu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (wceu *WingetConfigExclusionUpdate) SetOwner(a *Agent) *WingetConfigExclusionUpdate {
	return wceu.SetOwnerID(a.ID)
}

// Mutation returns the WingetConfigExclusionMutation object of the builder.
func (wceu *WingetConfigExclusionUpdate) Mutation() *WingetConfigExclusionMutation {
	return wceu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (wceu *WingetConfigExclusionUpdate) ClearOwner() *WingetConfigExclusionUpdate {
	wceu.mutation.ClearOwner()
	return wceu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (wceu *WingetConfigExclusionUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, wceu.sqlSave, wceu.mutation, wceu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wceu *WingetConfigExclusionUpdate) SaveX(ctx context.Context) int {
	affected, err := wceu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (wceu *WingetConfigExclusionUpdate) Exec(ctx context.Context) error {
	_, err := wceu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wceu *WingetConfigExclusionUpdate) ExecX(ctx context.Context) {
	if err := wceu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wceu *WingetConfigExclusionUpdate) check() error {
	if wceu.mutation.OwnerCleared() && len(wceu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WingetConfigExclusion.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wceu *WingetConfigExclusionUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WingetConfigExclusionUpdate {
	wceu.modifiers = append(wceu.modifiers, modifiers...)
	return wceu
}

func (wceu *WingetConfigExclusionUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := wceu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(wingetconfigexclusion.Table, wingetconfigexclusion.Columns, sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt))
	if ps := wceu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wceu.mutation.PackageID(); ok {
		_spec.SetField(wingetconfigexclusion.FieldPackageID, field.TypeString, value)
	}
	if value, ok := wceu.mutation.When(); ok {
		_spec.SetField(wingetconfigexclusion.FieldWhen, field.TypeTime, value)
	}
	if wceu.mutation.WhenCleared() {
		_spec.ClearField(wingetconfigexclusion.FieldWhen, field.TypeTime)
	}
	if wceu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wingetconfigexclusion.OwnerTable,
			Columns: []string{wingetconfigexclusion.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wceu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wingetconfigexclusion.OwnerTable,
			Columns: []string{wingetconfigexclusion.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wceu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, wceu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wingetconfigexclusion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	wceu.mutation.done = true
	return n, nil
}

// WingetConfigExclusionUpdateOne is the builder for updating a single WingetConfigExclusion entity.
type WingetConfigExclusionUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *WingetConfigExclusionMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetPackageID sets the "package_id" field.
func (wceuo *WingetConfigExclusionUpdateOne) SetPackageID(s string) *WingetConfigExclusionUpdateOne {
	wceuo.mutation.SetPackageID(s)
	return wceuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (wceuo *WingetConfigExclusionUpdateOne) SetNillablePackageID(s *string) *WingetConfigExclusionUpdateOne {
	if s != nil {
		wceuo.SetPackageID(*s)
	}
	return wceuo
}

// SetWhen sets the "when" field.
func (wceuo *WingetConfigExclusionUpdateOne) SetWhen(t time.Time) *WingetConfigExclusionUpdateOne {
	wceuo.mutation.SetWhen(t)
	return wceuo
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (wceuo *WingetConfigExclusionUpdateOne) SetNillableWhen(t *time.Time) *WingetConfigExclusionUpdateOne {
	if t != nil {
		wceuo.SetWhen(*t)
	}
	return wceuo
}

// ClearWhen clears the value of the "when" field.
func (wceuo *WingetConfigExclusionUpdateOne) ClearWhen() *WingetConfigExclusionUpdateOne {
	wceuo.mutation.ClearWhen()
	return wceuo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (wceuo *WingetConfigExclusionUpdateOne) SetOwnerID(id string) *WingetConfigExclusionUpdateOne {
	wceuo.mutation.SetOwnerID(id)
	return wceuo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (wceuo *WingetConfigExclusionUpdateOne) SetOwner(a *Agent) *WingetConfigExclusionUpdateOne {
	return wceuo.SetOwnerID(a.ID)
}

// Mutation returns the WingetConfigExclusionMutation object of the builder.
func (wceuo *WingetConfigExclusionUpdateOne) Mutation() *WingetConfigExclusionMutation {
	return wceuo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (wceuo *WingetConfigExclusionUpdateOne) ClearOwner() *WingetConfigExclusionUpdateOne {
	wceuo.mutation.ClearOwner()
	return wceuo
}

// Where appends a list predicates to the WingetConfigExclusionUpdate builder.
func (wceuo *WingetConfigExclusionUpdateOne) Where(ps ...predicate.WingetConfigExclusion) *WingetConfigExclusionUpdateOne {
	wceuo.mutation.Where(ps...)
	return wceuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (wceuo *WingetConfigExclusionUpdateOne) Select(field string, fields ...string) *WingetConfigExclusionUpdateOne {
	wceuo.fields = append([]string{field}, fields...)
	return wceuo
}

// Save executes the query and returns the updated WingetConfigExclusion entity.
func (wceuo *WingetConfigExclusionUpdateOne) Save(ctx context.Context) (*WingetConfigExclusion, error) {
	return withHooks(ctx, wceuo.sqlSave, wceuo.mutation, wceuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (wceuo *WingetConfigExclusionUpdateOne) SaveX(ctx context.Context) *WingetConfigExclusion {
	node, err := wceuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (wceuo *WingetConfigExclusionUpdateOne) Exec(ctx context.Context) error {
	_, err := wceuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (wceuo *WingetConfigExclusionUpdateOne) ExecX(ctx context.Context) {
	if err := wceuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (wceuo *WingetConfigExclusionUpdateOne) check() error {
	if wceuo.mutation.OwnerCleared() && len(wceuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "WingetConfigExclusion.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (wceuo *WingetConfigExclusionUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *WingetConfigExclusionUpdateOne {
	wceuo.modifiers = append(wceuo.modifiers, modifiers...)
	return wceuo
}

func (wceuo *WingetConfigExclusionUpdateOne) sqlSave(ctx context.Context) (_node *WingetConfigExclusion, err error) {
	if err := wceuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(wingetconfigexclusion.Table, wingetconfigexclusion.Columns, sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt))
	id, ok := wceuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "WingetConfigExclusion.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := wceuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, wingetconfigexclusion.FieldID)
		for _, f := range fields {
			if !wingetconfigexclusion.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != wingetconfigexclusion.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := wceuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := wceuo.mutation.PackageID(); ok {
		_spec.SetField(wingetconfigexclusion.FieldPackageID, field.TypeString, value)
	}
	if value, ok := wceuo.mutation.When(); ok {
		_spec.SetField(wingetconfigexclusion.FieldWhen, field.TypeTime, value)
	}
	if wceuo.mutation.WhenCleared() {
		_spec.ClearField(wingetconfigexclusion.FieldWhen, field.TypeTime)
	}
	if wceuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wingetconfigexclusion.OwnerTable,
			Columns: []string{wingetconfigexclusion.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := wceuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   wingetconfigexclusion.OwnerTable,
			Columns: []string{wingetconfigexclusion.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(wceuo.modifiers...)
	_node = &WingetConfigExclusion{config: wceuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, wceuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{wingetconfigexclusion.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	wceuo.mutation.done = true
	return _node, nil
}
