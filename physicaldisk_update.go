// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/agent"
	"github.com/ahmetkarakayaoffical/ent/physicaldisk"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// PhysicalDiskUpdate is the builder for updating PhysicalDisk entities.
type PhysicalDiskUpdate struct {
	config
	hooks     []Hook
	mutation  *PhysicalDiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the PhysicalDiskUpdate builder.
func (pdu *PhysicalDiskUpdate) Where(ps ...predicate.PhysicalDisk) *PhysicalDiskUpdate {
	pdu.mutation.Where(ps...)
	return pdu
}

// SetDeviceID sets the "device_id" field.
func (pdu *PhysicalDiskUpdate) SetDeviceID(s string) *PhysicalDiskUpdate {
	pdu.mutation.SetDeviceID(s)
	return pdu
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (pdu *PhysicalDiskUpdate) SetNillableDeviceID(s *string) *PhysicalDiskUpdate {
	if s != nil {
		pdu.SetDeviceID(*s)
	}
	return pdu
}

// SetModel sets the "model" field.
func (pdu *PhysicalDiskUpdate) SetModel(s string) *PhysicalDiskUpdate {
	pdu.mutation.SetModel(s)
	return pdu
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pdu *PhysicalDiskUpdate) SetNillableModel(s *string) *PhysicalDiskUpdate {
	if s != nil {
		pdu.SetModel(*s)
	}
	return pdu
}

// ClearModel clears the value of the "model" field.
func (pdu *PhysicalDiskUpdate) ClearModel() *PhysicalDiskUpdate {
	pdu.mutation.ClearModel()
	return pdu
}

// SetSerialNumber sets the "serial_number" field.
func (pdu *PhysicalDiskUpdate) SetSerialNumber(s string) *PhysicalDiskUpdate {
	pdu.mutation.SetSerialNumber(s)
	return pdu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (pdu *PhysicalDiskUpdate) SetNillableSerialNumber(s *string) *PhysicalDiskUpdate {
	if s != nil {
		pdu.SetSerialNumber(*s)
	}
	return pdu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (pdu *PhysicalDiskUpdate) ClearSerialNumber() *PhysicalDiskUpdate {
	pdu.mutation.ClearSerialNumber()
	return pdu
}

// SetSizeInUnits sets the "size_in_units" field.
func (pdu *PhysicalDiskUpdate) SetSizeInUnits(s string) *PhysicalDiskUpdate {
	pdu.mutation.SetSizeInUnits(s)
	return pdu
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (pdu *PhysicalDiskUpdate) SetNillableSizeInUnits(s *string) *PhysicalDiskUpdate {
	if s != nil {
		pdu.SetSizeInUnits(*s)
	}
	return pdu
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (pdu *PhysicalDiskUpdate) ClearSizeInUnits() *PhysicalDiskUpdate {
	pdu.mutation.ClearSizeInUnits()
	return pdu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (pdu *PhysicalDiskUpdate) SetOwnerID(id string) *PhysicalDiskUpdate {
	pdu.mutation.SetOwnerID(id)
	return pdu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (pdu *PhysicalDiskUpdate) SetOwner(a *Agent) *PhysicalDiskUpdate {
	return pdu.SetOwnerID(a.ID)
}

// Mutation returns the PhysicalDiskMutation object of the builder.
func (pdu *PhysicalDiskUpdate) Mutation() *PhysicalDiskMutation {
	return pdu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (pdu *PhysicalDiskUpdate) ClearOwner() *PhysicalDiskUpdate {
	pdu.mutation.ClearOwner()
	return pdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pdu *PhysicalDiskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, pdu.sqlSave, pdu.mutation, pdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pdu *PhysicalDiskUpdate) SaveX(ctx context.Context) int {
	affected, err := pdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pdu *PhysicalDiskUpdate) Exec(ctx context.Context) error {
	_, err := pdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdu *PhysicalDiskUpdate) ExecX(ctx context.Context) {
	if err := pdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdu *PhysicalDiskUpdate) check() error {
	if pdu.mutation.OwnerCleared() && len(pdu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PhysicalDisk.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pdu *PhysicalDiskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PhysicalDiskUpdate {
	pdu.modifiers = append(pdu.modifiers, modifiers...)
	return pdu
}

func (pdu *PhysicalDiskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := pdu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(physicaldisk.Table, physicaldisk.Columns, sqlgraph.NewFieldSpec(physicaldisk.FieldID, field.TypeInt))
	if ps := pdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pdu.mutation.DeviceID(); ok {
		_spec.SetField(physicaldisk.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := pdu.mutation.Model(); ok {
		_spec.SetField(physicaldisk.FieldModel, field.TypeString, value)
	}
	if pdu.mutation.ModelCleared() {
		_spec.ClearField(physicaldisk.FieldModel, field.TypeString)
	}
	if value, ok := pdu.mutation.SerialNumber(); ok {
		_spec.SetField(physicaldisk.FieldSerialNumber, field.TypeString, value)
	}
	if pdu.mutation.SerialNumberCleared() {
		_spec.ClearField(physicaldisk.FieldSerialNumber, field.TypeString)
	}
	if value, ok := pdu.mutation.SizeInUnits(); ok {
		_spec.SetField(physicaldisk.FieldSizeInUnits, field.TypeString, value)
	}
	if pdu.mutation.SizeInUnitsCleared() {
		_spec.ClearField(physicaldisk.FieldSizeInUnits, field.TypeString)
	}
	if pdu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaldisk.OwnerTable,
			Columns: []string{physicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pdu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaldisk.OwnerTable,
			Columns: []string{physicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, pdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicaldisk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	pdu.mutation.done = true
	return n, nil
}

// PhysicalDiskUpdateOne is the builder for updating a single PhysicalDisk entity.
type PhysicalDiskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *PhysicalDiskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDeviceID sets the "device_id" field.
func (pduo *PhysicalDiskUpdateOne) SetDeviceID(s string) *PhysicalDiskUpdateOne {
	pduo.mutation.SetDeviceID(s)
	return pduo
}

// SetNillableDeviceID sets the "device_id" field if the given value is not nil.
func (pduo *PhysicalDiskUpdateOne) SetNillableDeviceID(s *string) *PhysicalDiskUpdateOne {
	if s != nil {
		pduo.SetDeviceID(*s)
	}
	return pduo
}

// SetModel sets the "model" field.
func (pduo *PhysicalDiskUpdateOne) SetModel(s string) *PhysicalDiskUpdateOne {
	pduo.mutation.SetModel(s)
	return pduo
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pduo *PhysicalDiskUpdateOne) SetNillableModel(s *string) *PhysicalDiskUpdateOne {
	if s != nil {
		pduo.SetModel(*s)
	}
	return pduo
}

// ClearModel clears the value of the "model" field.
func (pduo *PhysicalDiskUpdateOne) ClearModel() *PhysicalDiskUpdateOne {
	pduo.mutation.ClearModel()
	return pduo
}

// SetSerialNumber sets the "serial_number" field.
func (pduo *PhysicalDiskUpdateOne) SetSerialNumber(s string) *PhysicalDiskUpdateOne {
	pduo.mutation.SetSerialNumber(s)
	return pduo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (pduo *PhysicalDiskUpdateOne) SetNillableSerialNumber(s *string) *PhysicalDiskUpdateOne {
	if s != nil {
		pduo.SetSerialNumber(*s)
	}
	return pduo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (pduo *PhysicalDiskUpdateOne) ClearSerialNumber() *PhysicalDiskUpdateOne {
	pduo.mutation.ClearSerialNumber()
	return pduo
}

// SetSizeInUnits sets the "size_in_units" field.
func (pduo *PhysicalDiskUpdateOne) SetSizeInUnits(s string) *PhysicalDiskUpdateOne {
	pduo.mutation.SetSizeInUnits(s)
	return pduo
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (pduo *PhysicalDiskUpdateOne) SetNillableSizeInUnits(s *string) *PhysicalDiskUpdateOne {
	if s != nil {
		pduo.SetSizeInUnits(*s)
	}
	return pduo
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (pduo *PhysicalDiskUpdateOne) ClearSizeInUnits() *PhysicalDiskUpdateOne {
	pduo.mutation.ClearSizeInUnits()
	return pduo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (pduo *PhysicalDiskUpdateOne) SetOwnerID(id string) *PhysicalDiskUpdateOne {
	pduo.mutation.SetOwnerID(id)
	return pduo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (pduo *PhysicalDiskUpdateOne) SetOwner(a *Agent) *PhysicalDiskUpdateOne {
	return pduo.SetOwnerID(a.ID)
}

// Mutation returns the PhysicalDiskMutation object of the builder.
func (pduo *PhysicalDiskUpdateOne) Mutation() *PhysicalDiskMutation {
	return pduo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (pduo *PhysicalDiskUpdateOne) ClearOwner() *PhysicalDiskUpdateOne {
	pduo.mutation.ClearOwner()
	return pduo
}

// Where appends a list predicates to the PhysicalDiskUpdate builder.
func (pduo *PhysicalDiskUpdateOne) Where(ps ...predicate.PhysicalDisk) *PhysicalDiskUpdateOne {
	pduo.mutation.Where(ps...)
	return pduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pduo *PhysicalDiskUpdateOne) Select(field string, fields ...string) *PhysicalDiskUpdateOne {
	pduo.fields = append([]string{field}, fields...)
	return pduo
}

// Save executes the query and returns the updated PhysicalDisk entity.
func (pduo *PhysicalDiskUpdateOne) Save(ctx context.Context) (*PhysicalDisk, error) {
	return withHooks(ctx, pduo.sqlSave, pduo.mutation, pduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (pduo *PhysicalDiskUpdateOne) SaveX(ctx context.Context) *PhysicalDisk {
	node, err := pduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pduo *PhysicalDiskUpdateOne) Exec(ctx context.Context) error {
	_, err := pduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pduo *PhysicalDiskUpdateOne) ExecX(ctx context.Context) {
	if err := pduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pduo *PhysicalDiskUpdateOne) check() error {
	if pduo.mutation.OwnerCleared() && len(pduo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "PhysicalDisk.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (pduo *PhysicalDiskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *PhysicalDiskUpdateOne {
	pduo.modifiers = append(pduo.modifiers, modifiers...)
	return pduo
}

func (pduo *PhysicalDiskUpdateOne) sqlSave(ctx context.Context) (_node *PhysicalDisk, err error) {
	if err := pduo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(physicaldisk.Table, physicaldisk.Columns, sqlgraph.NewFieldSpec(physicaldisk.FieldID, field.TypeInt))
	id, ok := pduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "PhysicalDisk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := pduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, physicaldisk.FieldID)
		for _, f := range fields {
			if !physicaldisk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != physicaldisk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pduo.mutation.DeviceID(); ok {
		_spec.SetField(physicaldisk.FieldDeviceID, field.TypeString, value)
	}
	if value, ok := pduo.mutation.Model(); ok {
		_spec.SetField(physicaldisk.FieldModel, field.TypeString, value)
	}
	if pduo.mutation.ModelCleared() {
		_spec.ClearField(physicaldisk.FieldModel, field.TypeString)
	}
	if value, ok := pduo.mutation.SerialNumber(); ok {
		_spec.SetField(physicaldisk.FieldSerialNumber, field.TypeString, value)
	}
	if pduo.mutation.SerialNumberCleared() {
		_spec.ClearField(physicaldisk.FieldSerialNumber, field.TypeString)
	}
	if value, ok := pduo.mutation.SizeInUnits(); ok {
		_spec.SetField(physicaldisk.FieldSizeInUnits, field.TypeString, value)
	}
	if pduo.mutation.SizeInUnitsCleared() {
		_spec.ClearField(physicaldisk.FieldSizeInUnits, field.TypeString)
	}
	if pduo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaldisk.OwnerTable,
			Columns: []string{physicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := pduo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaldisk.OwnerTable,
			Columns: []string{physicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(pduo.modifiers...)
	_node = &PhysicalDisk{config: pduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{physicaldisk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	pduo.mutation.done = true
	return _node, nil
}
