// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/authentication"
)

// AuthenticationCreate is the builder for creating a Authentication entity.
type AuthenticationCreate struct {
	config
	mutation *AuthenticationMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetUseCertificates sets the "use_certificates" field.
func (ac *AuthenticationCreate) SetUseCertificates(b bool) *AuthenticationCreate {
	ac.mutation.SetUseCertificates(b)
	return ac
}

// SetNillableUseCertificates sets the "use_certificates" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableUseCertificates(b *bool) *AuthenticationCreate {
	if b != nil {
		ac.SetUseCertificates(*b)
	}
	return ac
}

// SetAllowRegister sets the "allow_register" field.
func (ac *AuthenticationCreate) SetAllowRegister(b bool) *AuthenticationCreate {
	ac.mutation.SetAllowRegister(b)
	return ac
}

// SetNillableAllowRegister sets the "allow_register" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableAllowRegister(b *bool) *AuthenticationCreate {
	if b != nil {
		ac.SetAllowRegister(*b)
	}
	return ac
}

// SetUseOIDC sets the "use_OIDC" field.
func (ac *AuthenticationCreate) SetUseOIDC(b bool) *AuthenticationCreate {
	ac.mutation.SetUseOIDC(b)
	return ac
}

// SetNillableUseOIDC sets the "use_OIDC" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableUseOIDC(b *bool) *AuthenticationCreate {
	if b != nil {
		ac.SetUseOIDC(*b)
	}
	return ac
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (ac *AuthenticationCreate) SetOIDCProvider(ap authentication.OIDCProvider) *AuthenticationCreate {
	ac.mutation.SetOIDCProvider(ap)
	return ac
}

// SetNillableOIDCProvider sets the "OIDC_provider" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCProvider(ap *authentication.OIDCProvider) *AuthenticationCreate {
	if ap != nil {
		ac.SetOIDCProvider(*ap)
	}
	return ac
}

// SetOIDCServer sets the "OIDC_server" field.
func (ac *AuthenticationCreate) SetOIDCServer(s string) *AuthenticationCreate {
	ac.mutation.SetOIDCServer(s)
	return ac
}

// SetNillableOIDCServer sets the "OIDC_server" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCServer(s *string) *AuthenticationCreate {
	if s != nil {
		ac.SetOIDCServer(*s)
	}
	return ac
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (ac *AuthenticationCreate) SetOIDCClientID(s string) *AuthenticationCreate {
	ac.mutation.SetOIDCClientID(s)
	return ac
}

// SetNillableOIDCClientID sets the "OIDC_client_id" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCClientID(s *string) *AuthenticationCreate {
	if s != nil {
		ac.SetOIDCClientID(*s)
	}
	return ac
}

// SetOIDCRole sets the "OIDC_role" field.
func (ac *AuthenticationCreate) SetOIDCRole(s string) *AuthenticationCreate {
	ac.mutation.SetOIDCRole(s)
	return ac
}

// SetNillableOIDCRole sets the "OIDC_role" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCRole(s *string) *AuthenticationCreate {
	if s != nil {
		ac.SetOIDCRole(*s)
	}
	return ac
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (ac *AuthenticationCreate) SetOIDCCookieEncriptionKey(s string) *AuthenticationCreate {
	ac.mutation.SetOIDCCookieEncriptionKey(s)
	return ac
}

// SetNillableOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCCookieEncriptionKey(s *string) *AuthenticationCreate {
	if s != nil {
		ac.SetOIDCCookieEncriptionKey(*s)
	}
	return ac
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (ac *AuthenticationCreate) SetOIDCKeycloakPublicKey(s string) *AuthenticationCreate {
	ac.mutation.SetOIDCKeycloakPublicKey(s)
	return ac
}

// SetNillableOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCKeycloakPublicKey(s *string) *AuthenticationCreate {
	if s != nil {
		ac.SetOIDCKeycloakPublicKey(*s)
	}
	return ac
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (ac *AuthenticationCreate) SetOIDCAutoCreateAccount(b bool) *AuthenticationCreate {
	ac.mutation.SetOIDCAutoCreateAccount(b)
	return ac
}

// SetNillableOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCAutoCreateAccount(b *bool) *AuthenticationCreate {
	if b != nil {
		ac.SetOIDCAutoCreateAccount(*b)
	}
	return ac
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (ac *AuthenticationCreate) SetOIDCAutoApprove(b bool) *AuthenticationCreate {
	ac.mutation.SetOIDCAutoApprove(b)
	return ac
}

// SetNillableOIDCAutoApprove sets the "OIDC_auto_approve" field if the given value is not nil.
func (ac *AuthenticationCreate) SetNillableOIDCAutoApprove(b *bool) *AuthenticationCreate {
	if b != nil {
		ac.SetOIDCAutoApprove(*b)
	}
	return ac
}

// Mutation returns the AuthenticationMutation object of the builder.
func (ac *AuthenticationCreate) Mutation() *AuthenticationMutation {
	return ac.mutation
}

// Save creates the Authentication in the database.
func (ac *AuthenticationCreate) Save(ctx context.Context) (*Authentication, error) {
	ac.defaults()
	return withHooks(ctx, ac.sqlSave, ac.mutation, ac.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (ac *AuthenticationCreate) SaveX(ctx context.Context) *Authentication {
	v, err := ac.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (ac *AuthenticationCreate) Exec(ctx context.Context) error {
	_, err := ac.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ac *AuthenticationCreate) ExecX(ctx context.Context) {
	if err := ac.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (ac *AuthenticationCreate) defaults() {
	if _, ok := ac.mutation.UseCertificates(); !ok {
		v := authentication.DefaultUseCertificates
		ac.mutation.SetUseCertificates(v)
	}
	if _, ok := ac.mutation.AllowRegister(); !ok {
		v := authentication.DefaultAllowRegister
		ac.mutation.SetAllowRegister(v)
	}
	if _, ok := ac.mutation.UseOIDC(); !ok {
		v := authentication.DefaultUseOIDC
		ac.mutation.SetUseOIDC(v)
	}
	if _, ok := ac.mutation.OIDCServer(); !ok {
		v := authentication.DefaultOIDCServer
		ac.mutation.SetOIDCServer(v)
	}
	if _, ok := ac.mutation.OIDCClientID(); !ok {
		v := authentication.DefaultOIDCClientID
		ac.mutation.SetOIDCClientID(v)
	}
	if _, ok := ac.mutation.OIDCRole(); !ok {
		v := authentication.DefaultOIDCRole
		ac.mutation.SetOIDCRole(v)
	}
	if _, ok := ac.mutation.OIDCCookieEncriptionKey(); !ok {
		v := authentication.DefaultOIDCCookieEncriptionKey
		ac.mutation.SetOIDCCookieEncriptionKey(v)
	}
	if _, ok := ac.mutation.OIDCKeycloakPublicKey(); !ok {
		v := authentication.DefaultOIDCKeycloakPublicKey
		ac.mutation.SetOIDCKeycloakPublicKey(v)
	}
	if _, ok := ac.mutation.OIDCAutoCreateAccount(); !ok {
		v := authentication.DefaultOIDCAutoCreateAccount
		ac.mutation.SetOIDCAutoCreateAccount(v)
	}
	if _, ok := ac.mutation.OIDCAutoApprove(); !ok {
		v := authentication.DefaultOIDCAutoApprove
		ac.mutation.SetOIDCAutoApprove(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (ac *AuthenticationCreate) check() error {
	if v, ok := ac.mutation.OIDCProvider(); ok {
		if err := authentication.OIDCProviderValidator(v); err != nil {
			return &ValidationError{Name: "OIDC_provider", err: fmt.Errorf(`ent: validator failed for field "Authentication.OIDC_provider": %w`, err)}
		}
	}
	return nil
}

func (ac *AuthenticationCreate) sqlSave(ctx context.Context) (*Authentication, error) {
	if err := ac.check(); err != nil {
		return nil, err
	}
	_node, _spec := ac.createSpec()
	if err := sqlgraph.CreateNode(ctx, ac.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	ac.mutation.id = &_node.ID
	ac.mutation.done = true
	return _node, nil
}

func (ac *AuthenticationCreate) createSpec() (*Authentication, *sqlgraph.CreateSpec) {
	var (
		_node = &Authentication{config: ac.config}
		_spec = sqlgraph.NewCreateSpec(authentication.Table, sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeInt))
	)
	_spec.OnConflict = ac.conflict
	if value, ok := ac.mutation.UseCertificates(); ok {
		_spec.SetField(authentication.FieldUseCertificates, field.TypeBool, value)
		_node.UseCertificates = value
	}
	if value, ok := ac.mutation.AllowRegister(); ok {
		_spec.SetField(authentication.FieldAllowRegister, field.TypeBool, value)
		_node.AllowRegister = value
	}
	if value, ok := ac.mutation.UseOIDC(); ok {
		_spec.SetField(authentication.FieldUseOIDC, field.TypeBool, value)
		_node.UseOIDC = value
	}
	if value, ok := ac.mutation.OIDCProvider(); ok {
		_spec.SetField(authentication.FieldOIDCProvider, field.TypeEnum, value)
		_node.OIDCProvider = value
	}
	if value, ok := ac.mutation.OIDCServer(); ok {
		_spec.SetField(authentication.FieldOIDCServer, field.TypeString, value)
		_node.OIDCServer = value
	}
	if value, ok := ac.mutation.OIDCClientID(); ok {
		_spec.SetField(authentication.FieldOIDCClientID, field.TypeString, value)
		_node.OIDCClientID = value
	}
	if value, ok := ac.mutation.OIDCRole(); ok {
		_spec.SetField(authentication.FieldOIDCRole, field.TypeString, value)
		_node.OIDCRole = value
	}
	if value, ok := ac.mutation.OIDCCookieEncriptionKey(); ok {
		_spec.SetField(authentication.FieldOIDCCookieEncriptionKey, field.TypeString, value)
		_node.OIDCCookieEncriptionKey = value
	}
	if value, ok := ac.mutation.OIDCKeycloakPublicKey(); ok {
		_spec.SetField(authentication.FieldOIDCKeycloakPublicKey, field.TypeString, value)
		_node.OIDCKeycloakPublicKey = value
	}
	if value, ok := ac.mutation.OIDCAutoCreateAccount(); ok {
		_spec.SetField(authentication.FieldOIDCAutoCreateAccount, field.TypeBool, value)
		_node.OIDCAutoCreateAccount = value
	}
	if value, ok := ac.mutation.OIDCAutoApprove(); ok {
		_spec.SetField(authentication.FieldOIDCAutoApprove, field.TypeBool, value)
		_node.OIDCAutoApprove = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Authentication.Create().
//		SetUseCertificates(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthenticationUpsert) {
//			SetUseCertificates(v+v).
//		}).
//		Exec(ctx)
func (ac *AuthenticationCreate) OnConflict(opts ...sql.ConflictOption) *AuthenticationUpsertOne {
	ac.conflict = opts
	return &AuthenticationUpsertOne{
		create: ac,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Authentication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (ac *AuthenticationCreate) OnConflictColumns(columns ...string) *AuthenticationUpsertOne {
	ac.conflict = append(ac.conflict, sql.ConflictColumns(columns...))
	return &AuthenticationUpsertOne{
		create: ac,
	}
}

type (
	// AuthenticationUpsertOne is the builder for "upsert"-ing
	//  one Authentication node.
	AuthenticationUpsertOne struct {
		create *AuthenticationCreate
	}

	// AuthenticationUpsert is the "OnConflict" setter.
	AuthenticationUpsert struct {
		*sql.UpdateSet
	}
)

// SetUseCertificates sets the "use_certificates" field.
func (u *AuthenticationUpsert) SetUseCertificates(v bool) *AuthenticationUpsert {
	u.Set(authentication.FieldUseCertificates, v)
	return u
}

// UpdateUseCertificates sets the "use_certificates" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateUseCertificates() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldUseCertificates)
	return u
}

// ClearUseCertificates clears the value of the "use_certificates" field.
func (u *AuthenticationUpsert) ClearUseCertificates() *AuthenticationUpsert {
	u.SetNull(authentication.FieldUseCertificates)
	return u
}

// SetAllowRegister sets the "allow_register" field.
func (u *AuthenticationUpsert) SetAllowRegister(v bool) *AuthenticationUpsert {
	u.Set(authentication.FieldAllowRegister, v)
	return u
}

// UpdateAllowRegister sets the "allow_register" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateAllowRegister() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldAllowRegister)
	return u
}

// ClearAllowRegister clears the value of the "allow_register" field.
func (u *AuthenticationUpsert) ClearAllowRegister() *AuthenticationUpsert {
	u.SetNull(authentication.FieldAllowRegister)
	return u
}

// SetUseOIDC sets the "use_OIDC" field.
func (u *AuthenticationUpsert) SetUseOIDC(v bool) *AuthenticationUpsert {
	u.Set(authentication.FieldUseOIDC, v)
	return u
}

// UpdateUseOIDC sets the "use_OIDC" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateUseOIDC() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldUseOIDC)
	return u
}

// ClearUseOIDC clears the value of the "use_OIDC" field.
func (u *AuthenticationUpsert) ClearUseOIDC() *AuthenticationUpsert {
	u.SetNull(authentication.FieldUseOIDC)
	return u
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (u *AuthenticationUpsert) SetOIDCProvider(v authentication.OIDCProvider) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCProvider, v)
	return u
}

// UpdateOIDCProvider sets the "OIDC_provider" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCProvider() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCProvider)
	return u
}

// ClearOIDCProvider clears the value of the "OIDC_provider" field.
func (u *AuthenticationUpsert) ClearOIDCProvider() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCProvider)
	return u
}

// SetOIDCServer sets the "OIDC_server" field.
func (u *AuthenticationUpsert) SetOIDCServer(v string) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCServer, v)
	return u
}

// UpdateOIDCServer sets the "OIDC_server" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCServer() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCServer)
	return u
}

// ClearOIDCServer clears the value of the "OIDC_server" field.
func (u *AuthenticationUpsert) ClearOIDCServer() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCServer)
	return u
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (u *AuthenticationUpsert) SetOIDCClientID(v string) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCClientID, v)
	return u
}

// UpdateOIDCClientID sets the "OIDC_client_id" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCClientID() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCClientID)
	return u
}

// ClearOIDCClientID clears the value of the "OIDC_client_id" field.
func (u *AuthenticationUpsert) ClearOIDCClientID() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCClientID)
	return u
}

// SetOIDCRole sets the "OIDC_role" field.
func (u *AuthenticationUpsert) SetOIDCRole(v string) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCRole, v)
	return u
}

// UpdateOIDCRole sets the "OIDC_role" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCRole() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCRole)
	return u
}

// ClearOIDCRole clears the value of the "OIDC_role" field.
func (u *AuthenticationUpsert) ClearOIDCRole() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCRole)
	return u
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsert) SetOIDCCookieEncriptionKey(v string) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCCookieEncriptionKey, v)
	return u
}

// UpdateOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCCookieEncriptionKey() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCCookieEncriptionKey)
	return u
}

// ClearOIDCCookieEncriptionKey clears the value of the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsert) ClearOIDCCookieEncriptionKey() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCCookieEncriptionKey)
	return u
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsert) SetOIDCKeycloakPublicKey(v string) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCKeycloakPublicKey, v)
	return u
}

// UpdateOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCKeycloakPublicKey() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCKeycloakPublicKey)
	return u
}

// ClearOIDCKeycloakPublicKey clears the value of the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsert) ClearOIDCKeycloakPublicKey() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCKeycloakPublicKey)
	return u
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsert) SetOIDCAutoCreateAccount(v bool) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCAutoCreateAccount, v)
	return u
}

// UpdateOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCAutoCreateAccount() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCAutoCreateAccount)
	return u
}

// ClearOIDCAutoCreateAccount clears the value of the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsert) ClearOIDCAutoCreateAccount() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCAutoCreateAccount)
	return u
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (u *AuthenticationUpsert) SetOIDCAutoApprove(v bool) *AuthenticationUpsert {
	u.Set(authentication.FieldOIDCAutoApprove, v)
	return u
}

// UpdateOIDCAutoApprove sets the "OIDC_auto_approve" field to the value that was provided on create.
func (u *AuthenticationUpsert) UpdateOIDCAutoApprove() *AuthenticationUpsert {
	u.SetExcluded(authentication.FieldOIDCAutoApprove)
	return u
}

// ClearOIDCAutoApprove clears the value of the "OIDC_auto_approve" field.
func (u *AuthenticationUpsert) ClearOIDCAutoApprove() *AuthenticationUpsert {
	u.SetNull(authentication.FieldOIDCAutoApprove)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Authentication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AuthenticationUpsertOne) UpdateNewValues() *AuthenticationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Authentication.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *AuthenticationUpsertOne) Ignore() *AuthenticationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthenticationUpsertOne) DoNothing() *AuthenticationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthenticationCreate.OnConflict
// documentation for more info.
func (u *AuthenticationUpsertOne) Update(set func(*AuthenticationUpsert)) *AuthenticationUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthenticationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUseCertificates sets the "use_certificates" field.
func (u *AuthenticationUpsertOne) SetUseCertificates(v bool) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetUseCertificates(v)
	})
}

// UpdateUseCertificates sets the "use_certificates" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateUseCertificates() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateUseCertificates()
	})
}

// ClearUseCertificates clears the value of the "use_certificates" field.
func (u *AuthenticationUpsertOne) ClearUseCertificates() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearUseCertificates()
	})
}

// SetAllowRegister sets the "allow_register" field.
func (u *AuthenticationUpsertOne) SetAllowRegister(v bool) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetAllowRegister(v)
	})
}

// UpdateAllowRegister sets the "allow_register" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateAllowRegister() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateAllowRegister()
	})
}

// ClearAllowRegister clears the value of the "allow_register" field.
func (u *AuthenticationUpsertOne) ClearAllowRegister() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearAllowRegister()
	})
}

// SetUseOIDC sets the "use_OIDC" field.
func (u *AuthenticationUpsertOne) SetUseOIDC(v bool) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetUseOIDC(v)
	})
}

// UpdateUseOIDC sets the "use_OIDC" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateUseOIDC() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateUseOIDC()
	})
}

// ClearUseOIDC clears the value of the "use_OIDC" field.
func (u *AuthenticationUpsertOne) ClearUseOIDC() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearUseOIDC()
	})
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (u *AuthenticationUpsertOne) SetOIDCProvider(v authentication.OIDCProvider) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCProvider(v)
	})
}

// UpdateOIDCProvider sets the "OIDC_provider" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCProvider() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCProvider()
	})
}

// ClearOIDCProvider clears the value of the "OIDC_provider" field.
func (u *AuthenticationUpsertOne) ClearOIDCProvider() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCProvider()
	})
}

// SetOIDCServer sets the "OIDC_server" field.
func (u *AuthenticationUpsertOne) SetOIDCServer(v string) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCServer(v)
	})
}

// UpdateOIDCServer sets the "OIDC_server" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCServer() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCServer()
	})
}

// ClearOIDCServer clears the value of the "OIDC_server" field.
func (u *AuthenticationUpsertOne) ClearOIDCServer() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCServer()
	})
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (u *AuthenticationUpsertOne) SetOIDCClientID(v string) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCClientID(v)
	})
}

// UpdateOIDCClientID sets the "OIDC_client_id" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCClientID() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCClientID()
	})
}

// ClearOIDCClientID clears the value of the "OIDC_client_id" field.
func (u *AuthenticationUpsertOne) ClearOIDCClientID() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCClientID()
	})
}

// SetOIDCRole sets the "OIDC_role" field.
func (u *AuthenticationUpsertOne) SetOIDCRole(v string) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCRole(v)
	})
}

// UpdateOIDCRole sets the "OIDC_role" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCRole() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCRole()
	})
}

// ClearOIDCRole clears the value of the "OIDC_role" field.
func (u *AuthenticationUpsertOne) ClearOIDCRole() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCRole()
	})
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsertOne) SetOIDCCookieEncriptionKey(v string) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCCookieEncriptionKey(v)
	})
}

// UpdateOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCCookieEncriptionKey() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCCookieEncriptionKey()
	})
}

// ClearOIDCCookieEncriptionKey clears the value of the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsertOne) ClearOIDCCookieEncriptionKey() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCCookieEncriptionKey()
	})
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsertOne) SetOIDCKeycloakPublicKey(v string) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCKeycloakPublicKey(v)
	})
}

// UpdateOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCKeycloakPublicKey() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCKeycloakPublicKey()
	})
}

// ClearOIDCKeycloakPublicKey clears the value of the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsertOne) ClearOIDCKeycloakPublicKey() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCKeycloakPublicKey()
	})
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsertOne) SetOIDCAutoCreateAccount(v bool) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCAutoCreateAccount(v)
	})
}

// UpdateOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCAutoCreateAccount() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCAutoCreateAccount()
	})
}

// ClearOIDCAutoCreateAccount clears the value of the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsertOne) ClearOIDCAutoCreateAccount() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCAutoCreateAccount()
	})
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (u *AuthenticationUpsertOne) SetOIDCAutoApprove(v bool) *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCAutoApprove(v)
	})
}

// UpdateOIDCAutoApprove sets the "OIDC_auto_approve" field to the value that was provided on create.
func (u *AuthenticationUpsertOne) UpdateOIDCAutoApprove() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCAutoApprove()
	})
}

// ClearOIDCAutoApprove clears the value of the "OIDC_auto_approve" field.
func (u *AuthenticationUpsertOne) ClearOIDCAutoApprove() *AuthenticationUpsertOne {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCAutoApprove()
	})
}

// Exec executes the query.
func (u *AuthenticationUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthenticationCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthenticationUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *AuthenticationUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *AuthenticationUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// AuthenticationCreateBulk is the builder for creating many Authentication entities in bulk.
type AuthenticationCreateBulk struct {
	config
	err      error
	builders []*AuthenticationCreate
	conflict []sql.ConflictOption
}

// Save creates the Authentication entities in the database.
func (acb *AuthenticationCreateBulk) Save(ctx context.Context) ([]*Authentication, error) {
	if acb.err != nil {
		return nil, acb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(acb.builders))
	nodes := make([]*Authentication, len(acb.builders))
	mutators := make([]Mutator, len(acb.builders))
	for i := range acb.builders {
		func(i int, root context.Context) {
			builder := acb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*AuthenticationMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, acb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = acb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, acb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, acb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (acb *AuthenticationCreateBulk) SaveX(ctx context.Context) []*Authentication {
	v, err := acb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (acb *AuthenticationCreateBulk) Exec(ctx context.Context) error {
	_, err := acb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (acb *AuthenticationCreateBulk) ExecX(ctx context.Context) {
	if err := acb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Authentication.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.AuthenticationUpsert) {
//			SetUseCertificates(v+v).
//		}).
//		Exec(ctx)
func (acb *AuthenticationCreateBulk) OnConflict(opts ...sql.ConflictOption) *AuthenticationUpsertBulk {
	acb.conflict = opts
	return &AuthenticationUpsertBulk{
		create: acb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Authentication.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (acb *AuthenticationCreateBulk) OnConflictColumns(columns ...string) *AuthenticationUpsertBulk {
	acb.conflict = append(acb.conflict, sql.ConflictColumns(columns...))
	return &AuthenticationUpsertBulk{
		create: acb,
	}
}

// AuthenticationUpsertBulk is the builder for "upsert"-ing
// a bulk of Authentication nodes.
type AuthenticationUpsertBulk struct {
	create *AuthenticationCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Authentication.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *AuthenticationUpsertBulk) UpdateNewValues() *AuthenticationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Authentication.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *AuthenticationUpsertBulk) Ignore() *AuthenticationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *AuthenticationUpsertBulk) DoNothing() *AuthenticationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the AuthenticationCreateBulk.OnConflict
// documentation for more info.
func (u *AuthenticationUpsertBulk) Update(set func(*AuthenticationUpsert)) *AuthenticationUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&AuthenticationUpsert{UpdateSet: update})
	}))
	return u
}

// SetUseCertificates sets the "use_certificates" field.
func (u *AuthenticationUpsertBulk) SetUseCertificates(v bool) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetUseCertificates(v)
	})
}

// UpdateUseCertificates sets the "use_certificates" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateUseCertificates() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateUseCertificates()
	})
}

// ClearUseCertificates clears the value of the "use_certificates" field.
func (u *AuthenticationUpsertBulk) ClearUseCertificates() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearUseCertificates()
	})
}

// SetAllowRegister sets the "allow_register" field.
func (u *AuthenticationUpsertBulk) SetAllowRegister(v bool) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetAllowRegister(v)
	})
}

// UpdateAllowRegister sets the "allow_register" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateAllowRegister() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateAllowRegister()
	})
}

// ClearAllowRegister clears the value of the "allow_register" field.
func (u *AuthenticationUpsertBulk) ClearAllowRegister() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearAllowRegister()
	})
}

// SetUseOIDC sets the "use_OIDC" field.
func (u *AuthenticationUpsertBulk) SetUseOIDC(v bool) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetUseOIDC(v)
	})
}

// UpdateUseOIDC sets the "use_OIDC" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateUseOIDC() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateUseOIDC()
	})
}

// ClearUseOIDC clears the value of the "use_OIDC" field.
func (u *AuthenticationUpsertBulk) ClearUseOIDC() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearUseOIDC()
	})
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (u *AuthenticationUpsertBulk) SetOIDCProvider(v authentication.OIDCProvider) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCProvider(v)
	})
}

// UpdateOIDCProvider sets the "OIDC_provider" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCProvider() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCProvider()
	})
}

// ClearOIDCProvider clears the value of the "OIDC_provider" field.
func (u *AuthenticationUpsertBulk) ClearOIDCProvider() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCProvider()
	})
}

// SetOIDCServer sets the "OIDC_server" field.
func (u *AuthenticationUpsertBulk) SetOIDCServer(v string) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCServer(v)
	})
}

// UpdateOIDCServer sets the "OIDC_server" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCServer() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCServer()
	})
}

// ClearOIDCServer clears the value of the "OIDC_server" field.
func (u *AuthenticationUpsertBulk) ClearOIDCServer() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCServer()
	})
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (u *AuthenticationUpsertBulk) SetOIDCClientID(v string) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCClientID(v)
	})
}

// UpdateOIDCClientID sets the "OIDC_client_id" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCClientID() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCClientID()
	})
}

// ClearOIDCClientID clears the value of the "OIDC_client_id" field.
func (u *AuthenticationUpsertBulk) ClearOIDCClientID() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCClientID()
	})
}

// SetOIDCRole sets the "OIDC_role" field.
func (u *AuthenticationUpsertBulk) SetOIDCRole(v string) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCRole(v)
	})
}

// UpdateOIDCRole sets the "OIDC_role" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCRole() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCRole()
	})
}

// ClearOIDCRole clears the value of the "OIDC_role" field.
func (u *AuthenticationUpsertBulk) ClearOIDCRole() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCRole()
	})
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsertBulk) SetOIDCCookieEncriptionKey(v string) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCCookieEncriptionKey(v)
	})
}

// UpdateOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCCookieEncriptionKey() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCCookieEncriptionKey()
	})
}

// ClearOIDCCookieEncriptionKey clears the value of the "OIDC_cookie_encription_key" field.
func (u *AuthenticationUpsertBulk) ClearOIDCCookieEncriptionKey() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCCookieEncriptionKey()
	})
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsertBulk) SetOIDCKeycloakPublicKey(v string) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCKeycloakPublicKey(v)
	})
}

// UpdateOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCKeycloakPublicKey() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCKeycloakPublicKey()
	})
}

// ClearOIDCKeycloakPublicKey clears the value of the "OIDC_keycloak_public_key" field.
func (u *AuthenticationUpsertBulk) ClearOIDCKeycloakPublicKey() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCKeycloakPublicKey()
	})
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsertBulk) SetOIDCAutoCreateAccount(v bool) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCAutoCreateAccount(v)
	})
}

// UpdateOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCAutoCreateAccount() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCAutoCreateAccount()
	})
}

// ClearOIDCAutoCreateAccount clears the value of the "OIDC_auto_create_account" field.
func (u *AuthenticationUpsertBulk) ClearOIDCAutoCreateAccount() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCAutoCreateAccount()
	})
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (u *AuthenticationUpsertBulk) SetOIDCAutoApprove(v bool) *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.SetOIDCAutoApprove(v)
	})
}

// UpdateOIDCAutoApprove sets the "OIDC_auto_approve" field to the value that was provided on create.
func (u *AuthenticationUpsertBulk) UpdateOIDCAutoApprove() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.UpdateOIDCAutoApprove()
	})
}

// ClearOIDCAutoApprove clears the value of the "OIDC_auto_approve" field.
func (u *AuthenticationUpsertBulk) ClearOIDCAutoApprove() *AuthenticationUpsertBulk {
	return u.Update(func(s *AuthenticationUpsert) {
		s.ClearOIDCAutoApprove()
	})
}

// Exec executes the query.
func (u *AuthenticationUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the AuthenticationCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for AuthenticationCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *AuthenticationUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
