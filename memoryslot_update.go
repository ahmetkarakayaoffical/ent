// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/memoryslot"
	"github.com/open-uem/ent/predicate"
)

// MemorySlotUpdate is the builder for updating MemorySlot entities.
type MemorySlotUpdate struct {
	config
	hooks     []Hook
	mutation  *MemorySlotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the MemorySlotUpdate builder.
func (msu *MemorySlotUpdate) Where(ps ...predicate.MemorySlot) *MemorySlotUpdate {
	msu.mutation.Where(ps...)
	return msu
}

// SetSlot sets the "slot" field.
func (msu *MemorySlotUpdate) SetSlot(s string) *MemorySlotUpdate {
	msu.mutation.SetSlot(s)
	return msu
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableSlot(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetSlot(*s)
	}
	return msu
}

// ClearSlot clears the value of the "slot" field.
func (msu *MemorySlotUpdate) ClearSlot() *MemorySlotUpdate {
	msu.mutation.ClearSlot()
	return msu
}

// SetSize sets the "size" field.
func (msu *MemorySlotUpdate) SetSize(s string) *MemorySlotUpdate {
	msu.mutation.SetSize(s)
	return msu
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableSize(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetSize(*s)
	}
	return msu
}

// ClearSize clears the value of the "size" field.
func (msu *MemorySlotUpdate) ClearSize() *MemorySlotUpdate {
	msu.mutation.ClearSize()
	return msu
}

// SetType sets the "type" field.
func (msu *MemorySlotUpdate) SetType(s string) *MemorySlotUpdate {
	msu.mutation.SetType(s)
	return msu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableType(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetType(*s)
	}
	return msu
}

// ClearType clears the value of the "type" field.
func (msu *MemorySlotUpdate) ClearType() *MemorySlotUpdate {
	msu.mutation.ClearType()
	return msu
}

// SetSerialNumber sets the "serial_number" field.
func (msu *MemorySlotUpdate) SetSerialNumber(s string) *MemorySlotUpdate {
	msu.mutation.SetSerialNumber(s)
	return msu
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableSerialNumber(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetSerialNumber(*s)
	}
	return msu
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (msu *MemorySlotUpdate) ClearSerialNumber() *MemorySlotUpdate {
	msu.mutation.ClearSerialNumber()
	return msu
}

// SetPartNumber sets the "part_number" field.
func (msu *MemorySlotUpdate) SetPartNumber(s string) *MemorySlotUpdate {
	msu.mutation.SetPartNumber(s)
	return msu
}

// SetNillablePartNumber sets the "part_number" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillablePartNumber(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetPartNumber(*s)
	}
	return msu
}

// ClearPartNumber clears the value of the "part_number" field.
func (msu *MemorySlotUpdate) ClearPartNumber() *MemorySlotUpdate {
	msu.mutation.ClearPartNumber()
	return msu
}

// SetSpeed sets the "speed" field.
func (msu *MemorySlotUpdate) SetSpeed(s string) *MemorySlotUpdate {
	msu.mutation.SetSpeed(s)
	return msu
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableSpeed(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetSpeed(*s)
	}
	return msu
}

// ClearSpeed clears the value of the "speed" field.
func (msu *MemorySlotUpdate) ClearSpeed() *MemorySlotUpdate {
	msu.mutation.ClearSpeed()
	return msu
}

// SetManufacturer sets the "manufacturer" field.
func (msu *MemorySlotUpdate) SetManufacturer(s string) *MemorySlotUpdate {
	msu.mutation.SetManufacturer(s)
	return msu
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (msu *MemorySlotUpdate) SetNillableManufacturer(s *string) *MemorySlotUpdate {
	if s != nil {
		msu.SetManufacturer(*s)
	}
	return msu
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (msu *MemorySlotUpdate) ClearManufacturer() *MemorySlotUpdate {
	msu.mutation.ClearManufacturer()
	return msu
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (msu *MemorySlotUpdate) SetOwnerID(id string) *MemorySlotUpdate {
	msu.mutation.SetOwnerID(id)
	return msu
}

// SetOwner sets the "owner" edge to the Agent entity.
func (msu *MemorySlotUpdate) SetOwner(a *Agent) *MemorySlotUpdate {
	return msu.SetOwnerID(a.ID)
}

// Mutation returns the MemorySlotMutation object of the builder.
func (msu *MemorySlotUpdate) Mutation() *MemorySlotMutation {
	return msu.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (msu *MemorySlotUpdate) ClearOwner() *MemorySlotUpdate {
	msu.mutation.ClearOwner()
	return msu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (msu *MemorySlotUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, msu.sqlSave, msu.mutation, msu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msu *MemorySlotUpdate) SaveX(ctx context.Context) int {
	affected, err := msu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (msu *MemorySlotUpdate) Exec(ctx context.Context) error {
	_, err := msu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msu *MemorySlotUpdate) ExecX(ctx context.Context) {
	if err := msu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msu *MemorySlotUpdate) check() error {
	if msu.mutation.OwnerCleared() && len(msu.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MemorySlot.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msu *MemorySlotUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemorySlotUpdate {
	msu.modifiers = append(msu.modifiers, modifiers...)
	return msu
}

func (msu *MemorySlotUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := msu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(memoryslot.Table, memoryslot.Columns, sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt))
	if ps := msu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msu.mutation.Slot(); ok {
		_spec.SetField(memoryslot.FieldSlot, field.TypeString, value)
	}
	if msu.mutation.SlotCleared() {
		_spec.ClearField(memoryslot.FieldSlot, field.TypeString)
	}
	if value, ok := msu.mutation.Size(); ok {
		_spec.SetField(memoryslot.FieldSize, field.TypeString, value)
	}
	if msu.mutation.SizeCleared() {
		_spec.ClearField(memoryslot.FieldSize, field.TypeString)
	}
	if value, ok := msu.mutation.GetType(); ok {
		_spec.SetField(memoryslot.FieldType, field.TypeString, value)
	}
	if msu.mutation.TypeCleared() {
		_spec.ClearField(memoryslot.FieldType, field.TypeString)
	}
	if value, ok := msu.mutation.SerialNumber(); ok {
		_spec.SetField(memoryslot.FieldSerialNumber, field.TypeString, value)
	}
	if msu.mutation.SerialNumberCleared() {
		_spec.ClearField(memoryslot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := msu.mutation.PartNumber(); ok {
		_spec.SetField(memoryslot.FieldPartNumber, field.TypeString, value)
	}
	if msu.mutation.PartNumberCleared() {
		_spec.ClearField(memoryslot.FieldPartNumber, field.TypeString)
	}
	if value, ok := msu.mutation.Speed(); ok {
		_spec.SetField(memoryslot.FieldSpeed, field.TypeString, value)
	}
	if msu.mutation.SpeedCleared() {
		_spec.ClearField(memoryslot.FieldSpeed, field.TypeString)
	}
	if value, ok := msu.mutation.Manufacturer(); ok {
		_spec.SetField(memoryslot.FieldManufacturer, field.TypeString, value)
	}
	if msu.mutation.ManufacturerCleared() {
		_spec.ClearField(memoryslot.FieldManufacturer, field.TypeString)
	}
	if msu.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memoryslot.OwnerTable,
			Columns: []string{memoryslot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msu.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memoryslot.OwnerTable,
			Columns: []string{memoryslot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(msu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, msu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memoryslot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	msu.mutation.done = true
	return n, nil
}

// MemorySlotUpdateOne is the builder for updating a single MemorySlot entity.
type MemorySlotUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *MemorySlotMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetSlot sets the "slot" field.
func (msuo *MemorySlotUpdateOne) SetSlot(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetSlot(s)
	return msuo
}

// SetNillableSlot sets the "slot" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableSlot(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetSlot(*s)
	}
	return msuo
}

// ClearSlot clears the value of the "slot" field.
func (msuo *MemorySlotUpdateOne) ClearSlot() *MemorySlotUpdateOne {
	msuo.mutation.ClearSlot()
	return msuo
}

// SetSize sets the "size" field.
func (msuo *MemorySlotUpdateOne) SetSize(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetSize(s)
	return msuo
}

// SetNillableSize sets the "size" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableSize(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetSize(*s)
	}
	return msuo
}

// ClearSize clears the value of the "size" field.
func (msuo *MemorySlotUpdateOne) ClearSize() *MemorySlotUpdateOne {
	msuo.mutation.ClearSize()
	return msuo
}

// SetType sets the "type" field.
func (msuo *MemorySlotUpdateOne) SetType(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetType(s)
	return msuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableType(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetType(*s)
	}
	return msuo
}

// ClearType clears the value of the "type" field.
func (msuo *MemorySlotUpdateOne) ClearType() *MemorySlotUpdateOne {
	msuo.mutation.ClearType()
	return msuo
}

// SetSerialNumber sets the "serial_number" field.
func (msuo *MemorySlotUpdateOne) SetSerialNumber(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetSerialNumber(s)
	return msuo
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableSerialNumber(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetSerialNumber(*s)
	}
	return msuo
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (msuo *MemorySlotUpdateOne) ClearSerialNumber() *MemorySlotUpdateOne {
	msuo.mutation.ClearSerialNumber()
	return msuo
}

// SetPartNumber sets the "part_number" field.
func (msuo *MemorySlotUpdateOne) SetPartNumber(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetPartNumber(s)
	return msuo
}

// SetNillablePartNumber sets the "part_number" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillablePartNumber(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetPartNumber(*s)
	}
	return msuo
}

// ClearPartNumber clears the value of the "part_number" field.
func (msuo *MemorySlotUpdateOne) ClearPartNumber() *MemorySlotUpdateOne {
	msuo.mutation.ClearPartNumber()
	return msuo
}

// SetSpeed sets the "speed" field.
func (msuo *MemorySlotUpdateOne) SetSpeed(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetSpeed(s)
	return msuo
}

// SetNillableSpeed sets the "speed" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableSpeed(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetSpeed(*s)
	}
	return msuo
}

// ClearSpeed clears the value of the "speed" field.
func (msuo *MemorySlotUpdateOne) ClearSpeed() *MemorySlotUpdateOne {
	msuo.mutation.ClearSpeed()
	return msuo
}

// SetManufacturer sets the "manufacturer" field.
func (msuo *MemorySlotUpdateOne) SetManufacturer(s string) *MemorySlotUpdateOne {
	msuo.mutation.SetManufacturer(s)
	return msuo
}

// SetNillableManufacturer sets the "manufacturer" field if the given value is not nil.
func (msuo *MemorySlotUpdateOne) SetNillableManufacturer(s *string) *MemorySlotUpdateOne {
	if s != nil {
		msuo.SetManufacturer(*s)
	}
	return msuo
}

// ClearManufacturer clears the value of the "manufacturer" field.
func (msuo *MemorySlotUpdateOne) ClearManufacturer() *MemorySlotUpdateOne {
	msuo.mutation.ClearManufacturer()
	return msuo
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (msuo *MemorySlotUpdateOne) SetOwnerID(id string) *MemorySlotUpdateOne {
	msuo.mutation.SetOwnerID(id)
	return msuo
}

// SetOwner sets the "owner" edge to the Agent entity.
func (msuo *MemorySlotUpdateOne) SetOwner(a *Agent) *MemorySlotUpdateOne {
	return msuo.SetOwnerID(a.ID)
}

// Mutation returns the MemorySlotMutation object of the builder.
func (msuo *MemorySlotUpdateOne) Mutation() *MemorySlotMutation {
	return msuo.mutation
}

// ClearOwner clears the "owner" edge to the Agent entity.
func (msuo *MemorySlotUpdateOne) ClearOwner() *MemorySlotUpdateOne {
	msuo.mutation.ClearOwner()
	return msuo
}

// Where appends a list predicates to the MemorySlotUpdate builder.
func (msuo *MemorySlotUpdateOne) Where(ps ...predicate.MemorySlot) *MemorySlotUpdateOne {
	msuo.mutation.Where(ps...)
	return msuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (msuo *MemorySlotUpdateOne) Select(field string, fields ...string) *MemorySlotUpdateOne {
	msuo.fields = append([]string{field}, fields...)
	return msuo
}

// Save executes the query and returns the updated MemorySlot entity.
func (msuo *MemorySlotUpdateOne) Save(ctx context.Context) (*MemorySlot, error) {
	return withHooks(ctx, msuo.sqlSave, msuo.mutation, msuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (msuo *MemorySlotUpdateOne) SaveX(ctx context.Context) *MemorySlot {
	node, err := msuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (msuo *MemorySlotUpdateOne) Exec(ctx context.Context) error {
	_, err := msuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (msuo *MemorySlotUpdateOne) ExecX(ctx context.Context) {
	if err := msuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (msuo *MemorySlotUpdateOne) check() error {
	if msuo.mutation.OwnerCleared() && len(msuo.mutation.OwnerIDs()) > 0 {
		return errors.New(`ent: clearing a required unique edge "MemorySlot.owner"`)
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (msuo *MemorySlotUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *MemorySlotUpdateOne {
	msuo.modifiers = append(msuo.modifiers, modifiers...)
	return msuo
}

func (msuo *MemorySlotUpdateOne) sqlSave(ctx context.Context) (_node *MemorySlot, err error) {
	if err := msuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(memoryslot.Table, memoryslot.Columns, sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt))
	id, ok := msuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "MemorySlot.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := msuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, memoryslot.FieldID)
		for _, f := range fields {
			if !memoryslot.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != memoryslot.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := msuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := msuo.mutation.Slot(); ok {
		_spec.SetField(memoryslot.FieldSlot, field.TypeString, value)
	}
	if msuo.mutation.SlotCleared() {
		_spec.ClearField(memoryslot.FieldSlot, field.TypeString)
	}
	if value, ok := msuo.mutation.Size(); ok {
		_spec.SetField(memoryslot.FieldSize, field.TypeString, value)
	}
	if msuo.mutation.SizeCleared() {
		_spec.ClearField(memoryslot.FieldSize, field.TypeString)
	}
	if value, ok := msuo.mutation.GetType(); ok {
		_spec.SetField(memoryslot.FieldType, field.TypeString, value)
	}
	if msuo.mutation.TypeCleared() {
		_spec.ClearField(memoryslot.FieldType, field.TypeString)
	}
	if value, ok := msuo.mutation.SerialNumber(); ok {
		_spec.SetField(memoryslot.FieldSerialNumber, field.TypeString, value)
	}
	if msuo.mutation.SerialNumberCleared() {
		_spec.ClearField(memoryslot.FieldSerialNumber, field.TypeString)
	}
	if value, ok := msuo.mutation.PartNumber(); ok {
		_spec.SetField(memoryslot.FieldPartNumber, field.TypeString, value)
	}
	if msuo.mutation.PartNumberCleared() {
		_spec.ClearField(memoryslot.FieldPartNumber, field.TypeString)
	}
	if value, ok := msuo.mutation.Speed(); ok {
		_spec.SetField(memoryslot.FieldSpeed, field.TypeString, value)
	}
	if msuo.mutation.SpeedCleared() {
		_spec.ClearField(memoryslot.FieldSpeed, field.TypeString)
	}
	if value, ok := msuo.mutation.Manufacturer(); ok {
		_spec.SetField(memoryslot.FieldManufacturer, field.TypeString, value)
	}
	if msuo.mutation.ManufacturerCleared() {
		_spec.ClearField(memoryslot.FieldManufacturer, field.TypeString)
	}
	if msuo.mutation.OwnerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memoryslot.OwnerTable,
			Columns: []string{memoryslot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := msuo.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   memoryslot.OwnerTable,
			Columns: []string{memoryslot.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(msuo.modifiers...)
	_node = &MemorySlot{config: msuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, msuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{memoryslot.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	msuo.mutation.done = true
	return _node, nil
}
