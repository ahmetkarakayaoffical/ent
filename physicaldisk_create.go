// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/physicaldisk"
)

// PhysicalDiskCreate is the builder for creating a PhysicalDisk entity.
type PhysicalDiskCreate struct {
	config
	mutation *PhysicalDiskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetDeviceID sets the "device_id" field.
func (pdc *PhysicalDiskCreate) SetDeviceID(s string) *PhysicalDiskCreate {
	pdc.mutation.SetDeviceID(s)
	return pdc
}

// SetModel sets the "model" field.
func (pdc *PhysicalDiskCreate) SetModel(s string) *PhysicalDiskCreate {
	pdc.mutation.SetModel(s)
	return pdc
}

// SetNillableModel sets the "model" field if the given value is not nil.
func (pdc *PhysicalDiskCreate) SetNillableModel(s *string) *PhysicalDiskCreate {
	if s != nil {
		pdc.SetModel(*s)
	}
	return pdc
}

// SetSerialNumber sets the "serial_number" field.
func (pdc *PhysicalDiskCreate) SetSerialNumber(s string) *PhysicalDiskCreate {
	pdc.mutation.SetSerialNumber(s)
	return pdc
}

// SetNillableSerialNumber sets the "serial_number" field if the given value is not nil.
func (pdc *PhysicalDiskCreate) SetNillableSerialNumber(s *string) *PhysicalDiskCreate {
	if s != nil {
		pdc.SetSerialNumber(*s)
	}
	return pdc
}

// SetSizeInUnits sets the "size_in_units" field.
func (pdc *PhysicalDiskCreate) SetSizeInUnits(s string) *PhysicalDiskCreate {
	pdc.mutation.SetSizeInUnits(s)
	return pdc
}

// SetNillableSizeInUnits sets the "size_in_units" field if the given value is not nil.
func (pdc *PhysicalDiskCreate) SetNillableSizeInUnits(s *string) *PhysicalDiskCreate {
	if s != nil {
		pdc.SetSizeInUnits(*s)
	}
	return pdc
}

// SetOwnerID sets the "owner" edge to the Agent entity by ID.
func (pdc *PhysicalDiskCreate) SetOwnerID(id string) *PhysicalDiskCreate {
	pdc.mutation.SetOwnerID(id)
	return pdc
}

// SetOwner sets the "owner" edge to the Agent entity.
func (pdc *PhysicalDiskCreate) SetOwner(a *Agent) *PhysicalDiskCreate {
	return pdc.SetOwnerID(a.ID)
}

// Mutation returns the PhysicalDiskMutation object of the builder.
func (pdc *PhysicalDiskCreate) Mutation() *PhysicalDiskMutation {
	return pdc.mutation
}

// Save creates the PhysicalDisk in the database.
func (pdc *PhysicalDiskCreate) Save(ctx context.Context) (*PhysicalDisk, error) {
	return withHooks(ctx, pdc.sqlSave, pdc.mutation, pdc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (pdc *PhysicalDiskCreate) SaveX(ctx context.Context) *PhysicalDisk {
	v, err := pdc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdc *PhysicalDiskCreate) Exec(ctx context.Context) error {
	_, err := pdc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdc *PhysicalDiskCreate) ExecX(ctx context.Context) {
	if err := pdc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pdc *PhysicalDiskCreate) check() error {
	if _, ok := pdc.mutation.DeviceID(); !ok {
		return &ValidationError{Name: "device_id", err: errors.New(`ent: missing required field "PhysicalDisk.device_id"`)}
	}
	if len(pdc.mutation.OwnerIDs()) == 0 {
		return &ValidationError{Name: "owner", err: errors.New(`ent: missing required edge "PhysicalDisk.owner"`)}
	}
	return nil
}

func (pdc *PhysicalDiskCreate) sqlSave(ctx context.Context) (*PhysicalDisk, error) {
	if err := pdc.check(); err != nil {
		return nil, err
	}
	_node, _spec := pdc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pdc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	pdc.mutation.id = &_node.ID
	pdc.mutation.done = true
	return _node, nil
}

func (pdc *PhysicalDiskCreate) createSpec() (*PhysicalDisk, *sqlgraph.CreateSpec) {
	var (
		_node = &PhysicalDisk{config: pdc.config}
		_spec = sqlgraph.NewCreateSpec(physicaldisk.Table, sqlgraph.NewFieldSpec(physicaldisk.FieldID, field.TypeInt))
	)
	_spec.OnConflict = pdc.conflict
	if value, ok := pdc.mutation.DeviceID(); ok {
		_spec.SetField(physicaldisk.FieldDeviceID, field.TypeString, value)
		_node.DeviceID = value
	}
	if value, ok := pdc.mutation.Model(); ok {
		_spec.SetField(physicaldisk.FieldModel, field.TypeString, value)
		_node.Model = value
	}
	if value, ok := pdc.mutation.SerialNumber(); ok {
		_spec.SetField(physicaldisk.FieldSerialNumber, field.TypeString, value)
		_node.SerialNumber = value
	}
	if value, ok := pdc.mutation.SizeInUnits(); ok {
		_spec.SetField(physicaldisk.FieldSizeInUnits, field.TypeString, value)
		_node.SizeInUnits = value
	}
	if nodes := pdc.mutation.OwnerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   physicaldisk.OwnerTable,
			Columns: []string{physicaldisk.OwnerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.agent_physicaldisks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhysicalDisk.Create().
//		SetDeviceID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhysicalDiskUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (pdc *PhysicalDiskCreate) OnConflict(opts ...sql.ConflictOption) *PhysicalDiskUpsertOne {
	pdc.conflict = opts
	return &PhysicalDiskUpsertOne{
		create: pdc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdc *PhysicalDiskCreate) OnConflictColumns(columns ...string) *PhysicalDiskUpsertOne {
	pdc.conflict = append(pdc.conflict, sql.ConflictColumns(columns...))
	return &PhysicalDiskUpsertOne{
		create: pdc,
	}
}

type (
	// PhysicalDiskUpsertOne is the builder for "upsert"-ing
	//  one PhysicalDisk node.
	PhysicalDiskUpsertOne struct {
		create *PhysicalDiskCreate
	}

	// PhysicalDiskUpsert is the "OnConflict" setter.
	PhysicalDiskUpsert struct {
		*sql.UpdateSet
	}
)

// SetDeviceID sets the "device_id" field.
func (u *PhysicalDiskUpsert) SetDeviceID(v string) *PhysicalDiskUpsert {
	u.Set(physicaldisk.FieldDeviceID, v)
	return u
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PhysicalDiskUpsert) UpdateDeviceID() *PhysicalDiskUpsert {
	u.SetExcluded(physicaldisk.FieldDeviceID)
	return u
}

// SetModel sets the "model" field.
func (u *PhysicalDiskUpsert) SetModel(v string) *PhysicalDiskUpsert {
	u.Set(physicaldisk.FieldModel, v)
	return u
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PhysicalDiskUpsert) UpdateModel() *PhysicalDiskUpsert {
	u.SetExcluded(physicaldisk.FieldModel)
	return u
}

// ClearModel clears the value of the "model" field.
func (u *PhysicalDiskUpsert) ClearModel() *PhysicalDiskUpsert {
	u.SetNull(physicaldisk.FieldModel)
	return u
}

// SetSerialNumber sets the "serial_number" field.
func (u *PhysicalDiskUpsert) SetSerialNumber(v string) *PhysicalDiskUpsert {
	u.Set(physicaldisk.FieldSerialNumber, v)
	return u
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PhysicalDiskUpsert) UpdateSerialNumber() *PhysicalDiskUpsert {
	u.SetExcluded(physicaldisk.FieldSerialNumber)
	return u
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (u *PhysicalDiskUpsert) ClearSerialNumber() *PhysicalDiskUpsert {
	u.SetNull(physicaldisk.FieldSerialNumber)
	return u
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *PhysicalDiskUpsert) SetSizeInUnits(v string) *PhysicalDiskUpsert {
	u.Set(physicaldisk.FieldSizeInUnits, v)
	return u
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *PhysicalDiskUpsert) UpdateSizeInUnits() *PhysicalDiskUpsert {
	u.SetExcluded(physicaldisk.FieldSizeInUnits)
	return u
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *PhysicalDiskUpsert) ClearSizeInUnits() *PhysicalDiskUpsert {
	u.SetNull(physicaldisk.FieldSizeInUnits)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhysicalDiskUpsertOne) UpdateNewValues() *PhysicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *PhysicalDiskUpsertOne) Ignore() *PhysicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhysicalDiskUpsertOne) DoNothing() *PhysicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhysicalDiskCreate.OnConflict
// documentation for more info.
func (u *PhysicalDiskUpsertOne) Update(set func(*PhysicalDiskUpsert)) *PhysicalDiskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhysicalDiskUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *PhysicalDiskUpsertOne) SetDeviceID(v string) *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PhysicalDiskUpsertOne) UpdateDeviceID() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateDeviceID()
	})
}

// SetModel sets the "model" field.
func (u *PhysicalDiskUpsertOne) SetModel(v string) *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PhysicalDiskUpsertOne) UpdateModel() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *PhysicalDiskUpsertOne) ClearModel() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearModel()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *PhysicalDiskUpsertOne) SetSerialNumber(v string) *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PhysicalDiskUpsertOne) UpdateSerialNumber() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateSerialNumber()
	})
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (u *PhysicalDiskUpsertOne) ClearSerialNumber() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearSerialNumber()
	})
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *PhysicalDiskUpsertOne) SetSizeInUnits(v string) *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetSizeInUnits(v)
	})
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *PhysicalDiskUpsertOne) UpdateSizeInUnits() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateSizeInUnits()
	})
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *PhysicalDiskUpsertOne) ClearSizeInUnits() *PhysicalDiskUpsertOne {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearSizeInUnits()
	})
}

// Exec executes the query.
func (u *PhysicalDiskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PhysicalDiskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhysicalDiskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PhysicalDiskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PhysicalDiskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PhysicalDiskCreateBulk is the builder for creating many PhysicalDisk entities in bulk.
type PhysicalDiskCreateBulk struct {
	config
	err      error
	builders []*PhysicalDiskCreate
	conflict []sql.ConflictOption
}

// Save creates the PhysicalDisk entities in the database.
func (pdcb *PhysicalDiskCreateBulk) Save(ctx context.Context) ([]*PhysicalDisk, error) {
	if pdcb.err != nil {
		return nil, pdcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(pdcb.builders))
	nodes := make([]*PhysicalDisk, len(pdcb.builders))
	mutators := make([]Mutator, len(pdcb.builders))
	for i := range pdcb.builders {
		func(i int, root context.Context) {
			builder := pdcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PhysicalDiskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pdcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pdcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pdcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pdcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pdcb *PhysicalDiskCreateBulk) SaveX(ctx context.Context) []*PhysicalDisk {
	v, err := pdcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pdcb *PhysicalDiskCreateBulk) Exec(ctx context.Context) error {
	_, err := pdcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pdcb *PhysicalDiskCreateBulk) ExecX(ctx context.Context) {
	if err := pdcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.PhysicalDisk.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PhysicalDiskUpsert) {
//			SetDeviceID(v+v).
//		}).
//		Exec(ctx)
func (pdcb *PhysicalDiskCreateBulk) OnConflict(opts ...sql.ConflictOption) *PhysicalDiskUpsertBulk {
	pdcb.conflict = opts
	return &PhysicalDiskUpsertBulk{
		create: pdcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (pdcb *PhysicalDiskCreateBulk) OnConflictColumns(columns ...string) *PhysicalDiskUpsertBulk {
	pdcb.conflict = append(pdcb.conflict, sql.ConflictColumns(columns...))
	return &PhysicalDiskUpsertBulk{
		create: pdcb,
	}
}

// PhysicalDiskUpsertBulk is the builder for "upsert"-ing
// a bulk of PhysicalDisk nodes.
type PhysicalDiskUpsertBulk struct {
	create *PhysicalDiskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *PhysicalDiskUpsertBulk) UpdateNewValues() *PhysicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.PhysicalDisk.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *PhysicalDiskUpsertBulk) Ignore() *PhysicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PhysicalDiskUpsertBulk) DoNothing() *PhysicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PhysicalDiskCreateBulk.OnConflict
// documentation for more info.
func (u *PhysicalDiskUpsertBulk) Update(set func(*PhysicalDiskUpsert)) *PhysicalDiskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PhysicalDiskUpsert{UpdateSet: update})
	}))
	return u
}

// SetDeviceID sets the "device_id" field.
func (u *PhysicalDiskUpsertBulk) SetDeviceID(v string) *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetDeviceID(v)
	})
}

// UpdateDeviceID sets the "device_id" field to the value that was provided on create.
func (u *PhysicalDiskUpsertBulk) UpdateDeviceID() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateDeviceID()
	})
}

// SetModel sets the "model" field.
func (u *PhysicalDiskUpsertBulk) SetModel(v string) *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetModel(v)
	})
}

// UpdateModel sets the "model" field to the value that was provided on create.
func (u *PhysicalDiskUpsertBulk) UpdateModel() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateModel()
	})
}

// ClearModel clears the value of the "model" field.
func (u *PhysicalDiskUpsertBulk) ClearModel() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearModel()
	})
}

// SetSerialNumber sets the "serial_number" field.
func (u *PhysicalDiskUpsertBulk) SetSerialNumber(v string) *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetSerialNumber(v)
	})
}

// UpdateSerialNumber sets the "serial_number" field to the value that was provided on create.
func (u *PhysicalDiskUpsertBulk) UpdateSerialNumber() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateSerialNumber()
	})
}

// ClearSerialNumber clears the value of the "serial_number" field.
func (u *PhysicalDiskUpsertBulk) ClearSerialNumber() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearSerialNumber()
	})
}

// SetSizeInUnits sets the "size_in_units" field.
func (u *PhysicalDiskUpsertBulk) SetSizeInUnits(v string) *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.SetSizeInUnits(v)
	})
}

// UpdateSizeInUnits sets the "size_in_units" field to the value that was provided on create.
func (u *PhysicalDiskUpsertBulk) UpdateSizeInUnits() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.UpdateSizeInUnits()
	})
}

// ClearSizeInUnits clears the value of the "size_in_units" field.
func (u *PhysicalDiskUpsertBulk) ClearSizeInUnits() *PhysicalDiskUpsertBulk {
	return u.Update(func(s *PhysicalDiskUpsert) {
		s.ClearSizeInUnits()
	})
}

// Exec executes the query.
func (u *PhysicalDiskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PhysicalDiskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PhysicalDiskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PhysicalDiskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
