// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/site"
	"github.com/open-uem/ent/tenant"
)

// TenantUpdate is the builder for updating Tenant entities.
type TenantUpdate struct {
	config
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tu *TenantUpdate) Where(ps ...predicate.Tenant) *TenantUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetDescription sets the "description" field.
func (tu *TenantUpdate) SetDescription(s string) *TenantUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableDescription(s *string) *TenantUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// ClearDescription clears the value of the "description" field.
func (tu *TenantUpdate) ClearDescription() *TenantUpdate {
	tu.mutation.ClearDescription()
	return tu
}

// SetIsDefault sets the "is_default" field.
func (tu *TenantUpdate) SetIsDefault(b bool) *TenantUpdate {
	tu.mutation.SetIsDefault(b)
	return tu
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (tu *TenantUpdate) SetNillableIsDefault(b *bool) *TenantUpdate {
	if b != nil {
		tu.SetIsDefault(*b)
	}
	return tu
}

// ClearIsDefault clears the value of the "is_default" field.
func (tu *TenantUpdate) ClearIsDefault() *TenantUpdate {
	tu.mutation.ClearIsDefault()
	return tu
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (tu *TenantUpdate) AddSiteIDs(ids ...int) *TenantUpdate {
	tu.mutation.AddSiteIDs(ids...)
	return tu
}

// AddSites adds the "sites" edges to the Site entity.
func (tu *TenantUpdate) AddSites(s ...*Site) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSiteIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tu *TenantUpdate) Mutation() *TenantMutation {
	return tu.mutation
}

// ClearSites clears all "sites" edges to the Site entity.
func (tu *TenantUpdate) ClearSites() *TenantUpdate {
	tu.mutation.ClearSites()
	return tu
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (tu *TenantUpdate) RemoveSiteIDs(ids ...int) *TenantUpdate {
	tu.mutation.RemoveSiteIDs(ids...)
	return tu
}

// RemoveSites removes "sites" edges to Site entities.
func (tu *TenantUpdate) RemoveSites(s ...*Site) *TenantUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSiteIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TenantUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TenantUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TenantUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TenantUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TenantUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TenantUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if tu.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := tu.mutation.IsDefault(); ok {
		_spec.SetField(tenant.FieldIsDefault, field.TypeBool, value)
	}
	if tu.mutation.IsDefaultCleared() {
		_spec.ClearField(tenant.FieldIsDefault, field.TypeBool)
	}
	if tu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSitesIDs(); len(nodes) > 0 && !tu.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TenantUpdateOne is the builder for updating a single Tenant entity.
type TenantUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TenantMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetDescription sets the "description" field.
func (tuo *TenantUpdateOne) SetDescription(s string) *TenantUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableDescription(s *string) *TenantUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// ClearDescription clears the value of the "description" field.
func (tuo *TenantUpdateOne) ClearDescription() *TenantUpdateOne {
	tuo.mutation.ClearDescription()
	return tuo
}

// SetIsDefault sets the "is_default" field.
func (tuo *TenantUpdateOne) SetIsDefault(b bool) *TenantUpdateOne {
	tuo.mutation.SetIsDefault(b)
	return tuo
}

// SetNillableIsDefault sets the "is_default" field if the given value is not nil.
func (tuo *TenantUpdateOne) SetNillableIsDefault(b *bool) *TenantUpdateOne {
	if b != nil {
		tuo.SetIsDefault(*b)
	}
	return tuo
}

// ClearIsDefault clears the value of the "is_default" field.
func (tuo *TenantUpdateOne) ClearIsDefault() *TenantUpdateOne {
	tuo.mutation.ClearIsDefault()
	return tuo
}

// AddSiteIDs adds the "sites" edge to the Site entity by IDs.
func (tuo *TenantUpdateOne) AddSiteIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.AddSiteIDs(ids...)
	return tuo
}

// AddSites adds the "sites" edges to the Site entity.
func (tuo *TenantUpdateOne) AddSites(s ...*Site) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSiteIDs(ids...)
}

// Mutation returns the TenantMutation object of the builder.
func (tuo *TenantUpdateOne) Mutation() *TenantMutation {
	return tuo.mutation
}

// ClearSites clears all "sites" edges to the Site entity.
func (tuo *TenantUpdateOne) ClearSites() *TenantUpdateOne {
	tuo.mutation.ClearSites()
	return tuo
}

// RemoveSiteIDs removes the "sites" edge to Site entities by IDs.
func (tuo *TenantUpdateOne) RemoveSiteIDs(ids ...int) *TenantUpdateOne {
	tuo.mutation.RemoveSiteIDs(ids...)
	return tuo
}

// RemoveSites removes "sites" edges to Site entities.
func (tuo *TenantUpdateOne) RemoveSites(s ...*Site) *TenantUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSiteIDs(ids...)
}

// Where appends a list predicates to the TenantUpdate builder.
func (tuo *TenantUpdateOne) Where(ps ...predicate.Tenant) *TenantUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TenantUpdateOne) Select(field string, fields ...string) *TenantUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Tenant entity.
func (tuo *TenantUpdateOne) Save(ctx context.Context) (*Tenant, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TenantUpdateOne) SaveX(ctx context.Context) *Tenant {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TenantUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TenantUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TenantUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TenantUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TenantUpdateOne) sqlSave(ctx context.Context) (_node *Tenant, err error) {
	_spec := sqlgraph.NewUpdateSpec(tenant.Table, tenant.Columns, sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Tenant.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, tenant.FieldID)
		for _, f := range fields {
			if !tenant.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != tenant.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(tenant.FieldDescription, field.TypeString, value)
	}
	if tuo.mutation.DescriptionCleared() {
		_spec.ClearField(tenant.FieldDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.IsDefault(); ok {
		_spec.SetField(tenant.FieldIsDefault, field.TypeBool, value)
	}
	if tuo.mutation.IsDefaultCleared() {
		_spec.ClearField(tenant.FieldIsDefault, field.TypeBool)
	}
	if tuo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSitesIDs(); len(nodes) > 0 && !tuo.mutation.SitesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SitesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   tenant.SitesTable,
			Columns: []string{tenant.SitesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Tenant{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{tenant.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
