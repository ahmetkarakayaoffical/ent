// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/authentication"
	"github.com/open-uem/ent/predicate"
)

// AuthenticationUpdate is the builder for updating Authentication entities.
type AuthenticationUpdate struct {
	config
	hooks     []Hook
	mutation  *AuthenticationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AuthenticationUpdate builder.
func (au *AuthenticationUpdate) Where(ps ...predicate.Authentication) *AuthenticationUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetUseCertificates sets the "use_certificates" field.
func (au *AuthenticationUpdate) SetUseCertificates(b bool) *AuthenticationUpdate {
	au.mutation.SetUseCertificates(b)
	return au
}

// SetNillableUseCertificates sets the "use_certificates" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableUseCertificates(b *bool) *AuthenticationUpdate {
	if b != nil {
		au.SetUseCertificates(*b)
	}
	return au
}

// ClearUseCertificates clears the value of the "use_certificates" field.
func (au *AuthenticationUpdate) ClearUseCertificates() *AuthenticationUpdate {
	au.mutation.ClearUseCertificates()
	return au
}

// SetAllowRegister sets the "allow_register" field.
func (au *AuthenticationUpdate) SetAllowRegister(b bool) *AuthenticationUpdate {
	au.mutation.SetAllowRegister(b)
	return au
}

// SetNillableAllowRegister sets the "allow_register" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableAllowRegister(b *bool) *AuthenticationUpdate {
	if b != nil {
		au.SetAllowRegister(*b)
	}
	return au
}

// ClearAllowRegister clears the value of the "allow_register" field.
func (au *AuthenticationUpdate) ClearAllowRegister() *AuthenticationUpdate {
	au.mutation.ClearAllowRegister()
	return au
}

// SetUseOIDC sets the "use_OIDC" field.
func (au *AuthenticationUpdate) SetUseOIDC(b bool) *AuthenticationUpdate {
	au.mutation.SetUseOIDC(b)
	return au
}

// SetNillableUseOIDC sets the "use_OIDC" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableUseOIDC(b *bool) *AuthenticationUpdate {
	if b != nil {
		au.SetUseOIDC(*b)
	}
	return au
}

// ClearUseOIDC clears the value of the "use_OIDC" field.
func (au *AuthenticationUpdate) ClearUseOIDC() *AuthenticationUpdate {
	au.mutation.ClearUseOIDC()
	return au
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (au *AuthenticationUpdate) SetOIDCProvider(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCProvider(s)
	return au
}

// SetNillableOIDCProvider sets the "OIDC_provider" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCProvider(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCProvider(*s)
	}
	return au
}

// ClearOIDCProvider clears the value of the "OIDC_provider" field.
func (au *AuthenticationUpdate) ClearOIDCProvider() *AuthenticationUpdate {
	au.mutation.ClearOIDCProvider()
	return au
}

// SetOIDCServer sets the "OIDC_server" field.
func (au *AuthenticationUpdate) SetOIDCServer(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCServer(s)
	return au
}

// SetNillableOIDCServer sets the "OIDC_server" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCServer(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCServer(*s)
	}
	return au
}

// ClearOIDCServer clears the value of the "OIDC_server" field.
func (au *AuthenticationUpdate) ClearOIDCServer() *AuthenticationUpdate {
	au.mutation.ClearOIDCServer()
	return au
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (au *AuthenticationUpdate) SetOIDCClientID(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCClientID(s)
	return au
}

// SetNillableOIDCClientID sets the "OIDC_client_id" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCClientID(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCClientID(*s)
	}
	return au
}

// ClearOIDCClientID clears the value of the "OIDC_client_id" field.
func (au *AuthenticationUpdate) ClearOIDCClientID() *AuthenticationUpdate {
	au.mutation.ClearOIDCClientID()
	return au
}

// SetOIDCRole sets the "OIDC_role" field.
func (au *AuthenticationUpdate) SetOIDCRole(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCRole(s)
	return au
}

// SetNillableOIDCRole sets the "OIDC_role" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCRole(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCRole(*s)
	}
	return au
}

// ClearOIDCRole clears the value of the "OIDC_role" field.
func (au *AuthenticationUpdate) ClearOIDCRole() *AuthenticationUpdate {
	au.mutation.ClearOIDCRole()
	return au
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (au *AuthenticationUpdate) SetOIDCCookieEncriptionKey(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCCookieEncriptionKey(s)
	return au
}

// SetNillableOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCCookieEncriptionKey(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCCookieEncriptionKey(*s)
	}
	return au
}

// ClearOIDCCookieEncriptionKey clears the value of the "OIDC_cookie_encription_key" field.
func (au *AuthenticationUpdate) ClearOIDCCookieEncriptionKey() *AuthenticationUpdate {
	au.mutation.ClearOIDCCookieEncriptionKey()
	return au
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (au *AuthenticationUpdate) SetOIDCKeycloakPublicKey(s string) *AuthenticationUpdate {
	au.mutation.SetOIDCKeycloakPublicKey(s)
	return au
}

// SetNillableOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCKeycloakPublicKey(s *string) *AuthenticationUpdate {
	if s != nil {
		au.SetOIDCKeycloakPublicKey(*s)
	}
	return au
}

// ClearOIDCKeycloakPublicKey clears the value of the "OIDC_keycloak_public_key" field.
func (au *AuthenticationUpdate) ClearOIDCKeycloakPublicKey() *AuthenticationUpdate {
	au.mutation.ClearOIDCKeycloakPublicKey()
	return au
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (au *AuthenticationUpdate) SetOIDCAutoCreateAccount(b bool) *AuthenticationUpdate {
	au.mutation.SetOIDCAutoCreateAccount(b)
	return au
}

// SetNillableOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCAutoCreateAccount(b *bool) *AuthenticationUpdate {
	if b != nil {
		au.SetOIDCAutoCreateAccount(*b)
	}
	return au
}

// ClearOIDCAutoCreateAccount clears the value of the "OIDC_auto_create_account" field.
func (au *AuthenticationUpdate) ClearOIDCAutoCreateAccount() *AuthenticationUpdate {
	au.mutation.ClearOIDCAutoCreateAccount()
	return au
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (au *AuthenticationUpdate) SetOIDCAutoApprove(b bool) *AuthenticationUpdate {
	au.mutation.SetOIDCAutoApprove(b)
	return au
}

// SetNillableOIDCAutoApprove sets the "OIDC_auto_approve" field if the given value is not nil.
func (au *AuthenticationUpdate) SetNillableOIDCAutoApprove(b *bool) *AuthenticationUpdate {
	if b != nil {
		au.SetOIDCAutoApprove(*b)
	}
	return au
}

// ClearOIDCAutoApprove clears the value of the "OIDC_auto_approve" field.
func (au *AuthenticationUpdate) ClearOIDCAutoApprove() *AuthenticationUpdate {
	au.mutation.ClearOIDCAutoApprove()
	return au
}

// Mutation returns the AuthenticationMutation object of the builder.
func (au *AuthenticationUpdate) Mutation() *AuthenticationMutation {
	return au.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AuthenticationUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AuthenticationUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AuthenticationUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AuthenticationUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AuthenticationUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthenticationUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AuthenticationUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(authentication.Table, authentication.Columns, sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeInt))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.UseCertificates(); ok {
		_spec.SetField(authentication.FieldUseCertificates, field.TypeBool, value)
	}
	if au.mutation.UseCertificatesCleared() {
		_spec.ClearField(authentication.FieldUseCertificates, field.TypeBool)
	}
	if value, ok := au.mutation.AllowRegister(); ok {
		_spec.SetField(authentication.FieldAllowRegister, field.TypeBool, value)
	}
	if au.mutation.AllowRegisterCleared() {
		_spec.ClearField(authentication.FieldAllowRegister, field.TypeBool)
	}
	if value, ok := au.mutation.UseOIDC(); ok {
		_spec.SetField(authentication.FieldUseOIDC, field.TypeBool, value)
	}
	if au.mutation.UseOIDCCleared() {
		_spec.ClearField(authentication.FieldUseOIDC, field.TypeBool)
	}
	if value, ok := au.mutation.OIDCProvider(); ok {
		_spec.SetField(authentication.FieldOIDCProvider, field.TypeString, value)
	}
	if au.mutation.OIDCProviderCleared() {
		_spec.ClearField(authentication.FieldOIDCProvider, field.TypeString)
	}
	if value, ok := au.mutation.OIDCServer(); ok {
		_spec.SetField(authentication.FieldOIDCServer, field.TypeString, value)
	}
	if au.mutation.OIDCServerCleared() {
		_spec.ClearField(authentication.FieldOIDCServer, field.TypeString)
	}
	if value, ok := au.mutation.OIDCClientID(); ok {
		_spec.SetField(authentication.FieldOIDCClientID, field.TypeString, value)
	}
	if au.mutation.OIDCClientIDCleared() {
		_spec.ClearField(authentication.FieldOIDCClientID, field.TypeString)
	}
	if value, ok := au.mutation.OIDCRole(); ok {
		_spec.SetField(authentication.FieldOIDCRole, field.TypeString, value)
	}
	if au.mutation.OIDCRoleCleared() {
		_spec.ClearField(authentication.FieldOIDCRole, field.TypeString)
	}
	if value, ok := au.mutation.OIDCCookieEncriptionKey(); ok {
		_spec.SetField(authentication.FieldOIDCCookieEncriptionKey, field.TypeString, value)
	}
	if au.mutation.OIDCCookieEncriptionKeyCleared() {
		_spec.ClearField(authentication.FieldOIDCCookieEncriptionKey, field.TypeString)
	}
	if value, ok := au.mutation.OIDCKeycloakPublicKey(); ok {
		_spec.SetField(authentication.FieldOIDCKeycloakPublicKey, field.TypeString, value)
	}
	if au.mutation.OIDCKeycloakPublicKeyCleared() {
		_spec.ClearField(authentication.FieldOIDCKeycloakPublicKey, field.TypeString)
	}
	if value, ok := au.mutation.OIDCAutoCreateAccount(); ok {
		_spec.SetField(authentication.FieldOIDCAutoCreateAccount, field.TypeBool, value)
	}
	if au.mutation.OIDCAutoCreateAccountCleared() {
		_spec.ClearField(authentication.FieldOIDCAutoCreateAccount, field.TypeBool)
	}
	if value, ok := au.mutation.OIDCAutoApprove(); ok {
		_spec.SetField(authentication.FieldOIDCAutoApprove, field.TypeBool, value)
	}
	if au.mutation.OIDCAutoApproveCleared() {
		_spec.ClearField(authentication.FieldOIDCAutoApprove, field.TypeBool)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authentication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AuthenticationUpdateOne is the builder for updating a single Authentication entity.
type AuthenticationUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AuthenticationMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetUseCertificates sets the "use_certificates" field.
func (auo *AuthenticationUpdateOne) SetUseCertificates(b bool) *AuthenticationUpdateOne {
	auo.mutation.SetUseCertificates(b)
	return auo
}

// SetNillableUseCertificates sets the "use_certificates" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableUseCertificates(b *bool) *AuthenticationUpdateOne {
	if b != nil {
		auo.SetUseCertificates(*b)
	}
	return auo
}

// ClearUseCertificates clears the value of the "use_certificates" field.
func (auo *AuthenticationUpdateOne) ClearUseCertificates() *AuthenticationUpdateOne {
	auo.mutation.ClearUseCertificates()
	return auo
}

// SetAllowRegister sets the "allow_register" field.
func (auo *AuthenticationUpdateOne) SetAllowRegister(b bool) *AuthenticationUpdateOne {
	auo.mutation.SetAllowRegister(b)
	return auo
}

// SetNillableAllowRegister sets the "allow_register" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableAllowRegister(b *bool) *AuthenticationUpdateOne {
	if b != nil {
		auo.SetAllowRegister(*b)
	}
	return auo
}

// ClearAllowRegister clears the value of the "allow_register" field.
func (auo *AuthenticationUpdateOne) ClearAllowRegister() *AuthenticationUpdateOne {
	auo.mutation.ClearAllowRegister()
	return auo
}

// SetUseOIDC sets the "use_OIDC" field.
func (auo *AuthenticationUpdateOne) SetUseOIDC(b bool) *AuthenticationUpdateOne {
	auo.mutation.SetUseOIDC(b)
	return auo
}

// SetNillableUseOIDC sets the "use_OIDC" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableUseOIDC(b *bool) *AuthenticationUpdateOne {
	if b != nil {
		auo.SetUseOIDC(*b)
	}
	return auo
}

// ClearUseOIDC clears the value of the "use_OIDC" field.
func (auo *AuthenticationUpdateOne) ClearUseOIDC() *AuthenticationUpdateOne {
	auo.mutation.ClearUseOIDC()
	return auo
}

// SetOIDCProvider sets the "OIDC_provider" field.
func (auo *AuthenticationUpdateOne) SetOIDCProvider(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCProvider(s)
	return auo
}

// SetNillableOIDCProvider sets the "OIDC_provider" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCProvider(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCProvider(*s)
	}
	return auo
}

// ClearOIDCProvider clears the value of the "OIDC_provider" field.
func (auo *AuthenticationUpdateOne) ClearOIDCProvider() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCProvider()
	return auo
}

// SetOIDCServer sets the "OIDC_server" field.
func (auo *AuthenticationUpdateOne) SetOIDCServer(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCServer(s)
	return auo
}

// SetNillableOIDCServer sets the "OIDC_server" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCServer(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCServer(*s)
	}
	return auo
}

// ClearOIDCServer clears the value of the "OIDC_server" field.
func (auo *AuthenticationUpdateOne) ClearOIDCServer() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCServer()
	return auo
}

// SetOIDCClientID sets the "OIDC_client_id" field.
func (auo *AuthenticationUpdateOne) SetOIDCClientID(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCClientID(s)
	return auo
}

// SetNillableOIDCClientID sets the "OIDC_client_id" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCClientID(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCClientID(*s)
	}
	return auo
}

// ClearOIDCClientID clears the value of the "OIDC_client_id" field.
func (auo *AuthenticationUpdateOne) ClearOIDCClientID() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCClientID()
	return auo
}

// SetOIDCRole sets the "OIDC_role" field.
func (auo *AuthenticationUpdateOne) SetOIDCRole(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCRole(s)
	return auo
}

// SetNillableOIDCRole sets the "OIDC_role" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCRole(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCRole(*s)
	}
	return auo
}

// ClearOIDCRole clears the value of the "OIDC_role" field.
func (auo *AuthenticationUpdateOne) ClearOIDCRole() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCRole()
	return auo
}

// SetOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field.
func (auo *AuthenticationUpdateOne) SetOIDCCookieEncriptionKey(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCCookieEncriptionKey(s)
	return auo
}

// SetNillableOIDCCookieEncriptionKey sets the "OIDC_cookie_encription_key" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCCookieEncriptionKey(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCCookieEncriptionKey(*s)
	}
	return auo
}

// ClearOIDCCookieEncriptionKey clears the value of the "OIDC_cookie_encription_key" field.
func (auo *AuthenticationUpdateOne) ClearOIDCCookieEncriptionKey() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCCookieEncriptionKey()
	return auo
}

// SetOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field.
func (auo *AuthenticationUpdateOne) SetOIDCKeycloakPublicKey(s string) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCKeycloakPublicKey(s)
	return auo
}

// SetNillableOIDCKeycloakPublicKey sets the "OIDC_keycloak_public_key" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCKeycloakPublicKey(s *string) *AuthenticationUpdateOne {
	if s != nil {
		auo.SetOIDCKeycloakPublicKey(*s)
	}
	return auo
}

// ClearOIDCKeycloakPublicKey clears the value of the "OIDC_keycloak_public_key" field.
func (auo *AuthenticationUpdateOne) ClearOIDCKeycloakPublicKey() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCKeycloakPublicKey()
	return auo
}

// SetOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field.
func (auo *AuthenticationUpdateOne) SetOIDCAutoCreateAccount(b bool) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCAutoCreateAccount(b)
	return auo
}

// SetNillableOIDCAutoCreateAccount sets the "OIDC_auto_create_account" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCAutoCreateAccount(b *bool) *AuthenticationUpdateOne {
	if b != nil {
		auo.SetOIDCAutoCreateAccount(*b)
	}
	return auo
}

// ClearOIDCAutoCreateAccount clears the value of the "OIDC_auto_create_account" field.
func (auo *AuthenticationUpdateOne) ClearOIDCAutoCreateAccount() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCAutoCreateAccount()
	return auo
}

// SetOIDCAutoApprove sets the "OIDC_auto_approve" field.
func (auo *AuthenticationUpdateOne) SetOIDCAutoApprove(b bool) *AuthenticationUpdateOne {
	auo.mutation.SetOIDCAutoApprove(b)
	return auo
}

// SetNillableOIDCAutoApprove sets the "OIDC_auto_approve" field if the given value is not nil.
func (auo *AuthenticationUpdateOne) SetNillableOIDCAutoApprove(b *bool) *AuthenticationUpdateOne {
	if b != nil {
		auo.SetOIDCAutoApprove(*b)
	}
	return auo
}

// ClearOIDCAutoApprove clears the value of the "OIDC_auto_approve" field.
func (auo *AuthenticationUpdateOne) ClearOIDCAutoApprove() *AuthenticationUpdateOne {
	auo.mutation.ClearOIDCAutoApprove()
	return auo
}

// Mutation returns the AuthenticationMutation object of the builder.
func (auo *AuthenticationUpdateOne) Mutation() *AuthenticationMutation {
	return auo.mutation
}

// Where appends a list predicates to the AuthenticationUpdate builder.
func (auo *AuthenticationUpdateOne) Where(ps ...predicate.Authentication) *AuthenticationUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AuthenticationUpdateOne) Select(field string, fields ...string) *AuthenticationUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Authentication entity.
func (auo *AuthenticationUpdateOne) Save(ctx context.Context) (*Authentication, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AuthenticationUpdateOne) SaveX(ctx context.Context) *Authentication {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AuthenticationUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AuthenticationUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AuthenticationUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AuthenticationUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AuthenticationUpdateOne) sqlSave(ctx context.Context) (_node *Authentication, err error) {
	_spec := sqlgraph.NewUpdateSpec(authentication.Table, authentication.Columns, sqlgraph.NewFieldSpec(authentication.FieldID, field.TypeInt))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Authentication.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, authentication.FieldID)
		for _, f := range fields {
			if !authentication.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != authentication.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.UseCertificates(); ok {
		_spec.SetField(authentication.FieldUseCertificates, field.TypeBool, value)
	}
	if auo.mutation.UseCertificatesCleared() {
		_spec.ClearField(authentication.FieldUseCertificates, field.TypeBool)
	}
	if value, ok := auo.mutation.AllowRegister(); ok {
		_spec.SetField(authentication.FieldAllowRegister, field.TypeBool, value)
	}
	if auo.mutation.AllowRegisterCleared() {
		_spec.ClearField(authentication.FieldAllowRegister, field.TypeBool)
	}
	if value, ok := auo.mutation.UseOIDC(); ok {
		_spec.SetField(authentication.FieldUseOIDC, field.TypeBool, value)
	}
	if auo.mutation.UseOIDCCleared() {
		_spec.ClearField(authentication.FieldUseOIDC, field.TypeBool)
	}
	if value, ok := auo.mutation.OIDCProvider(); ok {
		_spec.SetField(authentication.FieldOIDCProvider, field.TypeString, value)
	}
	if auo.mutation.OIDCProviderCleared() {
		_spec.ClearField(authentication.FieldOIDCProvider, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCServer(); ok {
		_spec.SetField(authentication.FieldOIDCServer, field.TypeString, value)
	}
	if auo.mutation.OIDCServerCleared() {
		_spec.ClearField(authentication.FieldOIDCServer, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCClientID(); ok {
		_spec.SetField(authentication.FieldOIDCClientID, field.TypeString, value)
	}
	if auo.mutation.OIDCClientIDCleared() {
		_spec.ClearField(authentication.FieldOIDCClientID, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCRole(); ok {
		_spec.SetField(authentication.FieldOIDCRole, field.TypeString, value)
	}
	if auo.mutation.OIDCRoleCleared() {
		_spec.ClearField(authentication.FieldOIDCRole, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCCookieEncriptionKey(); ok {
		_spec.SetField(authentication.FieldOIDCCookieEncriptionKey, field.TypeString, value)
	}
	if auo.mutation.OIDCCookieEncriptionKeyCleared() {
		_spec.ClearField(authentication.FieldOIDCCookieEncriptionKey, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCKeycloakPublicKey(); ok {
		_spec.SetField(authentication.FieldOIDCKeycloakPublicKey, field.TypeString, value)
	}
	if auo.mutation.OIDCKeycloakPublicKeyCleared() {
		_spec.ClearField(authentication.FieldOIDCKeycloakPublicKey, field.TypeString)
	}
	if value, ok := auo.mutation.OIDCAutoCreateAccount(); ok {
		_spec.SetField(authentication.FieldOIDCAutoCreateAccount, field.TypeBool, value)
	}
	if auo.mutation.OIDCAutoCreateAccountCleared() {
		_spec.ClearField(authentication.FieldOIDCAutoCreateAccount, field.TypeBool)
	}
	if value, ok := auo.mutation.OIDCAutoApprove(); ok {
		_spec.SetField(authentication.FieldOIDCAutoApprove, field.TypeBool, value)
	}
	if auo.mutation.OIDCAutoApproveCleared() {
		_spec.ClearField(authentication.FieldOIDCAutoApprove, field.TypeBool)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Authentication{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{authentication.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
