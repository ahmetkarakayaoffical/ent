// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/tag"
	"github.com/open-uem/ent/task"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetName sets the "name" field.
func (tc *TaskCreate) SetName(s string) *TaskCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(t task.Type) *TaskCreate {
	tc.mutation.SetType(t)
	return tc
}

// SetPackageID sets the "package_id" field.
func (tc *TaskCreate) SetPackageID(s string) *TaskCreate {
	tc.mutation.SetPackageID(s)
	return tc
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePackageID(s *string) *TaskCreate {
	if s != nil {
		tc.SetPackageID(*s)
	}
	return tc
}

// SetPackageName sets the "package_name" field.
func (tc *TaskCreate) SetPackageName(s string) *TaskCreate {
	tc.mutation.SetPackageName(s)
	return tc
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePackageName(s *string) *TaskCreate {
	if s != nil {
		tc.SetPackageName(*s)
	}
	return tc
}

// SetPackageLatest sets the "package_latest" field.
func (tc *TaskCreate) SetPackageLatest(b bool) *TaskCreate {
	tc.mutation.SetPackageLatest(b)
	return tc
}

// SetNillablePackageLatest sets the "package_latest" field if the given value is not nil.
func (tc *TaskCreate) SetNillablePackageLatest(b *bool) *TaskCreate {
	if b != nil {
		tc.SetPackageLatest(*b)
	}
	return tc
}

// SetRegistryKey sets the "registry_key" field.
func (tc *TaskCreate) SetRegistryKey(s string) *TaskCreate {
	tc.mutation.SetRegistryKey(s)
	return tc
}

// SetNillableRegistryKey sets the "registry_key" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryKey(s *string) *TaskCreate {
	if s != nil {
		tc.SetRegistryKey(*s)
	}
	return tc
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (tc *TaskCreate) SetRegistryKeyValueName(s string) *TaskCreate {
	tc.mutation.SetRegistryKeyValueName(s)
	return tc
}

// SetNillableRegistryKeyValueName sets the "registry_key_value_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryKeyValueName(s *string) *TaskCreate {
	if s != nil {
		tc.SetRegistryKeyValueName(*s)
	}
	return tc
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (tc *TaskCreate) SetRegistryKeyValueType(tkvt task.RegistryKeyValueType) *TaskCreate {
	tc.mutation.SetRegistryKeyValueType(tkvt)
	return tc
}

// SetNillableRegistryKeyValueType sets the "registry_key_value_type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryKeyValueType(tkvt *task.RegistryKeyValueType) *TaskCreate {
	if tkvt != nil {
		tc.SetRegistryKeyValueType(*tkvt)
	}
	return tc
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (tc *TaskCreate) SetRegistryKeyValueData(s string) *TaskCreate {
	tc.mutation.SetRegistryKeyValueData(s)
	return tc
}

// SetNillableRegistryKeyValueData sets the "registry_key_value_data" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryKeyValueData(s *string) *TaskCreate {
	if s != nil {
		tc.SetRegistryKeyValueData(*s)
	}
	return tc
}

// SetRegistryHex sets the "registry_hex" field.
func (tc *TaskCreate) SetRegistryHex(b bool) *TaskCreate {
	tc.mutation.SetRegistryHex(b)
	return tc
}

// SetNillableRegistryHex sets the "registry_hex" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryHex(b *bool) *TaskCreate {
	if b != nil {
		tc.SetRegistryHex(*b)
	}
	return tc
}

// SetRegistryForce sets the "registry_force" field.
func (tc *TaskCreate) SetRegistryForce(b bool) *TaskCreate {
	tc.mutation.SetRegistryForce(b)
	return tc
}

// SetNillableRegistryForce sets the "registry_force" field if the given value is not nil.
func (tc *TaskCreate) SetNillableRegistryForce(b *bool) *TaskCreate {
	if b != nil {
		tc.SetRegistryForce(*b)
	}
	return tc
}

// SetLocalUserUsername sets the "local_user_username" field.
func (tc *TaskCreate) SetLocalUserUsername(s string) *TaskCreate {
	tc.mutation.SetLocalUserUsername(s)
	return tc
}

// SetNillableLocalUserUsername sets the "local_user_username" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserUsername(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserUsername(*s)
	}
	return tc
}

// SetLocalUserDescription sets the "local_user_description" field.
func (tc *TaskCreate) SetLocalUserDescription(s string) *TaskCreate {
	tc.mutation.SetLocalUserDescription(s)
	return tc
}

// SetNillableLocalUserDescription sets the "local_user_description" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserDescription(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserDescription(*s)
	}
	return tc
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (tc *TaskCreate) SetLocalUserDisable(b bool) *TaskCreate {
	tc.mutation.SetLocalUserDisable(b)
	return tc
}

// SetNillableLocalUserDisable sets the "local_user_disable" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserDisable(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserDisable(*b)
	}
	return tc
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (tc *TaskCreate) SetLocalUserFullname(s string) *TaskCreate {
	tc.mutation.SetLocalUserFullname(s)
	return tc
}

// SetNillableLocalUserFullname sets the "local_user_fullname" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserFullname(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserFullname(*s)
	}
	return tc
}

// SetLocalUserPassword sets the "local_user_password" field.
func (tc *TaskCreate) SetLocalUserPassword(s string) *TaskCreate {
	tc.mutation.SetLocalUserPassword(s)
	return tc
}

// SetNillableLocalUserPassword sets the "local_user_password" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPassword(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserPassword(*s)
	}
	return tc
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (tc *TaskCreate) SetLocalUserPasswordChangeNotAllowed(b bool) *TaskCreate {
	tc.mutation.SetLocalUserPasswordChangeNotAllowed(b)
	return tc
}

// SetNillableLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordChangeNotAllowed(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserPasswordChangeNotAllowed(*b)
	}
	return tc
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (tc *TaskCreate) SetLocalUserPasswordChangeRequired(b bool) *TaskCreate {
	tc.mutation.SetLocalUserPasswordChangeRequired(b)
	return tc
}

// SetNillableLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordChangeRequired(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserPasswordChangeRequired(*b)
	}
	return tc
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (tc *TaskCreate) SetLocalUserPasswordNeverExpires(b bool) *TaskCreate {
	tc.mutation.SetLocalUserPasswordNeverExpires(b)
	return tc
}

// SetNillableLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordNeverExpires(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserPasswordNeverExpires(*b)
	}
	return tc
}

// SetLocalUserAppend sets the "local_user_append" field.
func (tc *TaskCreate) SetLocalUserAppend(b bool) *TaskCreate {
	tc.mutation.SetLocalUserAppend(b)
	return tc
}

// SetNillableLocalUserAppend sets the "local_user_append" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserAppend(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserAppend(*b)
	}
	return tc
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (tc *TaskCreate) SetLocalUserCreateHome(b bool) *TaskCreate {
	tc.mutation.SetLocalUserCreateHome(b)
	return tc
}

// SetNillableLocalUserCreateHome sets the "local_user_create_home" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserCreateHome(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserCreateHome(*b)
	}
	return tc
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (tc *TaskCreate) SetLocalUserExpires(s string) *TaskCreate {
	tc.mutation.SetLocalUserExpires(s)
	return tc
}

// SetNillableLocalUserExpires sets the "local_user_expires" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserExpires(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserExpires(*s)
	}
	return tc
}

// SetLocalUserForce sets the "local_user_force" field.
func (tc *TaskCreate) SetLocalUserForce(b bool) *TaskCreate {
	tc.mutation.SetLocalUserForce(b)
	return tc
}

// SetNillableLocalUserForce sets the "local_user_force" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserForce(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserForce(*b)
	}
	return tc
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (tc *TaskCreate) SetLocalUserGenerateSSHKey(b bool) *TaskCreate {
	tc.mutation.SetLocalUserGenerateSSHKey(b)
	return tc
}

// SetNillableLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserGenerateSSHKey(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserGenerateSSHKey(*b)
	}
	return tc
}

// SetLocalUserGroup sets the "local_user_group" field.
func (tc *TaskCreate) SetLocalUserGroup(s string) *TaskCreate {
	tc.mutation.SetLocalUserGroup(s)
	return tc
}

// SetNillableLocalUserGroup sets the "local_user_group" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserGroup(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserGroup(*s)
	}
	return tc
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (tc *TaskCreate) SetLocalUserGroups(s string) *TaskCreate {
	tc.mutation.SetLocalUserGroups(s)
	return tc
}

// SetNillableLocalUserGroups sets the "local_user_groups" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserGroups(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserGroups(*s)
	}
	return tc
}

// SetLocalUserHome sets the "local_user_home" field.
func (tc *TaskCreate) SetLocalUserHome(s string) *TaskCreate {
	tc.mutation.SetLocalUserHome(s)
	return tc
}

// SetNillableLocalUserHome sets the "local_user_home" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserHome(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserHome(*s)
	}
	return tc
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (tc *TaskCreate) SetLocalUserMoveHome(b bool) *TaskCreate {
	tc.mutation.SetLocalUserMoveHome(b)
	return tc
}

// SetNillableLocalUserMoveHome sets the "local_user_move_home" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserMoveHome(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserMoveHome(*b)
	}
	return tc
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (tc *TaskCreate) SetLocalUserNonunique(b bool) *TaskCreate {
	tc.mutation.SetLocalUserNonunique(b)
	return tc
}

// SetNillableLocalUserNonunique sets the "local_user_nonunique" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserNonunique(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserNonunique(*b)
	}
	return tc
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (tc *TaskCreate) SetLocalUserPasswordExpireAccountDisable(s string) *TaskCreate {
	tc.mutation.SetLocalUserPasswordExpireAccountDisable(s)
	return tc
}

// SetNillableLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordExpireAccountDisable(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserPasswordExpireAccountDisable(*s)
	}
	return tc
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (tc *TaskCreate) SetLocalUserPasswordExpireMax(s string) *TaskCreate {
	tc.mutation.SetLocalUserPasswordExpireMax(s)
	return tc
}

// SetNillableLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordExpireMax(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserPasswordExpireMax(*s)
	}
	return tc
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (tc *TaskCreate) SetLocalUserPasswordExpireMin(s string) *TaskCreate {
	tc.mutation.SetLocalUserPasswordExpireMin(s)
	return tc
}

// SetNillableLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordExpireMin(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserPasswordExpireMin(*s)
	}
	return tc
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (tc *TaskCreate) SetLocalUserPasswordExpireWarn(s string) *TaskCreate {
	tc.mutation.SetLocalUserPasswordExpireWarn(s)
	return tc
}

// SetNillableLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordExpireWarn(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserPasswordExpireWarn(*s)
	}
	return tc
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (tc *TaskCreate) SetLocalUserPasswordLock(b bool) *TaskCreate {
	tc.mutation.SetLocalUserPasswordLock(b)
	return tc
}

// SetNillableLocalUserPasswordLock sets the "local_user_password_lock" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserPasswordLock(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserPasswordLock(*b)
	}
	return tc
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (tc *TaskCreate) SetLocalUserSeuser(s string) *TaskCreate {
	tc.mutation.SetLocalUserSeuser(s)
	return tc
}

// SetNillableLocalUserSeuser sets the "local_user_seuser" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSeuser(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSeuser(*s)
	}
	return tc
}

// SetLocalUserShell sets the "local_user_shell" field.
func (tc *TaskCreate) SetLocalUserShell(s string) *TaskCreate {
	tc.mutation.SetLocalUserShell(s)
	return tc
}

// SetNillableLocalUserShell sets the "local_user_shell" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserShell(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserShell(*s)
	}
	return tc
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (tc *TaskCreate) SetLocalUserSkeleton(s string) *TaskCreate {
	tc.mutation.SetLocalUserSkeleton(s)
	return tc
}

// SetNillableLocalUserSkeleton sets the "local_user_skeleton" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSkeleton(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSkeleton(*s)
	}
	return tc
}

// SetLocalUserSystem sets the "local_user_system" field.
func (tc *TaskCreate) SetLocalUserSystem(b bool) *TaskCreate {
	tc.mutation.SetLocalUserSystem(b)
	return tc
}

// SetNillableLocalUserSystem sets the "local_user_system" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSystem(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalUserSystem(*b)
	}
	return tc
}

// SetLocalUserID sets the "local_user_id" field.
func (tc *TaskCreate) SetLocalUserID(s string) *TaskCreate {
	tc.mutation.SetLocalUserID(s)
	return tc
}

// SetNillableLocalUserID sets the "local_user_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserID(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserID(*s)
	}
	return tc
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (tc *TaskCreate) SetLocalUserIDMax(s string) *TaskCreate {
	tc.mutation.SetLocalUserIDMax(s)
	return tc
}

// SetNillableLocalUserIDMax sets the "local_user_id_max" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserIDMax(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserIDMax(*s)
	}
	return tc
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (tc *TaskCreate) SetLocalUserIDMin(s string) *TaskCreate {
	tc.mutation.SetLocalUserIDMin(s)
	return tc
}

// SetNillableLocalUserIDMin sets the "local_user_id_min" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserIDMin(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserIDMin(*s)
	}
	return tc
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (tc *TaskCreate) SetLocalUserSSHKeyBits(s string) *TaskCreate {
	tc.mutation.SetLocalUserSSHKeyBits(s)
	return tc
}

// SetNillableLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSSHKeyBits(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSSHKeyBits(*s)
	}
	return tc
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (tc *TaskCreate) SetLocalUserSSHKeyComment(s string) *TaskCreate {
	tc.mutation.SetLocalUserSSHKeyComment(s)
	return tc
}

// SetNillableLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSSHKeyComment(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSSHKeyComment(*s)
	}
	return tc
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (tc *TaskCreate) SetLocalUserSSHKeyFile(s string) *TaskCreate {
	tc.mutation.SetLocalUserSSHKeyFile(s)
	return tc
}

// SetNillableLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSSHKeyFile(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSSHKeyFile(*s)
	}
	return tc
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (tc *TaskCreate) SetLocalUserSSHKeyPassphrase(s string) *TaskCreate {
	tc.mutation.SetLocalUserSSHKeyPassphrase(s)
	return tc
}

// SetNillableLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSSHKeyPassphrase(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSSHKeyPassphrase(*s)
	}
	return tc
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (tc *TaskCreate) SetLocalUserSSHKeyType(s string) *TaskCreate {
	tc.mutation.SetLocalUserSSHKeyType(s)
	return tc
}

// SetNillableLocalUserSSHKeyType sets the "local_user_ssh_key_type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserSSHKeyType(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserSSHKeyType(*s)
	}
	return tc
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (tc *TaskCreate) SetLocalUserUmask(s string) *TaskCreate {
	tc.mutation.SetLocalUserUmask(s)
	return tc
}

// SetNillableLocalUserUmask sets the "local_user_umask" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalUserUmask(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalUserUmask(*s)
	}
	return tc
}

// SetLocalGroupID sets the "local_group_id" field.
func (tc *TaskCreate) SetLocalGroupID(s string) *TaskCreate {
	tc.mutation.SetLocalGroupID(s)
	return tc
}

// SetNillableLocalGroupID sets the "local_group_id" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupID(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupID(*s)
	}
	return tc
}

// SetLocalGroupName sets the "local_group_name" field.
func (tc *TaskCreate) SetLocalGroupName(s string) *TaskCreate {
	tc.mutation.SetLocalGroupName(s)
	return tc
}

// SetNillableLocalGroupName sets the "local_group_name" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupName(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupName(*s)
	}
	return tc
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (tc *TaskCreate) SetLocalGroupDescription(s string) *TaskCreate {
	tc.mutation.SetLocalGroupDescription(s)
	return tc
}

// SetNillableLocalGroupDescription sets the "local_group_description" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupDescription(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupDescription(*s)
	}
	return tc
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (tc *TaskCreate) SetLocalGroupSystem(b bool) *TaskCreate {
	tc.mutation.SetLocalGroupSystem(b)
	return tc
}

// SetNillableLocalGroupSystem sets the "local_group_system" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupSystem(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalGroupSystem(*b)
	}
	return tc
}

// SetLocalGroupForce sets the "local_group_force" field.
func (tc *TaskCreate) SetLocalGroupForce(b bool) *TaskCreate {
	tc.mutation.SetLocalGroupForce(b)
	return tc
}

// SetNillableLocalGroupForce sets the "local_group_force" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupForce(b *bool) *TaskCreate {
	if b != nil {
		tc.SetLocalGroupForce(*b)
	}
	return tc
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (tc *TaskCreate) SetLocalGroupMembers(s string) *TaskCreate {
	tc.mutation.SetLocalGroupMembers(s)
	return tc
}

// SetNillableLocalGroupMembers sets the "local_group_members" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupMembers(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupMembers(*s)
	}
	return tc
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (tc *TaskCreate) SetLocalGroupMembersToInclude(s string) *TaskCreate {
	tc.mutation.SetLocalGroupMembersToInclude(s)
	return tc
}

// SetNillableLocalGroupMembersToInclude sets the "local_group_members_to_include" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupMembersToInclude(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupMembersToInclude(*s)
	}
	return tc
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (tc *TaskCreate) SetLocalGroupMembersToExclude(s string) *TaskCreate {
	tc.mutation.SetLocalGroupMembersToExclude(s)
	return tc
}

// SetNillableLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field if the given value is not nil.
func (tc *TaskCreate) SetNillableLocalGroupMembersToExclude(s *string) *TaskCreate {
	if s != nil {
		tc.SetLocalGroupMembersToExclude(*s)
	}
	return tc
}

// SetMsiProductid sets the "msi_productid" field.
func (tc *TaskCreate) SetMsiProductid(s string) *TaskCreate {
	tc.mutation.SetMsiProductid(s)
	return tc
}

// SetNillableMsiProductid sets the "msi_productid" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiProductid(s *string) *TaskCreate {
	if s != nil {
		tc.SetMsiProductid(*s)
	}
	return tc
}

// SetMsiPath sets the "msi_path" field.
func (tc *TaskCreate) SetMsiPath(s string) *TaskCreate {
	tc.mutation.SetMsiPath(s)
	return tc
}

// SetNillableMsiPath sets the "msi_path" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiPath(s *string) *TaskCreate {
	if s != nil {
		tc.SetMsiPath(*s)
	}
	return tc
}

// SetMsiArguments sets the "msi_arguments" field.
func (tc *TaskCreate) SetMsiArguments(s string) *TaskCreate {
	tc.mutation.SetMsiArguments(s)
	return tc
}

// SetNillableMsiArguments sets the "msi_arguments" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiArguments(s *string) *TaskCreate {
	if s != nil {
		tc.SetMsiArguments(*s)
	}
	return tc
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (tc *TaskCreate) SetMsiFileHash(s string) *TaskCreate {
	tc.mutation.SetMsiFileHash(s)
	return tc
}

// SetNillableMsiFileHash sets the "msi_file_hash" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiFileHash(s *string) *TaskCreate {
	if s != nil {
		tc.SetMsiFileHash(*s)
	}
	return tc
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (tc *TaskCreate) SetMsiFileHashAlg(tfha task.MsiFileHashAlg) *TaskCreate {
	tc.mutation.SetMsiFileHashAlg(tfha)
	return tc
}

// SetNillableMsiFileHashAlg sets the "msi_file_hash_alg" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiFileHashAlg(tfha *task.MsiFileHashAlg) *TaskCreate {
	if tfha != nil {
		tc.SetMsiFileHashAlg(*tfha)
	}
	return tc
}

// SetMsiLogPath sets the "msi_log_path" field.
func (tc *TaskCreate) SetMsiLogPath(s string) *TaskCreate {
	tc.mutation.SetMsiLogPath(s)
	return tc
}

// SetNillableMsiLogPath sets the "msi_log_path" field if the given value is not nil.
func (tc *TaskCreate) SetNillableMsiLogPath(s *string) *TaskCreate {
	if s != nil {
		tc.SetMsiLogPath(*s)
	}
	return tc
}

// SetScript sets the "script" field.
func (tc *TaskCreate) SetScript(s string) *TaskCreate {
	tc.mutation.SetScript(s)
	return tc
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (tc *TaskCreate) SetNillableScript(s *string) *TaskCreate {
	if s != nil {
		tc.SetScript(*s)
	}
	return tc
}

// SetScriptExecutable sets the "script_executable" field.
func (tc *TaskCreate) SetScriptExecutable(s string) *TaskCreate {
	tc.mutation.SetScriptExecutable(s)
	return tc
}

// SetNillableScriptExecutable sets the "script_executable" field if the given value is not nil.
func (tc *TaskCreate) SetNillableScriptExecutable(s *string) *TaskCreate {
	if s != nil {
		tc.SetScriptExecutable(*s)
	}
	return tc
}

// SetScriptCreates sets the "script_creates" field.
func (tc *TaskCreate) SetScriptCreates(s string) *TaskCreate {
	tc.mutation.SetScriptCreates(s)
	return tc
}

// SetNillableScriptCreates sets the "script_creates" field if the given value is not nil.
func (tc *TaskCreate) SetNillableScriptCreates(s *string) *TaskCreate {
	if s != nil {
		tc.SetScriptCreates(*s)
	}
	return tc
}

// SetScriptRun sets the "script_run" field.
func (tc *TaskCreate) SetScriptRun(tr task.ScriptRun) *TaskCreate {
	tc.mutation.SetScriptRun(tr)
	return tc
}

// SetNillableScriptRun sets the "script_run" field if the given value is not nil.
func (tc *TaskCreate) SetNillableScriptRun(tr *task.ScriptRun) *TaskCreate {
	if tr != nil {
		tc.SetScriptRun(*tr)
	}
	return tc
}

// SetAgentType sets the "agent_type" field.
func (tc *TaskCreate) SetAgentType(tt task.AgentType) *TaskCreate {
	tc.mutation.SetAgentType(tt)
	return tc
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (tc *TaskCreate) SetNillableAgentType(tt *task.AgentType) *TaskCreate {
	if tt != nil {
		tc.SetAgentType(*tt)
	}
	return tc
}

// SetWhen sets the "when" field.
func (tc *TaskCreate) SetWhen(t time.Time) *TaskCreate {
	tc.mutation.SetWhen(t)
	return tc
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (tc *TaskCreate) SetNillableWhen(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetWhen(*t)
	}
	return tc
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tc *TaskCreate) AddTagIDs(ids ...int) *TaskCreate {
	tc.mutation.AddTagIDs(ids...)
	return tc
}

// AddTags adds the "tags" edges to the Tag entity.
func (tc *TaskCreate) AddTags(t ...*Tag) *TaskCreate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tc.AddTagIDs(ids...)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (tc *TaskCreate) SetProfileID(id int) *TaskCreate {
	tc.mutation.SetProfileID(id)
	return tc
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableProfileID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetProfileID(*id)
	}
	return tc
}

// SetProfile sets the "profile" edge to the Profile entity.
func (tc *TaskCreate) SetProfile(p *Profile) *TaskCreate {
	return tc.SetProfileID(p.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.PackageID(); !ok {
		v := task.DefaultPackageID
		tc.mutation.SetPackageID(v)
	}
	if _, ok := tc.mutation.PackageName(); !ok {
		v := task.DefaultPackageName
		tc.mutation.SetPackageName(v)
	}
	if _, ok := tc.mutation.PackageLatest(); !ok {
		v := task.DefaultPackageLatest
		tc.mutation.SetPackageLatest(v)
	}
	if _, ok := tc.mutation.RegistryKey(); !ok {
		v := task.DefaultRegistryKey
		tc.mutation.SetRegistryKey(v)
	}
	if _, ok := tc.mutation.RegistryKeyValueName(); !ok {
		v := task.DefaultRegistryKeyValueName
		tc.mutation.SetRegistryKeyValueName(v)
	}
	if _, ok := tc.mutation.RegistryKeyValueData(); !ok {
		v := task.DefaultRegistryKeyValueData
		tc.mutation.SetRegistryKeyValueData(v)
	}
	if _, ok := tc.mutation.RegistryHex(); !ok {
		v := task.DefaultRegistryHex
		tc.mutation.SetRegistryHex(v)
	}
	if _, ok := tc.mutation.RegistryForce(); !ok {
		v := task.DefaultRegistryForce
		tc.mutation.SetRegistryForce(v)
	}
	if _, ok := tc.mutation.LocalUserUsername(); !ok {
		v := task.DefaultLocalUserUsername
		tc.mutation.SetLocalUserUsername(v)
	}
	if _, ok := tc.mutation.LocalUserDescription(); !ok {
		v := task.DefaultLocalUserDescription
		tc.mutation.SetLocalUserDescription(v)
	}
	if _, ok := tc.mutation.LocalUserDisable(); !ok {
		v := task.DefaultLocalUserDisable
		tc.mutation.SetLocalUserDisable(v)
	}
	if _, ok := tc.mutation.LocalUserFullname(); !ok {
		v := task.DefaultLocalUserFullname
		tc.mutation.SetLocalUserFullname(v)
	}
	if _, ok := tc.mutation.LocalUserPassword(); !ok {
		v := task.DefaultLocalUserPassword
		tc.mutation.SetLocalUserPassword(v)
	}
	if _, ok := tc.mutation.LocalUserPasswordChangeNotAllowed(); !ok {
		v := task.DefaultLocalUserPasswordChangeNotAllowed
		tc.mutation.SetLocalUserPasswordChangeNotAllowed(v)
	}
	if _, ok := tc.mutation.LocalUserPasswordChangeRequired(); !ok {
		v := task.DefaultLocalUserPasswordChangeRequired
		tc.mutation.SetLocalUserPasswordChangeRequired(v)
	}
	if _, ok := tc.mutation.LocalUserPasswordNeverExpires(); !ok {
		v := task.DefaultLocalUserPasswordNeverExpires
		tc.mutation.SetLocalUserPasswordNeverExpires(v)
	}
	if _, ok := tc.mutation.LocalUserAppend(); !ok {
		v := task.DefaultLocalUserAppend
		tc.mutation.SetLocalUserAppend(v)
	}
	if _, ok := tc.mutation.LocalUserCreateHome(); !ok {
		v := task.DefaultLocalUserCreateHome
		tc.mutation.SetLocalUserCreateHome(v)
	}
	if _, ok := tc.mutation.LocalUserForce(); !ok {
		v := task.DefaultLocalUserForce
		tc.mutation.SetLocalUserForce(v)
	}
	if _, ok := tc.mutation.LocalUserGenerateSSHKey(); !ok {
		v := task.DefaultLocalUserGenerateSSHKey
		tc.mutation.SetLocalUserGenerateSSHKey(v)
	}
	if _, ok := tc.mutation.LocalUserMoveHome(); !ok {
		v := task.DefaultLocalUserMoveHome
		tc.mutation.SetLocalUserMoveHome(v)
	}
	if _, ok := tc.mutation.LocalUserNonunique(); !ok {
		v := task.DefaultLocalUserNonunique
		tc.mutation.SetLocalUserNonunique(v)
	}
	if _, ok := tc.mutation.LocalUserPasswordLock(); !ok {
		v := task.DefaultLocalUserPasswordLock
		tc.mutation.SetLocalUserPasswordLock(v)
	}
	if _, ok := tc.mutation.LocalUserSystem(); !ok {
		v := task.DefaultLocalUserSystem
		tc.mutation.SetLocalUserSystem(v)
	}
	if _, ok := tc.mutation.LocalUserSSHKeyType(); !ok {
		v := task.DefaultLocalUserSSHKeyType
		tc.mutation.SetLocalUserSSHKeyType(v)
	}
	if _, ok := tc.mutation.LocalGroupID(); !ok {
		v := task.DefaultLocalGroupID
		tc.mutation.SetLocalGroupID(v)
	}
	if _, ok := tc.mutation.LocalGroupName(); !ok {
		v := task.DefaultLocalGroupName
		tc.mutation.SetLocalGroupName(v)
	}
	if _, ok := tc.mutation.LocalGroupDescription(); !ok {
		v := task.DefaultLocalGroupDescription
		tc.mutation.SetLocalGroupDescription(v)
	}
	if _, ok := tc.mutation.LocalGroupSystem(); !ok {
		v := task.DefaultLocalGroupSystem
		tc.mutation.SetLocalGroupSystem(v)
	}
	if _, ok := tc.mutation.LocalGroupForce(); !ok {
		v := task.DefaultLocalGroupForce
		tc.mutation.SetLocalGroupForce(v)
	}
	if _, ok := tc.mutation.LocalGroupMembers(); !ok {
		v := task.DefaultLocalGroupMembers
		tc.mutation.SetLocalGroupMembers(v)
	}
	if _, ok := tc.mutation.LocalGroupMembersToInclude(); !ok {
		v := task.DefaultLocalGroupMembersToInclude
		tc.mutation.SetLocalGroupMembersToInclude(v)
	}
	if _, ok := tc.mutation.LocalGroupMembersToExclude(); !ok {
		v := task.DefaultLocalGroupMembersToExclude
		tc.mutation.SetLocalGroupMembersToExclude(v)
	}
	if _, ok := tc.mutation.MsiProductid(); !ok {
		v := task.DefaultMsiProductid
		tc.mutation.SetMsiProductid(v)
	}
	if _, ok := tc.mutation.MsiPath(); !ok {
		v := task.DefaultMsiPath
		tc.mutation.SetMsiPath(v)
	}
	if _, ok := tc.mutation.MsiArguments(); !ok {
		v := task.DefaultMsiArguments
		tc.mutation.SetMsiArguments(v)
	}
	if _, ok := tc.mutation.MsiFileHash(); !ok {
		v := task.DefaultMsiFileHash
		tc.mutation.SetMsiFileHash(v)
	}
	if _, ok := tc.mutation.MsiLogPath(); !ok {
		v := task.DefaultMsiLogPath
		tc.mutation.SetMsiLogPath(v)
	}
	if _, ok := tc.mutation.Script(); !ok {
		v := task.DefaultScript
		tc.mutation.SetScript(v)
	}
	if _, ok := tc.mutation.ScriptExecutable(); !ok {
		v := task.DefaultScriptExecutable
		tc.mutation.SetScriptExecutable(v)
	}
	if _, ok := tc.mutation.ScriptCreates(); !ok {
		v := task.DefaultScriptCreates
		tc.mutation.SetScriptCreates(v)
	}
	if _, ok := tc.mutation.AgentType(); !ok {
		v := task.DefaultAgentType
		tc.mutation.SetAgentType(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Task.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if v, ok := tc.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tc.mutation.RegistryKeyValueType(); ok {
		if err := task.RegistryKeyValueTypeValidator(v); err != nil {
			return &ValidationError{Name: "registry_key_value_type", err: fmt.Errorf(`ent: validator failed for field "Task.registry_key_value_type": %w`, err)}
		}
	}
	if v, ok := tc.mutation.MsiFileHashAlg(); ok {
		if err := task.MsiFileHashAlgValidator(v); err != nil {
			return &ValidationError{Name: "msi_file_hash_alg", err: fmt.Errorf(`ent: validator failed for field "Task.msi_file_hash_alg": %w`, err)}
		}
	}
	if v, ok := tc.mutation.ScriptRun(); ok {
		if err := task.ScriptRunValidator(v); err != nil {
			return &ValidationError{Name: "script_run", err: fmt.Errorf(`ent: validator failed for field "Task.script_run": %w`, err)}
		}
	}
	if v, ok := tc.mutation.AgentType(); ok {
		if err := task.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Task.agent_type": %w`, err)}
		}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	_spec.OnConflict = tc.conflict
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.PackageID(); ok {
		_spec.SetField(task.FieldPackageID, field.TypeString, value)
		_node.PackageID = value
	}
	if value, ok := tc.mutation.PackageName(); ok {
		_spec.SetField(task.FieldPackageName, field.TypeString, value)
		_node.PackageName = value
	}
	if value, ok := tc.mutation.PackageLatest(); ok {
		_spec.SetField(task.FieldPackageLatest, field.TypeBool, value)
		_node.PackageLatest = value
	}
	if value, ok := tc.mutation.RegistryKey(); ok {
		_spec.SetField(task.FieldRegistryKey, field.TypeString, value)
		_node.RegistryKey = value
	}
	if value, ok := tc.mutation.RegistryKeyValueName(); ok {
		_spec.SetField(task.FieldRegistryKeyValueName, field.TypeString, value)
		_node.RegistryKeyValueName = value
	}
	if value, ok := tc.mutation.RegistryKeyValueType(); ok {
		_spec.SetField(task.FieldRegistryKeyValueType, field.TypeEnum, value)
		_node.RegistryKeyValueType = value
	}
	if value, ok := tc.mutation.RegistryKeyValueData(); ok {
		_spec.SetField(task.FieldRegistryKeyValueData, field.TypeString, value)
		_node.RegistryKeyValueData = value
	}
	if value, ok := tc.mutation.RegistryHex(); ok {
		_spec.SetField(task.FieldRegistryHex, field.TypeBool, value)
		_node.RegistryHex = value
	}
	if value, ok := tc.mutation.RegistryForce(); ok {
		_spec.SetField(task.FieldRegistryForce, field.TypeBool, value)
		_node.RegistryForce = value
	}
	if value, ok := tc.mutation.LocalUserUsername(); ok {
		_spec.SetField(task.FieldLocalUserUsername, field.TypeString, value)
		_node.LocalUserUsername = value
	}
	if value, ok := tc.mutation.LocalUserDescription(); ok {
		_spec.SetField(task.FieldLocalUserDescription, field.TypeString, value)
		_node.LocalUserDescription = value
	}
	if value, ok := tc.mutation.LocalUserDisable(); ok {
		_spec.SetField(task.FieldLocalUserDisable, field.TypeBool, value)
		_node.LocalUserDisable = value
	}
	if value, ok := tc.mutation.LocalUserFullname(); ok {
		_spec.SetField(task.FieldLocalUserFullname, field.TypeString, value)
		_node.LocalUserFullname = value
	}
	if value, ok := tc.mutation.LocalUserPassword(); ok {
		_spec.SetField(task.FieldLocalUserPassword, field.TypeString, value)
		_node.LocalUserPassword = value
	}
	if value, ok := tc.mutation.LocalUserPasswordChangeNotAllowed(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeNotAllowed, field.TypeBool, value)
		_node.LocalUserPasswordChangeNotAllowed = value
	}
	if value, ok := tc.mutation.LocalUserPasswordChangeRequired(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeRequired, field.TypeBool, value)
		_node.LocalUserPasswordChangeRequired = value
	}
	if value, ok := tc.mutation.LocalUserPasswordNeverExpires(); ok {
		_spec.SetField(task.FieldLocalUserPasswordNeverExpires, field.TypeBool, value)
		_node.LocalUserPasswordNeverExpires = value
	}
	if value, ok := tc.mutation.LocalUserAppend(); ok {
		_spec.SetField(task.FieldLocalUserAppend, field.TypeBool, value)
		_node.LocalUserAppend = value
	}
	if value, ok := tc.mutation.LocalUserCreateHome(); ok {
		_spec.SetField(task.FieldLocalUserCreateHome, field.TypeBool, value)
		_node.LocalUserCreateHome = value
	}
	if value, ok := tc.mutation.LocalUserExpires(); ok {
		_spec.SetField(task.FieldLocalUserExpires, field.TypeString, value)
		_node.LocalUserExpires = value
	}
	if value, ok := tc.mutation.LocalUserForce(); ok {
		_spec.SetField(task.FieldLocalUserForce, field.TypeBool, value)
		_node.LocalUserForce = value
	}
	if value, ok := tc.mutation.LocalUserGenerateSSHKey(); ok {
		_spec.SetField(task.FieldLocalUserGenerateSSHKey, field.TypeBool, value)
		_node.LocalUserGenerateSSHKey = value
	}
	if value, ok := tc.mutation.LocalUserGroup(); ok {
		_spec.SetField(task.FieldLocalUserGroup, field.TypeString, value)
		_node.LocalUserGroup = value
	}
	if value, ok := tc.mutation.LocalUserGroups(); ok {
		_spec.SetField(task.FieldLocalUserGroups, field.TypeString, value)
		_node.LocalUserGroups = value
	}
	if value, ok := tc.mutation.LocalUserHome(); ok {
		_spec.SetField(task.FieldLocalUserHome, field.TypeString, value)
		_node.LocalUserHome = value
	}
	if value, ok := tc.mutation.LocalUserMoveHome(); ok {
		_spec.SetField(task.FieldLocalUserMoveHome, field.TypeBool, value)
		_node.LocalUserMoveHome = value
	}
	if value, ok := tc.mutation.LocalUserNonunique(); ok {
		_spec.SetField(task.FieldLocalUserNonunique, field.TypeBool, value)
		_node.LocalUserNonunique = value
	}
	if value, ok := tc.mutation.LocalUserPasswordExpireAccountDisable(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireAccountDisable, field.TypeString, value)
		_node.LocalUserPasswordExpireAccountDisable = value
	}
	if value, ok := tc.mutation.LocalUserPasswordExpireMax(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMax, field.TypeString, value)
		_node.LocalUserPasswordExpireMax = value
	}
	if value, ok := tc.mutation.LocalUserPasswordExpireMin(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMin, field.TypeString, value)
		_node.LocalUserPasswordExpireMin = value
	}
	if value, ok := tc.mutation.LocalUserPasswordExpireWarn(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireWarn, field.TypeString, value)
		_node.LocalUserPasswordExpireWarn = value
	}
	if value, ok := tc.mutation.LocalUserPasswordLock(); ok {
		_spec.SetField(task.FieldLocalUserPasswordLock, field.TypeBool, value)
		_node.LocalUserPasswordLock = value
	}
	if value, ok := tc.mutation.LocalUserSeuser(); ok {
		_spec.SetField(task.FieldLocalUserSeuser, field.TypeString, value)
		_node.LocalUserSeuser = value
	}
	if value, ok := tc.mutation.LocalUserShell(); ok {
		_spec.SetField(task.FieldLocalUserShell, field.TypeString, value)
		_node.LocalUserShell = value
	}
	if value, ok := tc.mutation.LocalUserSkeleton(); ok {
		_spec.SetField(task.FieldLocalUserSkeleton, field.TypeString, value)
		_node.LocalUserSkeleton = value
	}
	if value, ok := tc.mutation.LocalUserSystem(); ok {
		_spec.SetField(task.FieldLocalUserSystem, field.TypeBool, value)
		_node.LocalUserSystem = value
	}
	if value, ok := tc.mutation.LocalUserID(); ok {
		_spec.SetField(task.FieldLocalUserID, field.TypeString, value)
		_node.LocalUserID = value
	}
	if value, ok := tc.mutation.LocalUserIDMax(); ok {
		_spec.SetField(task.FieldLocalUserIDMax, field.TypeString, value)
		_node.LocalUserIDMax = value
	}
	if value, ok := tc.mutation.LocalUserIDMin(); ok {
		_spec.SetField(task.FieldLocalUserIDMin, field.TypeString, value)
		_node.LocalUserIDMin = value
	}
	if value, ok := tc.mutation.LocalUserSSHKeyBits(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyBits, field.TypeString, value)
		_node.LocalUserSSHKeyBits = value
	}
	if value, ok := tc.mutation.LocalUserSSHKeyComment(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyComment, field.TypeString, value)
		_node.LocalUserSSHKeyComment = value
	}
	if value, ok := tc.mutation.LocalUserSSHKeyFile(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyFile, field.TypeString, value)
		_node.LocalUserSSHKeyFile = value
	}
	if value, ok := tc.mutation.LocalUserSSHKeyPassphrase(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyPassphrase, field.TypeString, value)
		_node.LocalUserSSHKeyPassphrase = value
	}
	if value, ok := tc.mutation.LocalUserSSHKeyType(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyType, field.TypeString, value)
		_node.LocalUserSSHKeyType = value
	}
	if value, ok := tc.mutation.LocalUserUmask(); ok {
		_spec.SetField(task.FieldLocalUserUmask, field.TypeString, value)
		_node.LocalUserUmask = value
	}
	if value, ok := tc.mutation.LocalGroupID(); ok {
		_spec.SetField(task.FieldLocalGroupID, field.TypeString, value)
		_node.LocalGroupID = value
	}
	if value, ok := tc.mutation.LocalGroupName(); ok {
		_spec.SetField(task.FieldLocalGroupName, field.TypeString, value)
		_node.LocalGroupName = value
	}
	if value, ok := tc.mutation.LocalGroupDescription(); ok {
		_spec.SetField(task.FieldLocalGroupDescription, field.TypeString, value)
		_node.LocalGroupDescription = value
	}
	if value, ok := tc.mutation.LocalGroupSystem(); ok {
		_spec.SetField(task.FieldLocalGroupSystem, field.TypeBool, value)
		_node.LocalGroupSystem = value
	}
	if value, ok := tc.mutation.LocalGroupForce(); ok {
		_spec.SetField(task.FieldLocalGroupForce, field.TypeBool, value)
		_node.LocalGroupForce = value
	}
	if value, ok := tc.mutation.LocalGroupMembers(); ok {
		_spec.SetField(task.FieldLocalGroupMembers, field.TypeString, value)
		_node.LocalGroupMembers = value
	}
	if value, ok := tc.mutation.LocalGroupMembersToInclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToInclude, field.TypeString, value)
		_node.LocalGroupMembersToInclude = value
	}
	if value, ok := tc.mutation.LocalGroupMembersToExclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToExclude, field.TypeString, value)
		_node.LocalGroupMembersToExclude = value
	}
	if value, ok := tc.mutation.MsiProductid(); ok {
		_spec.SetField(task.FieldMsiProductid, field.TypeString, value)
		_node.MsiProductid = value
	}
	if value, ok := tc.mutation.MsiPath(); ok {
		_spec.SetField(task.FieldMsiPath, field.TypeString, value)
		_node.MsiPath = value
	}
	if value, ok := tc.mutation.MsiArguments(); ok {
		_spec.SetField(task.FieldMsiArguments, field.TypeString, value)
		_node.MsiArguments = value
	}
	if value, ok := tc.mutation.MsiFileHash(); ok {
		_spec.SetField(task.FieldMsiFileHash, field.TypeString, value)
		_node.MsiFileHash = value
	}
	if value, ok := tc.mutation.MsiFileHashAlg(); ok {
		_spec.SetField(task.FieldMsiFileHashAlg, field.TypeEnum, value)
		_node.MsiFileHashAlg = value
	}
	if value, ok := tc.mutation.MsiLogPath(); ok {
		_spec.SetField(task.FieldMsiLogPath, field.TypeString, value)
		_node.MsiLogPath = value
	}
	if value, ok := tc.mutation.Script(); ok {
		_spec.SetField(task.FieldScript, field.TypeString, value)
		_node.Script = value
	}
	if value, ok := tc.mutation.ScriptExecutable(); ok {
		_spec.SetField(task.FieldScriptExecutable, field.TypeString, value)
		_node.ScriptExecutable = value
	}
	if value, ok := tc.mutation.ScriptCreates(); ok {
		_spec.SetField(task.FieldScriptCreates, field.TypeString, value)
		_node.ScriptCreates = value
	}
	if value, ok := tc.mutation.ScriptRun(); ok {
		_spec.SetField(task.FieldScriptRun, field.TypeEnum, value)
		_node.ScriptRun = value
	}
	if value, ok := tc.mutation.AgentType(); ok {
		_spec.SetField(task.FieldAgentType, field.TypeEnum, value)
		_node.AgentType = value
	}
	if value, ok := tc.mutation.When(); ok {
		_spec.SetField(task.FieldWhen, field.TypeTime, value)
		_node.When = value
	}
	if nodes := tc.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProfileTable,
			Columns: []string{task.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.profile_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.Create().
//		SetName(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tc *TaskCreate) OnConflict(opts ...sql.ConflictOption) *TaskUpsertOne {
	tc.conflict = opts
	return &TaskUpsertOne{
		create: tc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tc *TaskCreate) OnConflictColumns(columns ...string) *TaskUpsertOne {
	tc.conflict = append(tc.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertOne{
		create: tc,
	}
}

type (
	// TaskUpsertOne is the builder for "upsert"-ing
	//  one Task node.
	TaskUpsertOne struct {
		create *TaskCreate
	}

	// TaskUpsert is the "OnConflict" setter.
	TaskUpsert struct {
		*sql.UpdateSet
	}
)

// SetName sets the "name" field.
func (u *TaskUpsert) SetName(v string) *TaskUpsert {
	u.Set(task.FieldName, v)
	return u
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateName() *TaskUpsert {
	u.SetExcluded(task.FieldName)
	return u
}

// SetType sets the "type" field.
func (u *TaskUpsert) SetType(v task.Type) *TaskUpsert {
	u.Set(task.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateType() *TaskUpsert {
	u.SetExcluded(task.FieldType)
	return u
}

// SetPackageID sets the "package_id" field.
func (u *TaskUpsert) SetPackageID(v string) *TaskUpsert {
	u.Set(task.FieldPackageID, v)
	return u
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdatePackageID() *TaskUpsert {
	u.SetExcluded(task.FieldPackageID)
	return u
}

// ClearPackageID clears the value of the "package_id" field.
func (u *TaskUpsert) ClearPackageID() *TaskUpsert {
	u.SetNull(task.FieldPackageID)
	return u
}

// SetPackageName sets the "package_name" field.
func (u *TaskUpsert) SetPackageName(v string) *TaskUpsert {
	u.Set(task.FieldPackageName, v)
	return u
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdatePackageName() *TaskUpsert {
	u.SetExcluded(task.FieldPackageName)
	return u
}

// ClearPackageName clears the value of the "package_name" field.
func (u *TaskUpsert) ClearPackageName() *TaskUpsert {
	u.SetNull(task.FieldPackageName)
	return u
}

// SetPackageLatest sets the "package_latest" field.
func (u *TaskUpsert) SetPackageLatest(v bool) *TaskUpsert {
	u.Set(task.FieldPackageLatest, v)
	return u
}

// UpdatePackageLatest sets the "package_latest" field to the value that was provided on create.
func (u *TaskUpsert) UpdatePackageLatest() *TaskUpsert {
	u.SetExcluded(task.FieldPackageLatest)
	return u
}

// ClearPackageLatest clears the value of the "package_latest" field.
func (u *TaskUpsert) ClearPackageLatest() *TaskUpsert {
	u.SetNull(task.FieldPackageLatest)
	return u
}

// SetRegistryKey sets the "registry_key" field.
func (u *TaskUpsert) SetRegistryKey(v string) *TaskUpsert {
	u.Set(task.FieldRegistryKey, v)
	return u
}

// UpdateRegistryKey sets the "registry_key" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryKey() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryKey)
	return u
}

// ClearRegistryKey clears the value of the "registry_key" field.
func (u *TaskUpsert) ClearRegistryKey() *TaskUpsert {
	u.SetNull(task.FieldRegistryKey)
	return u
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (u *TaskUpsert) SetRegistryKeyValueName(v string) *TaskUpsert {
	u.Set(task.FieldRegistryKeyValueName, v)
	return u
}

// UpdateRegistryKeyValueName sets the "registry_key_value_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryKeyValueName() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryKeyValueName)
	return u
}

// ClearRegistryKeyValueName clears the value of the "registry_key_value_name" field.
func (u *TaskUpsert) ClearRegistryKeyValueName() *TaskUpsert {
	u.SetNull(task.FieldRegistryKeyValueName)
	return u
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (u *TaskUpsert) SetRegistryKeyValueType(v task.RegistryKeyValueType) *TaskUpsert {
	u.Set(task.FieldRegistryKeyValueType, v)
	return u
}

// UpdateRegistryKeyValueType sets the "registry_key_value_type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryKeyValueType() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryKeyValueType)
	return u
}

// ClearRegistryKeyValueType clears the value of the "registry_key_value_type" field.
func (u *TaskUpsert) ClearRegistryKeyValueType() *TaskUpsert {
	u.SetNull(task.FieldRegistryKeyValueType)
	return u
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (u *TaskUpsert) SetRegistryKeyValueData(v string) *TaskUpsert {
	u.Set(task.FieldRegistryKeyValueData, v)
	return u
}

// UpdateRegistryKeyValueData sets the "registry_key_value_data" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryKeyValueData() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryKeyValueData)
	return u
}

// ClearRegistryKeyValueData clears the value of the "registry_key_value_data" field.
func (u *TaskUpsert) ClearRegistryKeyValueData() *TaskUpsert {
	u.SetNull(task.FieldRegistryKeyValueData)
	return u
}

// SetRegistryHex sets the "registry_hex" field.
func (u *TaskUpsert) SetRegistryHex(v bool) *TaskUpsert {
	u.Set(task.FieldRegistryHex, v)
	return u
}

// UpdateRegistryHex sets the "registry_hex" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryHex() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryHex)
	return u
}

// ClearRegistryHex clears the value of the "registry_hex" field.
func (u *TaskUpsert) ClearRegistryHex() *TaskUpsert {
	u.SetNull(task.FieldRegistryHex)
	return u
}

// SetRegistryForce sets the "registry_force" field.
func (u *TaskUpsert) SetRegistryForce(v bool) *TaskUpsert {
	u.Set(task.FieldRegistryForce, v)
	return u
}

// UpdateRegistryForce sets the "registry_force" field to the value that was provided on create.
func (u *TaskUpsert) UpdateRegistryForce() *TaskUpsert {
	u.SetExcluded(task.FieldRegistryForce)
	return u
}

// ClearRegistryForce clears the value of the "registry_force" field.
func (u *TaskUpsert) ClearRegistryForce() *TaskUpsert {
	u.SetNull(task.FieldRegistryForce)
	return u
}

// SetLocalUserUsername sets the "local_user_username" field.
func (u *TaskUpsert) SetLocalUserUsername(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserUsername, v)
	return u
}

// UpdateLocalUserUsername sets the "local_user_username" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserUsername() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserUsername)
	return u
}

// ClearLocalUserUsername clears the value of the "local_user_username" field.
func (u *TaskUpsert) ClearLocalUserUsername() *TaskUpsert {
	u.SetNull(task.FieldLocalUserUsername)
	return u
}

// SetLocalUserDescription sets the "local_user_description" field.
func (u *TaskUpsert) SetLocalUserDescription(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserDescription, v)
	return u
}

// UpdateLocalUserDescription sets the "local_user_description" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserDescription() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserDescription)
	return u
}

// ClearLocalUserDescription clears the value of the "local_user_description" field.
func (u *TaskUpsert) ClearLocalUserDescription() *TaskUpsert {
	u.SetNull(task.FieldLocalUserDescription)
	return u
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (u *TaskUpsert) SetLocalUserDisable(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserDisable, v)
	return u
}

// UpdateLocalUserDisable sets the "local_user_disable" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserDisable() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserDisable)
	return u
}

// ClearLocalUserDisable clears the value of the "local_user_disable" field.
func (u *TaskUpsert) ClearLocalUserDisable() *TaskUpsert {
	u.SetNull(task.FieldLocalUserDisable)
	return u
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (u *TaskUpsert) SetLocalUserFullname(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserFullname, v)
	return u
}

// UpdateLocalUserFullname sets the "local_user_fullname" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserFullname() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserFullname)
	return u
}

// ClearLocalUserFullname clears the value of the "local_user_fullname" field.
func (u *TaskUpsert) ClearLocalUserFullname() *TaskUpsert {
	u.SetNull(task.FieldLocalUserFullname)
	return u
}

// SetLocalUserPassword sets the "local_user_password" field.
func (u *TaskUpsert) SetLocalUserPassword(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserPassword, v)
	return u
}

// UpdateLocalUserPassword sets the "local_user_password" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPassword() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPassword)
	return u
}

// ClearLocalUserPassword clears the value of the "local_user_password" field.
func (u *TaskUpsert) ClearLocalUserPassword() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPassword)
	return u
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (u *TaskUpsert) SetLocalUserPasswordChangeNotAllowed(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordChangeNotAllowed, v)
	return u
}

// UpdateLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordChangeNotAllowed() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordChangeNotAllowed)
	return u
}

// ClearLocalUserPasswordChangeNotAllowed clears the value of the "local_user_password_change_not_allowed" field.
func (u *TaskUpsert) ClearLocalUserPasswordChangeNotAllowed() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordChangeNotAllowed)
	return u
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (u *TaskUpsert) SetLocalUserPasswordChangeRequired(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordChangeRequired, v)
	return u
}

// UpdateLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordChangeRequired() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordChangeRequired)
	return u
}

// ClearLocalUserPasswordChangeRequired clears the value of the "local_user_password_change_required" field.
func (u *TaskUpsert) ClearLocalUserPasswordChangeRequired() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordChangeRequired)
	return u
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (u *TaskUpsert) SetLocalUserPasswordNeverExpires(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordNeverExpires, v)
	return u
}

// UpdateLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordNeverExpires() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordNeverExpires)
	return u
}

// ClearLocalUserPasswordNeverExpires clears the value of the "local_user_password_never_expires" field.
func (u *TaskUpsert) ClearLocalUserPasswordNeverExpires() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordNeverExpires)
	return u
}

// SetLocalUserAppend sets the "local_user_append" field.
func (u *TaskUpsert) SetLocalUserAppend(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserAppend, v)
	return u
}

// UpdateLocalUserAppend sets the "local_user_append" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserAppend() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserAppend)
	return u
}

// ClearLocalUserAppend clears the value of the "local_user_append" field.
func (u *TaskUpsert) ClearLocalUserAppend() *TaskUpsert {
	u.SetNull(task.FieldLocalUserAppend)
	return u
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (u *TaskUpsert) SetLocalUserCreateHome(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserCreateHome, v)
	return u
}

// UpdateLocalUserCreateHome sets the "local_user_create_home" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserCreateHome() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserCreateHome)
	return u
}

// ClearLocalUserCreateHome clears the value of the "local_user_create_home" field.
func (u *TaskUpsert) ClearLocalUserCreateHome() *TaskUpsert {
	u.SetNull(task.FieldLocalUserCreateHome)
	return u
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (u *TaskUpsert) SetLocalUserExpires(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserExpires, v)
	return u
}

// UpdateLocalUserExpires sets the "local_user_expires" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserExpires() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserExpires)
	return u
}

// ClearLocalUserExpires clears the value of the "local_user_expires" field.
func (u *TaskUpsert) ClearLocalUserExpires() *TaskUpsert {
	u.SetNull(task.FieldLocalUserExpires)
	return u
}

// SetLocalUserForce sets the "local_user_force" field.
func (u *TaskUpsert) SetLocalUserForce(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserForce, v)
	return u
}

// UpdateLocalUserForce sets the "local_user_force" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserForce() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserForce)
	return u
}

// ClearLocalUserForce clears the value of the "local_user_force" field.
func (u *TaskUpsert) ClearLocalUserForce() *TaskUpsert {
	u.SetNull(task.FieldLocalUserForce)
	return u
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (u *TaskUpsert) SetLocalUserGenerateSSHKey(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserGenerateSSHKey, v)
	return u
}

// UpdateLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserGenerateSSHKey() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserGenerateSSHKey)
	return u
}

// ClearLocalUserGenerateSSHKey clears the value of the "local_user_generate_ssh_key" field.
func (u *TaskUpsert) ClearLocalUserGenerateSSHKey() *TaskUpsert {
	u.SetNull(task.FieldLocalUserGenerateSSHKey)
	return u
}

// SetLocalUserGroup sets the "local_user_group" field.
func (u *TaskUpsert) SetLocalUserGroup(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserGroup, v)
	return u
}

// UpdateLocalUserGroup sets the "local_user_group" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserGroup() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserGroup)
	return u
}

// ClearLocalUserGroup clears the value of the "local_user_group" field.
func (u *TaskUpsert) ClearLocalUserGroup() *TaskUpsert {
	u.SetNull(task.FieldLocalUserGroup)
	return u
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (u *TaskUpsert) SetLocalUserGroups(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserGroups, v)
	return u
}

// UpdateLocalUserGroups sets the "local_user_groups" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserGroups() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserGroups)
	return u
}

// ClearLocalUserGroups clears the value of the "local_user_groups" field.
func (u *TaskUpsert) ClearLocalUserGroups() *TaskUpsert {
	u.SetNull(task.FieldLocalUserGroups)
	return u
}

// SetLocalUserHome sets the "local_user_home" field.
func (u *TaskUpsert) SetLocalUserHome(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserHome, v)
	return u
}

// UpdateLocalUserHome sets the "local_user_home" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserHome() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserHome)
	return u
}

// ClearLocalUserHome clears the value of the "local_user_home" field.
func (u *TaskUpsert) ClearLocalUserHome() *TaskUpsert {
	u.SetNull(task.FieldLocalUserHome)
	return u
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (u *TaskUpsert) SetLocalUserMoveHome(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserMoveHome, v)
	return u
}

// UpdateLocalUserMoveHome sets the "local_user_move_home" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserMoveHome() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserMoveHome)
	return u
}

// ClearLocalUserMoveHome clears the value of the "local_user_move_home" field.
func (u *TaskUpsert) ClearLocalUserMoveHome() *TaskUpsert {
	u.SetNull(task.FieldLocalUserMoveHome)
	return u
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (u *TaskUpsert) SetLocalUserNonunique(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserNonunique, v)
	return u
}

// UpdateLocalUserNonunique sets the "local_user_nonunique" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserNonunique() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserNonunique)
	return u
}

// ClearLocalUserNonunique clears the value of the "local_user_nonunique" field.
func (u *TaskUpsert) ClearLocalUserNonunique() *TaskUpsert {
	u.SetNull(task.FieldLocalUserNonunique)
	return u
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (u *TaskUpsert) SetLocalUserPasswordExpireAccountDisable(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordExpireAccountDisable, v)
	return u
}

// UpdateLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordExpireAccountDisable() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordExpireAccountDisable)
	return u
}

// ClearLocalUserPasswordExpireAccountDisable clears the value of the "local_user_password_expire_account_disable" field.
func (u *TaskUpsert) ClearLocalUserPasswordExpireAccountDisable() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordExpireAccountDisable)
	return u
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (u *TaskUpsert) SetLocalUserPasswordExpireMax(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordExpireMax, v)
	return u
}

// UpdateLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordExpireMax() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordExpireMax)
	return u
}

// ClearLocalUserPasswordExpireMax clears the value of the "local_user_password_expire_max" field.
func (u *TaskUpsert) ClearLocalUserPasswordExpireMax() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordExpireMax)
	return u
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (u *TaskUpsert) SetLocalUserPasswordExpireMin(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordExpireMin, v)
	return u
}

// UpdateLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordExpireMin() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordExpireMin)
	return u
}

// ClearLocalUserPasswordExpireMin clears the value of the "local_user_password_expire_min" field.
func (u *TaskUpsert) ClearLocalUserPasswordExpireMin() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordExpireMin)
	return u
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (u *TaskUpsert) SetLocalUserPasswordExpireWarn(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordExpireWarn, v)
	return u
}

// UpdateLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordExpireWarn() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordExpireWarn)
	return u
}

// ClearLocalUserPasswordExpireWarn clears the value of the "local_user_password_expire_warn" field.
func (u *TaskUpsert) ClearLocalUserPasswordExpireWarn() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordExpireWarn)
	return u
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (u *TaskUpsert) SetLocalUserPasswordLock(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserPasswordLock, v)
	return u
}

// UpdateLocalUserPasswordLock sets the "local_user_password_lock" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserPasswordLock() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserPasswordLock)
	return u
}

// ClearLocalUserPasswordLock clears the value of the "local_user_password_lock" field.
func (u *TaskUpsert) ClearLocalUserPasswordLock() *TaskUpsert {
	u.SetNull(task.FieldLocalUserPasswordLock)
	return u
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (u *TaskUpsert) SetLocalUserSeuser(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSeuser, v)
	return u
}

// UpdateLocalUserSeuser sets the "local_user_seuser" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSeuser() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSeuser)
	return u
}

// ClearLocalUserSeuser clears the value of the "local_user_seuser" field.
func (u *TaskUpsert) ClearLocalUserSeuser() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSeuser)
	return u
}

// SetLocalUserShell sets the "local_user_shell" field.
func (u *TaskUpsert) SetLocalUserShell(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserShell, v)
	return u
}

// UpdateLocalUserShell sets the "local_user_shell" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserShell() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserShell)
	return u
}

// ClearLocalUserShell clears the value of the "local_user_shell" field.
func (u *TaskUpsert) ClearLocalUserShell() *TaskUpsert {
	u.SetNull(task.FieldLocalUserShell)
	return u
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (u *TaskUpsert) SetLocalUserSkeleton(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSkeleton, v)
	return u
}

// UpdateLocalUserSkeleton sets the "local_user_skeleton" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSkeleton() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSkeleton)
	return u
}

// ClearLocalUserSkeleton clears the value of the "local_user_skeleton" field.
func (u *TaskUpsert) ClearLocalUserSkeleton() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSkeleton)
	return u
}

// SetLocalUserSystem sets the "local_user_system" field.
func (u *TaskUpsert) SetLocalUserSystem(v bool) *TaskUpsert {
	u.Set(task.FieldLocalUserSystem, v)
	return u
}

// UpdateLocalUserSystem sets the "local_user_system" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSystem() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSystem)
	return u
}

// ClearLocalUserSystem clears the value of the "local_user_system" field.
func (u *TaskUpsert) ClearLocalUserSystem() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSystem)
	return u
}

// SetLocalUserID sets the "local_user_id" field.
func (u *TaskUpsert) SetLocalUserID(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserID, v)
	return u
}

// UpdateLocalUserID sets the "local_user_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserID() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserID)
	return u
}

// ClearLocalUserID clears the value of the "local_user_id" field.
func (u *TaskUpsert) ClearLocalUserID() *TaskUpsert {
	u.SetNull(task.FieldLocalUserID)
	return u
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (u *TaskUpsert) SetLocalUserIDMax(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserIDMax, v)
	return u
}

// UpdateLocalUserIDMax sets the "local_user_id_max" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserIDMax() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserIDMax)
	return u
}

// ClearLocalUserIDMax clears the value of the "local_user_id_max" field.
func (u *TaskUpsert) ClearLocalUserIDMax() *TaskUpsert {
	u.SetNull(task.FieldLocalUserIDMax)
	return u
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (u *TaskUpsert) SetLocalUserIDMin(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserIDMin, v)
	return u
}

// UpdateLocalUserIDMin sets the "local_user_id_min" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserIDMin() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserIDMin)
	return u
}

// ClearLocalUserIDMin clears the value of the "local_user_id_min" field.
func (u *TaskUpsert) ClearLocalUserIDMin() *TaskUpsert {
	u.SetNull(task.FieldLocalUserIDMin)
	return u
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (u *TaskUpsert) SetLocalUserSSHKeyBits(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSSHKeyBits, v)
	return u
}

// UpdateLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSSHKeyBits() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSSHKeyBits)
	return u
}

// ClearLocalUserSSHKeyBits clears the value of the "local_user_ssh_key_bits" field.
func (u *TaskUpsert) ClearLocalUserSSHKeyBits() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSSHKeyBits)
	return u
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (u *TaskUpsert) SetLocalUserSSHKeyComment(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSSHKeyComment, v)
	return u
}

// UpdateLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSSHKeyComment() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSSHKeyComment)
	return u
}

// ClearLocalUserSSHKeyComment clears the value of the "local_user_ssh_key_comment" field.
func (u *TaskUpsert) ClearLocalUserSSHKeyComment() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSSHKeyComment)
	return u
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (u *TaskUpsert) SetLocalUserSSHKeyFile(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSSHKeyFile, v)
	return u
}

// UpdateLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSSHKeyFile() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSSHKeyFile)
	return u
}

// ClearLocalUserSSHKeyFile clears the value of the "local_user_ssh_key_file" field.
func (u *TaskUpsert) ClearLocalUserSSHKeyFile() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSSHKeyFile)
	return u
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsert) SetLocalUserSSHKeyPassphrase(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSSHKeyPassphrase, v)
	return u
}

// UpdateLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSSHKeyPassphrase() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSSHKeyPassphrase)
	return u
}

// ClearLocalUserSSHKeyPassphrase clears the value of the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsert) ClearLocalUserSSHKeyPassphrase() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSSHKeyPassphrase)
	return u
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (u *TaskUpsert) SetLocalUserSSHKeyType(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserSSHKeyType, v)
	return u
}

// UpdateLocalUserSSHKeyType sets the "local_user_ssh_key_type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserSSHKeyType() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserSSHKeyType)
	return u
}

// ClearLocalUserSSHKeyType clears the value of the "local_user_ssh_key_type" field.
func (u *TaskUpsert) ClearLocalUserSSHKeyType() *TaskUpsert {
	u.SetNull(task.FieldLocalUserSSHKeyType)
	return u
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (u *TaskUpsert) SetLocalUserUmask(v string) *TaskUpsert {
	u.Set(task.FieldLocalUserUmask, v)
	return u
}

// UpdateLocalUserUmask sets the "local_user_umask" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalUserUmask() *TaskUpsert {
	u.SetExcluded(task.FieldLocalUserUmask)
	return u
}

// ClearLocalUserUmask clears the value of the "local_user_umask" field.
func (u *TaskUpsert) ClearLocalUserUmask() *TaskUpsert {
	u.SetNull(task.FieldLocalUserUmask)
	return u
}

// SetLocalGroupID sets the "local_group_id" field.
func (u *TaskUpsert) SetLocalGroupID(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupID, v)
	return u
}

// UpdateLocalGroupID sets the "local_group_id" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupID() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupID)
	return u
}

// ClearLocalGroupID clears the value of the "local_group_id" field.
func (u *TaskUpsert) ClearLocalGroupID() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupID)
	return u
}

// SetLocalGroupName sets the "local_group_name" field.
func (u *TaskUpsert) SetLocalGroupName(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupName, v)
	return u
}

// UpdateLocalGroupName sets the "local_group_name" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupName() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupName)
	return u
}

// ClearLocalGroupName clears the value of the "local_group_name" field.
func (u *TaskUpsert) ClearLocalGroupName() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupName)
	return u
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (u *TaskUpsert) SetLocalGroupDescription(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupDescription, v)
	return u
}

// UpdateLocalGroupDescription sets the "local_group_description" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupDescription() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupDescription)
	return u
}

// ClearLocalGroupDescription clears the value of the "local_group_description" field.
func (u *TaskUpsert) ClearLocalGroupDescription() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupDescription)
	return u
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (u *TaskUpsert) SetLocalGroupSystem(v bool) *TaskUpsert {
	u.Set(task.FieldLocalGroupSystem, v)
	return u
}

// UpdateLocalGroupSystem sets the "local_group_system" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupSystem() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupSystem)
	return u
}

// ClearLocalGroupSystem clears the value of the "local_group_system" field.
func (u *TaskUpsert) ClearLocalGroupSystem() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupSystem)
	return u
}

// SetLocalGroupForce sets the "local_group_force" field.
func (u *TaskUpsert) SetLocalGroupForce(v bool) *TaskUpsert {
	u.Set(task.FieldLocalGroupForce, v)
	return u
}

// UpdateLocalGroupForce sets the "local_group_force" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupForce() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupForce)
	return u
}

// ClearLocalGroupForce clears the value of the "local_group_force" field.
func (u *TaskUpsert) ClearLocalGroupForce() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupForce)
	return u
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (u *TaskUpsert) SetLocalGroupMembers(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupMembers, v)
	return u
}

// UpdateLocalGroupMembers sets the "local_group_members" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupMembers() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupMembers)
	return u
}

// ClearLocalGroupMembers clears the value of the "local_group_members" field.
func (u *TaskUpsert) ClearLocalGroupMembers() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupMembers)
	return u
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (u *TaskUpsert) SetLocalGroupMembersToInclude(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupMembersToInclude, v)
	return u
}

// UpdateLocalGroupMembersToInclude sets the "local_group_members_to_include" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupMembersToInclude() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupMembersToInclude)
	return u
}

// ClearLocalGroupMembersToInclude clears the value of the "local_group_members_to_include" field.
func (u *TaskUpsert) ClearLocalGroupMembersToInclude() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupMembersToInclude)
	return u
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (u *TaskUpsert) SetLocalGroupMembersToExclude(v string) *TaskUpsert {
	u.Set(task.FieldLocalGroupMembersToExclude, v)
	return u
}

// UpdateLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field to the value that was provided on create.
func (u *TaskUpsert) UpdateLocalGroupMembersToExclude() *TaskUpsert {
	u.SetExcluded(task.FieldLocalGroupMembersToExclude)
	return u
}

// ClearLocalGroupMembersToExclude clears the value of the "local_group_members_to_exclude" field.
func (u *TaskUpsert) ClearLocalGroupMembersToExclude() *TaskUpsert {
	u.SetNull(task.FieldLocalGroupMembersToExclude)
	return u
}

// SetMsiProductid sets the "msi_productid" field.
func (u *TaskUpsert) SetMsiProductid(v string) *TaskUpsert {
	u.Set(task.FieldMsiProductid, v)
	return u
}

// UpdateMsiProductid sets the "msi_productid" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiProductid() *TaskUpsert {
	u.SetExcluded(task.FieldMsiProductid)
	return u
}

// ClearMsiProductid clears the value of the "msi_productid" field.
func (u *TaskUpsert) ClearMsiProductid() *TaskUpsert {
	u.SetNull(task.FieldMsiProductid)
	return u
}

// SetMsiPath sets the "msi_path" field.
func (u *TaskUpsert) SetMsiPath(v string) *TaskUpsert {
	u.Set(task.FieldMsiPath, v)
	return u
}

// UpdateMsiPath sets the "msi_path" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiPath() *TaskUpsert {
	u.SetExcluded(task.FieldMsiPath)
	return u
}

// ClearMsiPath clears the value of the "msi_path" field.
func (u *TaskUpsert) ClearMsiPath() *TaskUpsert {
	u.SetNull(task.FieldMsiPath)
	return u
}

// SetMsiArguments sets the "msi_arguments" field.
func (u *TaskUpsert) SetMsiArguments(v string) *TaskUpsert {
	u.Set(task.FieldMsiArguments, v)
	return u
}

// UpdateMsiArguments sets the "msi_arguments" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiArguments() *TaskUpsert {
	u.SetExcluded(task.FieldMsiArguments)
	return u
}

// ClearMsiArguments clears the value of the "msi_arguments" field.
func (u *TaskUpsert) ClearMsiArguments() *TaskUpsert {
	u.SetNull(task.FieldMsiArguments)
	return u
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (u *TaskUpsert) SetMsiFileHash(v string) *TaskUpsert {
	u.Set(task.FieldMsiFileHash, v)
	return u
}

// UpdateMsiFileHash sets the "msi_file_hash" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiFileHash() *TaskUpsert {
	u.SetExcluded(task.FieldMsiFileHash)
	return u
}

// ClearMsiFileHash clears the value of the "msi_file_hash" field.
func (u *TaskUpsert) ClearMsiFileHash() *TaskUpsert {
	u.SetNull(task.FieldMsiFileHash)
	return u
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (u *TaskUpsert) SetMsiFileHashAlg(v task.MsiFileHashAlg) *TaskUpsert {
	u.Set(task.FieldMsiFileHashAlg, v)
	return u
}

// UpdateMsiFileHashAlg sets the "msi_file_hash_alg" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiFileHashAlg() *TaskUpsert {
	u.SetExcluded(task.FieldMsiFileHashAlg)
	return u
}

// ClearMsiFileHashAlg clears the value of the "msi_file_hash_alg" field.
func (u *TaskUpsert) ClearMsiFileHashAlg() *TaskUpsert {
	u.SetNull(task.FieldMsiFileHashAlg)
	return u
}

// SetMsiLogPath sets the "msi_log_path" field.
func (u *TaskUpsert) SetMsiLogPath(v string) *TaskUpsert {
	u.Set(task.FieldMsiLogPath, v)
	return u
}

// UpdateMsiLogPath sets the "msi_log_path" field to the value that was provided on create.
func (u *TaskUpsert) UpdateMsiLogPath() *TaskUpsert {
	u.SetExcluded(task.FieldMsiLogPath)
	return u
}

// ClearMsiLogPath clears the value of the "msi_log_path" field.
func (u *TaskUpsert) ClearMsiLogPath() *TaskUpsert {
	u.SetNull(task.FieldMsiLogPath)
	return u
}

// SetScript sets the "script" field.
func (u *TaskUpsert) SetScript(v string) *TaskUpsert {
	u.Set(task.FieldScript, v)
	return u
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *TaskUpsert) UpdateScript() *TaskUpsert {
	u.SetExcluded(task.FieldScript)
	return u
}

// ClearScript clears the value of the "script" field.
func (u *TaskUpsert) ClearScript() *TaskUpsert {
	u.SetNull(task.FieldScript)
	return u
}

// SetScriptExecutable sets the "script_executable" field.
func (u *TaskUpsert) SetScriptExecutable(v string) *TaskUpsert {
	u.Set(task.FieldScriptExecutable, v)
	return u
}

// UpdateScriptExecutable sets the "script_executable" field to the value that was provided on create.
func (u *TaskUpsert) UpdateScriptExecutable() *TaskUpsert {
	u.SetExcluded(task.FieldScriptExecutable)
	return u
}

// ClearScriptExecutable clears the value of the "script_executable" field.
func (u *TaskUpsert) ClearScriptExecutable() *TaskUpsert {
	u.SetNull(task.FieldScriptExecutable)
	return u
}

// SetScriptCreates sets the "script_creates" field.
func (u *TaskUpsert) SetScriptCreates(v string) *TaskUpsert {
	u.Set(task.FieldScriptCreates, v)
	return u
}

// UpdateScriptCreates sets the "script_creates" field to the value that was provided on create.
func (u *TaskUpsert) UpdateScriptCreates() *TaskUpsert {
	u.SetExcluded(task.FieldScriptCreates)
	return u
}

// ClearScriptCreates clears the value of the "script_creates" field.
func (u *TaskUpsert) ClearScriptCreates() *TaskUpsert {
	u.SetNull(task.FieldScriptCreates)
	return u
}

// SetScriptRun sets the "script_run" field.
func (u *TaskUpsert) SetScriptRun(v task.ScriptRun) *TaskUpsert {
	u.Set(task.FieldScriptRun, v)
	return u
}

// UpdateScriptRun sets the "script_run" field to the value that was provided on create.
func (u *TaskUpsert) UpdateScriptRun() *TaskUpsert {
	u.SetExcluded(task.FieldScriptRun)
	return u
}

// ClearScriptRun clears the value of the "script_run" field.
func (u *TaskUpsert) ClearScriptRun() *TaskUpsert {
	u.SetNull(task.FieldScriptRun)
	return u
}

// SetAgentType sets the "agent_type" field.
func (u *TaskUpsert) SetAgentType(v task.AgentType) *TaskUpsert {
	u.Set(task.FieldAgentType, v)
	return u
}

// UpdateAgentType sets the "agent_type" field to the value that was provided on create.
func (u *TaskUpsert) UpdateAgentType() *TaskUpsert {
	u.SetExcluded(task.FieldAgentType)
	return u
}

// ClearAgentType clears the value of the "agent_type" field.
func (u *TaskUpsert) ClearAgentType() *TaskUpsert {
	u.SetNull(task.FieldAgentType)
	return u
}

// SetWhen sets the "when" field.
func (u *TaskUpsert) SetWhen(v time.Time) *TaskUpsert {
	u.Set(task.FieldWhen, v)
	return u
}

// UpdateWhen sets the "when" field to the value that was provided on create.
func (u *TaskUpsert) UpdateWhen() *TaskUpsert {
	u.SetExcluded(task.FieldWhen)
	return u
}

// ClearWhen clears the value of the "when" field.
func (u *TaskUpsert) ClearWhen() *TaskUpsert {
	u.SetNull(task.FieldWhen)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertOne) UpdateNewValues() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//	    OnConflict(sql.ResolveWithIgnore()).
//	    Exec(ctx)
func (u *TaskUpsertOne) Ignore() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertOne) DoNothing() *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreate.OnConflict
// documentation for more info.
func (u *TaskUpsertOne) Update(set func(*TaskUpsert)) *TaskUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskUpsertOne) SetName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertOne) SetType(v task.Type) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetPackageID sets the "package_id" field.
func (u *TaskUpsertOne) SetPackageID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdatePackageID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *TaskUpsertOne) ClearPackageID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageID()
	})
}

// SetPackageName sets the "package_name" field.
func (u *TaskUpsertOne) SetPackageName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdatePackageName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageName()
	})
}

// ClearPackageName clears the value of the "package_name" field.
func (u *TaskUpsertOne) ClearPackageName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageName()
	})
}

// SetPackageLatest sets the "package_latest" field.
func (u *TaskUpsertOne) SetPackageLatest(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageLatest(v)
	})
}

// UpdatePackageLatest sets the "package_latest" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdatePackageLatest() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageLatest()
	})
}

// ClearPackageLatest clears the value of the "package_latest" field.
func (u *TaskUpsertOne) ClearPackageLatest() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageLatest()
	})
}

// SetRegistryKey sets the "registry_key" field.
func (u *TaskUpsertOne) SetRegistryKey(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKey(v)
	})
}

// UpdateRegistryKey sets the "registry_key" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryKey() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKey()
	})
}

// ClearRegistryKey clears the value of the "registry_key" field.
func (u *TaskUpsertOne) ClearRegistryKey() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKey()
	})
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (u *TaskUpsertOne) SetRegistryKeyValueName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueName(v)
	})
}

// UpdateRegistryKeyValueName sets the "registry_key_value_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryKeyValueName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueName()
	})
}

// ClearRegistryKeyValueName clears the value of the "registry_key_value_name" field.
func (u *TaskUpsertOne) ClearRegistryKeyValueName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueName()
	})
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (u *TaskUpsertOne) SetRegistryKeyValueType(v task.RegistryKeyValueType) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueType(v)
	})
}

// UpdateRegistryKeyValueType sets the "registry_key_value_type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryKeyValueType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueType()
	})
}

// ClearRegistryKeyValueType clears the value of the "registry_key_value_type" field.
func (u *TaskUpsertOne) ClearRegistryKeyValueType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueType()
	})
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (u *TaskUpsertOne) SetRegistryKeyValueData(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueData(v)
	})
}

// UpdateRegistryKeyValueData sets the "registry_key_value_data" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryKeyValueData() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueData()
	})
}

// ClearRegistryKeyValueData clears the value of the "registry_key_value_data" field.
func (u *TaskUpsertOne) ClearRegistryKeyValueData() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueData()
	})
}

// SetRegistryHex sets the "registry_hex" field.
func (u *TaskUpsertOne) SetRegistryHex(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryHex(v)
	})
}

// UpdateRegistryHex sets the "registry_hex" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryHex() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryHex()
	})
}

// ClearRegistryHex clears the value of the "registry_hex" field.
func (u *TaskUpsertOne) ClearRegistryHex() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryHex()
	})
}

// SetRegistryForce sets the "registry_force" field.
func (u *TaskUpsertOne) SetRegistryForce(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryForce(v)
	})
}

// UpdateRegistryForce sets the "registry_force" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateRegistryForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryForce()
	})
}

// ClearRegistryForce clears the value of the "registry_force" field.
func (u *TaskUpsertOne) ClearRegistryForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryForce()
	})
}

// SetLocalUserUsername sets the "local_user_username" field.
func (u *TaskUpsertOne) SetLocalUserUsername(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserUsername(v)
	})
}

// UpdateLocalUserUsername sets the "local_user_username" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserUsername() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserUsername()
	})
}

// ClearLocalUserUsername clears the value of the "local_user_username" field.
func (u *TaskUpsertOne) ClearLocalUserUsername() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserUsername()
	})
}

// SetLocalUserDescription sets the "local_user_description" field.
func (u *TaskUpsertOne) SetLocalUserDescription(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserDescription(v)
	})
}

// UpdateLocalUserDescription sets the "local_user_description" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserDescription() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserDescription()
	})
}

// ClearLocalUserDescription clears the value of the "local_user_description" field.
func (u *TaskUpsertOne) ClearLocalUserDescription() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserDescription()
	})
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (u *TaskUpsertOne) SetLocalUserDisable(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserDisable(v)
	})
}

// UpdateLocalUserDisable sets the "local_user_disable" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserDisable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserDisable()
	})
}

// ClearLocalUserDisable clears the value of the "local_user_disable" field.
func (u *TaskUpsertOne) ClearLocalUserDisable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserDisable()
	})
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (u *TaskUpsertOne) SetLocalUserFullname(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserFullname(v)
	})
}

// UpdateLocalUserFullname sets the "local_user_fullname" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserFullname() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserFullname()
	})
}

// ClearLocalUserFullname clears the value of the "local_user_fullname" field.
func (u *TaskUpsertOne) ClearLocalUserFullname() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserFullname()
	})
}

// SetLocalUserPassword sets the "local_user_password" field.
func (u *TaskUpsertOne) SetLocalUserPassword(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPassword(v)
	})
}

// UpdateLocalUserPassword sets the "local_user_password" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPassword() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPassword()
	})
}

// ClearLocalUserPassword clears the value of the "local_user_password" field.
func (u *TaskUpsertOne) ClearLocalUserPassword() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPassword()
	})
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (u *TaskUpsertOne) SetLocalUserPasswordChangeNotAllowed(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordChangeNotAllowed(v)
	})
}

// UpdateLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordChangeNotAllowed() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordChangeNotAllowed()
	})
}

// ClearLocalUserPasswordChangeNotAllowed clears the value of the "local_user_password_change_not_allowed" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordChangeNotAllowed() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordChangeNotAllowed()
	})
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (u *TaskUpsertOne) SetLocalUserPasswordChangeRequired(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordChangeRequired(v)
	})
}

// UpdateLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordChangeRequired() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordChangeRequired()
	})
}

// ClearLocalUserPasswordChangeRequired clears the value of the "local_user_password_change_required" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordChangeRequired() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordChangeRequired()
	})
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (u *TaskUpsertOne) SetLocalUserPasswordNeverExpires(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordNeverExpires(v)
	})
}

// UpdateLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordNeverExpires() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordNeverExpires()
	})
}

// ClearLocalUserPasswordNeverExpires clears the value of the "local_user_password_never_expires" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordNeverExpires() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordNeverExpires()
	})
}

// SetLocalUserAppend sets the "local_user_append" field.
func (u *TaskUpsertOne) SetLocalUserAppend(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserAppend(v)
	})
}

// UpdateLocalUserAppend sets the "local_user_append" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserAppend() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserAppend()
	})
}

// ClearLocalUserAppend clears the value of the "local_user_append" field.
func (u *TaskUpsertOne) ClearLocalUserAppend() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserAppend()
	})
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (u *TaskUpsertOne) SetLocalUserCreateHome(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserCreateHome(v)
	})
}

// UpdateLocalUserCreateHome sets the "local_user_create_home" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserCreateHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserCreateHome()
	})
}

// ClearLocalUserCreateHome clears the value of the "local_user_create_home" field.
func (u *TaskUpsertOne) ClearLocalUserCreateHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserCreateHome()
	})
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (u *TaskUpsertOne) SetLocalUserExpires(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserExpires(v)
	})
}

// UpdateLocalUserExpires sets the "local_user_expires" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserExpires() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserExpires()
	})
}

// ClearLocalUserExpires clears the value of the "local_user_expires" field.
func (u *TaskUpsertOne) ClearLocalUserExpires() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserExpires()
	})
}

// SetLocalUserForce sets the "local_user_force" field.
func (u *TaskUpsertOne) SetLocalUserForce(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserForce(v)
	})
}

// UpdateLocalUserForce sets the "local_user_force" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserForce()
	})
}

// ClearLocalUserForce clears the value of the "local_user_force" field.
func (u *TaskUpsertOne) ClearLocalUserForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserForce()
	})
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (u *TaskUpsertOne) SetLocalUserGenerateSSHKey(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGenerateSSHKey(v)
	})
}

// UpdateLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserGenerateSSHKey() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGenerateSSHKey()
	})
}

// ClearLocalUserGenerateSSHKey clears the value of the "local_user_generate_ssh_key" field.
func (u *TaskUpsertOne) ClearLocalUserGenerateSSHKey() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGenerateSSHKey()
	})
}

// SetLocalUserGroup sets the "local_user_group" field.
func (u *TaskUpsertOne) SetLocalUserGroup(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGroup(v)
	})
}

// UpdateLocalUserGroup sets the "local_user_group" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserGroup() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGroup()
	})
}

// ClearLocalUserGroup clears the value of the "local_user_group" field.
func (u *TaskUpsertOne) ClearLocalUserGroup() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGroup()
	})
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (u *TaskUpsertOne) SetLocalUserGroups(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGroups(v)
	})
}

// UpdateLocalUserGroups sets the "local_user_groups" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserGroups() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGroups()
	})
}

// ClearLocalUserGroups clears the value of the "local_user_groups" field.
func (u *TaskUpsertOne) ClearLocalUserGroups() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGroups()
	})
}

// SetLocalUserHome sets the "local_user_home" field.
func (u *TaskUpsertOne) SetLocalUserHome(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserHome(v)
	})
}

// UpdateLocalUserHome sets the "local_user_home" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserHome()
	})
}

// ClearLocalUserHome clears the value of the "local_user_home" field.
func (u *TaskUpsertOne) ClearLocalUserHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserHome()
	})
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (u *TaskUpsertOne) SetLocalUserMoveHome(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserMoveHome(v)
	})
}

// UpdateLocalUserMoveHome sets the "local_user_move_home" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserMoveHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserMoveHome()
	})
}

// ClearLocalUserMoveHome clears the value of the "local_user_move_home" field.
func (u *TaskUpsertOne) ClearLocalUserMoveHome() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserMoveHome()
	})
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (u *TaskUpsertOne) SetLocalUserNonunique(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserNonunique(v)
	})
}

// UpdateLocalUserNonunique sets the "local_user_nonunique" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserNonunique() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserNonunique()
	})
}

// ClearLocalUserNonunique clears the value of the "local_user_nonunique" field.
func (u *TaskUpsertOne) ClearLocalUserNonunique() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserNonunique()
	})
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (u *TaskUpsertOne) SetLocalUserPasswordExpireAccountDisable(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireAccountDisable(v)
	})
}

// UpdateLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordExpireAccountDisable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireAccountDisable()
	})
}

// ClearLocalUserPasswordExpireAccountDisable clears the value of the "local_user_password_expire_account_disable" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordExpireAccountDisable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireAccountDisable()
	})
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (u *TaskUpsertOne) SetLocalUserPasswordExpireMax(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireMax(v)
	})
}

// UpdateLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordExpireMax() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireMax()
	})
}

// ClearLocalUserPasswordExpireMax clears the value of the "local_user_password_expire_max" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordExpireMax() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireMax()
	})
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (u *TaskUpsertOne) SetLocalUserPasswordExpireMin(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireMin(v)
	})
}

// UpdateLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordExpireMin() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireMin()
	})
}

// ClearLocalUserPasswordExpireMin clears the value of the "local_user_password_expire_min" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordExpireMin() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireMin()
	})
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (u *TaskUpsertOne) SetLocalUserPasswordExpireWarn(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireWarn(v)
	})
}

// UpdateLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordExpireWarn() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireWarn()
	})
}

// ClearLocalUserPasswordExpireWarn clears the value of the "local_user_password_expire_warn" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordExpireWarn() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireWarn()
	})
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (u *TaskUpsertOne) SetLocalUserPasswordLock(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordLock(v)
	})
}

// UpdateLocalUserPasswordLock sets the "local_user_password_lock" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserPasswordLock() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordLock()
	})
}

// ClearLocalUserPasswordLock clears the value of the "local_user_password_lock" field.
func (u *TaskUpsertOne) ClearLocalUserPasswordLock() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordLock()
	})
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (u *TaskUpsertOne) SetLocalUserSeuser(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSeuser(v)
	})
}

// UpdateLocalUserSeuser sets the "local_user_seuser" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSeuser() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSeuser()
	})
}

// ClearLocalUserSeuser clears the value of the "local_user_seuser" field.
func (u *TaskUpsertOne) ClearLocalUserSeuser() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSeuser()
	})
}

// SetLocalUserShell sets the "local_user_shell" field.
func (u *TaskUpsertOne) SetLocalUserShell(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserShell(v)
	})
}

// UpdateLocalUserShell sets the "local_user_shell" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserShell() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserShell()
	})
}

// ClearLocalUserShell clears the value of the "local_user_shell" field.
func (u *TaskUpsertOne) ClearLocalUserShell() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserShell()
	})
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (u *TaskUpsertOne) SetLocalUserSkeleton(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSkeleton(v)
	})
}

// UpdateLocalUserSkeleton sets the "local_user_skeleton" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSkeleton() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSkeleton()
	})
}

// ClearLocalUserSkeleton clears the value of the "local_user_skeleton" field.
func (u *TaskUpsertOne) ClearLocalUserSkeleton() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSkeleton()
	})
}

// SetLocalUserSystem sets the "local_user_system" field.
func (u *TaskUpsertOne) SetLocalUserSystem(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSystem(v)
	})
}

// UpdateLocalUserSystem sets the "local_user_system" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSystem() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSystem()
	})
}

// ClearLocalUserSystem clears the value of the "local_user_system" field.
func (u *TaskUpsertOne) ClearLocalUserSystem() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSystem()
	})
}

// SetLocalUserID sets the "local_user_id" field.
func (u *TaskUpsertOne) SetLocalUserID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserID(v)
	})
}

// UpdateLocalUserID sets the "local_user_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserID()
	})
}

// ClearLocalUserID clears the value of the "local_user_id" field.
func (u *TaskUpsertOne) ClearLocalUserID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserID()
	})
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (u *TaskUpsertOne) SetLocalUserIDMax(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserIDMax(v)
	})
}

// UpdateLocalUserIDMax sets the "local_user_id_max" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserIDMax() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserIDMax()
	})
}

// ClearLocalUserIDMax clears the value of the "local_user_id_max" field.
func (u *TaskUpsertOne) ClearLocalUserIDMax() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserIDMax()
	})
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (u *TaskUpsertOne) SetLocalUserIDMin(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserIDMin(v)
	})
}

// UpdateLocalUserIDMin sets the "local_user_id_min" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserIDMin() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserIDMin()
	})
}

// ClearLocalUserIDMin clears the value of the "local_user_id_min" field.
func (u *TaskUpsertOne) ClearLocalUserIDMin() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserIDMin()
	})
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (u *TaskUpsertOne) SetLocalUserSSHKeyBits(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyBits(v)
	})
}

// UpdateLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSSHKeyBits() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyBits()
	})
}

// ClearLocalUserSSHKeyBits clears the value of the "local_user_ssh_key_bits" field.
func (u *TaskUpsertOne) ClearLocalUserSSHKeyBits() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyBits()
	})
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (u *TaskUpsertOne) SetLocalUserSSHKeyComment(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyComment(v)
	})
}

// UpdateLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSSHKeyComment() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyComment()
	})
}

// ClearLocalUserSSHKeyComment clears the value of the "local_user_ssh_key_comment" field.
func (u *TaskUpsertOne) ClearLocalUserSSHKeyComment() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyComment()
	})
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (u *TaskUpsertOne) SetLocalUserSSHKeyFile(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyFile(v)
	})
}

// UpdateLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSSHKeyFile() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyFile()
	})
}

// ClearLocalUserSSHKeyFile clears the value of the "local_user_ssh_key_file" field.
func (u *TaskUpsertOne) ClearLocalUserSSHKeyFile() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyFile()
	})
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsertOne) SetLocalUserSSHKeyPassphrase(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyPassphrase(v)
	})
}

// UpdateLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSSHKeyPassphrase() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyPassphrase()
	})
}

// ClearLocalUserSSHKeyPassphrase clears the value of the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsertOne) ClearLocalUserSSHKeyPassphrase() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyPassphrase()
	})
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (u *TaskUpsertOne) SetLocalUserSSHKeyType(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyType(v)
	})
}

// UpdateLocalUserSSHKeyType sets the "local_user_ssh_key_type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserSSHKeyType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyType()
	})
}

// ClearLocalUserSSHKeyType clears the value of the "local_user_ssh_key_type" field.
func (u *TaskUpsertOne) ClearLocalUserSSHKeyType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyType()
	})
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (u *TaskUpsertOne) SetLocalUserUmask(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserUmask(v)
	})
}

// UpdateLocalUserUmask sets the "local_user_umask" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalUserUmask() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserUmask()
	})
}

// ClearLocalUserUmask clears the value of the "local_user_umask" field.
func (u *TaskUpsertOne) ClearLocalUserUmask() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserUmask()
	})
}

// SetLocalGroupID sets the "local_group_id" field.
func (u *TaskUpsertOne) SetLocalGroupID(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupID(v)
	})
}

// UpdateLocalGroupID sets the "local_group_id" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupID()
	})
}

// ClearLocalGroupID clears the value of the "local_group_id" field.
func (u *TaskUpsertOne) ClearLocalGroupID() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupID()
	})
}

// SetLocalGroupName sets the "local_group_name" field.
func (u *TaskUpsertOne) SetLocalGroupName(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupName(v)
	})
}

// UpdateLocalGroupName sets the "local_group_name" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupName()
	})
}

// ClearLocalGroupName clears the value of the "local_group_name" field.
func (u *TaskUpsertOne) ClearLocalGroupName() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupName()
	})
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (u *TaskUpsertOne) SetLocalGroupDescription(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupDescription(v)
	})
}

// UpdateLocalGroupDescription sets the "local_group_description" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupDescription() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupDescription()
	})
}

// ClearLocalGroupDescription clears the value of the "local_group_description" field.
func (u *TaskUpsertOne) ClearLocalGroupDescription() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupDescription()
	})
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (u *TaskUpsertOne) SetLocalGroupSystem(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupSystem(v)
	})
}

// UpdateLocalGroupSystem sets the "local_group_system" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupSystem() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupSystem()
	})
}

// ClearLocalGroupSystem clears the value of the "local_group_system" field.
func (u *TaskUpsertOne) ClearLocalGroupSystem() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupSystem()
	})
}

// SetLocalGroupForce sets the "local_group_force" field.
func (u *TaskUpsertOne) SetLocalGroupForce(v bool) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupForce(v)
	})
}

// UpdateLocalGroupForce sets the "local_group_force" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupForce()
	})
}

// ClearLocalGroupForce clears the value of the "local_group_force" field.
func (u *TaskUpsertOne) ClearLocalGroupForce() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupForce()
	})
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (u *TaskUpsertOne) SetLocalGroupMembers(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembers(v)
	})
}

// UpdateLocalGroupMembers sets the "local_group_members" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupMembers() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembers()
	})
}

// ClearLocalGroupMembers clears the value of the "local_group_members" field.
func (u *TaskUpsertOne) ClearLocalGroupMembers() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembers()
	})
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (u *TaskUpsertOne) SetLocalGroupMembersToInclude(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembersToInclude(v)
	})
}

// UpdateLocalGroupMembersToInclude sets the "local_group_members_to_include" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupMembersToInclude() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembersToInclude()
	})
}

// ClearLocalGroupMembersToInclude clears the value of the "local_group_members_to_include" field.
func (u *TaskUpsertOne) ClearLocalGroupMembersToInclude() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembersToInclude()
	})
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (u *TaskUpsertOne) SetLocalGroupMembersToExclude(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembersToExclude(v)
	})
}

// UpdateLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateLocalGroupMembersToExclude() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembersToExclude()
	})
}

// ClearLocalGroupMembersToExclude clears the value of the "local_group_members_to_exclude" field.
func (u *TaskUpsertOne) ClearLocalGroupMembersToExclude() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembersToExclude()
	})
}

// SetMsiProductid sets the "msi_productid" field.
func (u *TaskUpsertOne) SetMsiProductid(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiProductid(v)
	})
}

// UpdateMsiProductid sets the "msi_productid" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiProductid() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiProductid()
	})
}

// ClearMsiProductid clears the value of the "msi_productid" field.
func (u *TaskUpsertOne) ClearMsiProductid() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiProductid()
	})
}

// SetMsiPath sets the "msi_path" field.
func (u *TaskUpsertOne) SetMsiPath(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiPath(v)
	})
}

// UpdateMsiPath sets the "msi_path" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiPath() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiPath()
	})
}

// ClearMsiPath clears the value of the "msi_path" field.
func (u *TaskUpsertOne) ClearMsiPath() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiPath()
	})
}

// SetMsiArguments sets the "msi_arguments" field.
func (u *TaskUpsertOne) SetMsiArguments(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiArguments(v)
	})
}

// UpdateMsiArguments sets the "msi_arguments" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiArguments() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiArguments()
	})
}

// ClearMsiArguments clears the value of the "msi_arguments" field.
func (u *TaskUpsertOne) ClearMsiArguments() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiArguments()
	})
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (u *TaskUpsertOne) SetMsiFileHash(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiFileHash(v)
	})
}

// UpdateMsiFileHash sets the "msi_file_hash" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiFileHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiFileHash()
	})
}

// ClearMsiFileHash clears the value of the "msi_file_hash" field.
func (u *TaskUpsertOne) ClearMsiFileHash() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiFileHash()
	})
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (u *TaskUpsertOne) SetMsiFileHashAlg(v task.MsiFileHashAlg) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiFileHashAlg(v)
	})
}

// UpdateMsiFileHashAlg sets the "msi_file_hash_alg" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiFileHashAlg() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiFileHashAlg()
	})
}

// ClearMsiFileHashAlg clears the value of the "msi_file_hash_alg" field.
func (u *TaskUpsertOne) ClearMsiFileHashAlg() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiFileHashAlg()
	})
}

// SetMsiLogPath sets the "msi_log_path" field.
func (u *TaskUpsertOne) SetMsiLogPath(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiLogPath(v)
	})
}

// UpdateMsiLogPath sets the "msi_log_path" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateMsiLogPath() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiLogPath()
	})
}

// ClearMsiLogPath clears the value of the "msi_log_path" field.
func (u *TaskUpsertOne) ClearMsiLogPath() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiLogPath()
	})
}

// SetScript sets the "script" field.
func (u *TaskUpsertOne) SetScript(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetScript(v)
	})
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateScript() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScript()
	})
}

// ClearScript clears the value of the "script" field.
func (u *TaskUpsertOne) ClearScript() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScript()
	})
}

// SetScriptExecutable sets the "script_executable" field.
func (u *TaskUpsertOne) SetScriptExecutable(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptExecutable(v)
	})
}

// UpdateScriptExecutable sets the "script_executable" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateScriptExecutable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptExecutable()
	})
}

// ClearScriptExecutable clears the value of the "script_executable" field.
func (u *TaskUpsertOne) ClearScriptExecutable() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptExecutable()
	})
}

// SetScriptCreates sets the "script_creates" field.
func (u *TaskUpsertOne) SetScriptCreates(v string) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptCreates(v)
	})
}

// UpdateScriptCreates sets the "script_creates" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateScriptCreates() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptCreates()
	})
}

// ClearScriptCreates clears the value of the "script_creates" field.
func (u *TaskUpsertOne) ClearScriptCreates() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptCreates()
	})
}

// SetScriptRun sets the "script_run" field.
func (u *TaskUpsertOne) SetScriptRun(v task.ScriptRun) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptRun(v)
	})
}

// UpdateScriptRun sets the "script_run" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateScriptRun() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptRun()
	})
}

// ClearScriptRun clears the value of the "script_run" field.
func (u *TaskUpsertOne) ClearScriptRun() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptRun()
	})
}

// SetAgentType sets the "agent_type" field.
func (u *TaskUpsertOne) SetAgentType(v task.AgentType) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetAgentType(v)
	})
}

// UpdateAgentType sets the "agent_type" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateAgentType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAgentType()
	})
}

// ClearAgentType clears the value of the "agent_type" field.
func (u *TaskUpsertOne) ClearAgentType() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAgentType()
	})
}

// SetWhen sets the "when" field.
func (u *TaskUpsertOne) SetWhen(v time.Time) *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.SetWhen(v)
	})
}

// UpdateWhen sets the "when" field to the value that was provided on create.
func (u *TaskUpsertOne) UpdateWhen() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateWhen()
	})
}

// ClearWhen clears the value of the "when" field.
func (u *TaskUpsertOne) ClearWhen() *TaskUpsertOne {
	return u.Update(func(s *TaskUpsert) {
		s.ClearWhen()
	})
}

// Exec executes the query.
func (u *TaskUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *TaskUpsertOne) ID(ctx context.Context) (id int, err error) {
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *TaskUpsertOne) IDX(ctx context.Context) int {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
	conflict []sql.ConflictOption
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = tcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Task.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.TaskUpsert) {
//			SetName(v+v).
//		}).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflict(opts ...sql.ConflictOption) *TaskUpsertBulk {
	tcb.conflict = opts
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
func (tcb *TaskCreateBulk) OnConflictColumns(columns ...string) *TaskUpsertBulk {
	tcb.conflict = append(tcb.conflict, sql.ConflictColumns(columns...))
	return &TaskUpsertBulk{
		create: tcb,
	}
}

// TaskUpsertBulk is the builder for "upsert"-ing
// a bulk of Task nodes.
type TaskUpsertBulk struct {
	create *TaskCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//		).
//		Exec(ctx)
func (u *TaskUpsertBulk) UpdateNewValues() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Task.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
func (u *TaskUpsertBulk) Ignore() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *TaskUpsertBulk) DoNothing() *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the TaskCreateBulk.OnConflict
// documentation for more info.
func (u *TaskUpsertBulk) Update(set func(*TaskUpsert)) *TaskUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&TaskUpsert{UpdateSet: update})
	}))
	return u
}

// SetName sets the "name" field.
func (u *TaskUpsertBulk) SetName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetName(v)
	})
}

// UpdateName sets the "name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateName()
	})
}

// SetType sets the "type" field.
func (u *TaskUpsertBulk) SetType(v task.Type) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateType()
	})
}

// SetPackageID sets the "package_id" field.
func (u *TaskUpsertBulk) SetPackageID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageID(v)
	})
}

// UpdatePackageID sets the "package_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdatePackageID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageID()
	})
}

// ClearPackageID clears the value of the "package_id" field.
func (u *TaskUpsertBulk) ClearPackageID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageID()
	})
}

// SetPackageName sets the "package_name" field.
func (u *TaskUpsertBulk) SetPackageName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageName(v)
	})
}

// UpdatePackageName sets the "package_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdatePackageName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageName()
	})
}

// ClearPackageName clears the value of the "package_name" field.
func (u *TaskUpsertBulk) ClearPackageName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageName()
	})
}

// SetPackageLatest sets the "package_latest" field.
func (u *TaskUpsertBulk) SetPackageLatest(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetPackageLatest(v)
	})
}

// UpdatePackageLatest sets the "package_latest" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdatePackageLatest() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdatePackageLatest()
	})
}

// ClearPackageLatest clears the value of the "package_latest" field.
func (u *TaskUpsertBulk) ClearPackageLatest() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearPackageLatest()
	})
}

// SetRegistryKey sets the "registry_key" field.
func (u *TaskUpsertBulk) SetRegistryKey(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKey(v)
	})
}

// UpdateRegistryKey sets the "registry_key" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryKey() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKey()
	})
}

// ClearRegistryKey clears the value of the "registry_key" field.
func (u *TaskUpsertBulk) ClearRegistryKey() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKey()
	})
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (u *TaskUpsertBulk) SetRegistryKeyValueName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueName(v)
	})
}

// UpdateRegistryKeyValueName sets the "registry_key_value_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryKeyValueName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueName()
	})
}

// ClearRegistryKeyValueName clears the value of the "registry_key_value_name" field.
func (u *TaskUpsertBulk) ClearRegistryKeyValueName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueName()
	})
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (u *TaskUpsertBulk) SetRegistryKeyValueType(v task.RegistryKeyValueType) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueType(v)
	})
}

// UpdateRegistryKeyValueType sets the "registry_key_value_type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryKeyValueType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueType()
	})
}

// ClearRegistryKeyValueType clears the value of the "registry_key_value_type" field.
func (u *TaskUpsertBulk) ClearRegistryKeyValueType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueType()
	})
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (u *TaskUpsertBulk) SetRegistryKeyValueData(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryKeyValueData(v)
	})
}

// UpdateRegistryKeyValueData sets the "registry_key_value_data" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryKeyValueData() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryKeyValueData()
	})
}

// ClearRegistryKeyValueData clears the value of the "registry_key_value_data" field.
func (u *TaskUpsertBulk) ClearRegistryKeyValueData() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryKeyValueData()
	})
}

// SetRegistryHex sets the "registry_hex" field.
func (u *TaskUpsertBulk) SetRegistryHex(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryHex(v)
	})
}

// UpdateRegistryHex sets the "registry_hex" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryHex() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryHex()
	})
}

// ClearRegistryHex clears the value of the "registry_hex" field.
func (u *TaskUpsertBulk) ClearRegistryHex() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryHex()
	})
}

// SetRegistryForce sets the "registry_force" field.
func (u *TaskUpsertBulk) SetRegistryForce(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetRegistryForce(v)
	})
}

// UpdateRegistryForce sets the "registry_force" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateRegistryForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateRegistryForce()
	})
}

// ClearRegistryForce clears the value of the "registry_force" field.
func (u *TaskUpsertBulk) ClearRegistryForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearRegistryForce()
	})
}

// SetLocalUserUsername sets the "local_user_username" field.
func (u *TaskUpsertBulk) SetLocalUserUsername(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserUsername(v)
	})
}

// UpdateLocalUserUsername sets the "local_user_username" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserUsername() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserUsername()
	})
}

// ClearLocalUserUsername clears the value of the "local_user_username" field.
func (u *TaskUpsertBulk) ClearLocalUserUsername() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserUsername()
	})
}

// SetLocalUserDescription sets the "local_user_description" field.
func (u *TaskUpsertBulk) SetLocalUserDescription(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserDescription(v)
	})
}

// UpdateLocalUserDescription sets the "local_user_description" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserDescription() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserDescription()
	})
}

// ClearLocalUserDescription clears the value of the "local_user_description" field.
func (u *TaskUpsertBulk) ClearLocalUserDescription() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserDescription()
	})
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (u *TaskUpsertBulk) SetLocalUserDisable(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserDisable(v)
	})
}

// UpdateLocalUserDisable sets the "local_user_disable" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserDisable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserDisable()
	})
}

// ClearLocalUserDisable clears the value of the "local_user_disable" field.
func (u *TaskUpsertBulk) ClearLocalUserDisable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserDisable()
	})
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (u *TaskUpsertBulk) SetLocalUserFullname(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserFullname(v)
	})
}

// UpdateLocalUserFullname sets the "local_user_fullname" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserFullname() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserFullname()
	})
}

// ClearLocalUserFullname clears the value of the "local_user_fullname" field.
func (u *TaskUpsertBulk) ClearLocalUserFullname() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserFullname()
	})
}

// SetLocalUserPassword sets the "local_user_password" field.
func (u *TaskUpsertBulk) SetLocalUserPassword(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPassword(v)
	})
}

// UpdateLocalUserPassword sets the "local_user_password" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPassword() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPassword()
	})
}

// ClearLocalUserPassword clears the value of the "local_user_password" field.
func (u *TaskUpsertBulk) ClearLocalUserPassword() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPassword()
	})
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordChangeNotAllowed(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordChangeNotAllowed(v)
	})
}

// UpdateLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordChangeNotAllowed() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordChangeNotAllowed()
	})
}

// ClearLocalUserPasswordChangeNotAllowed clears the value of the "local_user_password_change_not_allowed" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordChangeNotAllowed() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordChangeNotAllowed()
	})
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordChangeRequired(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordChangeRequired(v)
	})
}

// UpdateLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordChangeRequired() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordChangeRequired()
	})
}

// ClearLocalUserPasswordChangeRequired clears the value of the "local_user_password_change_required" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordChangeRequired() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordChangeRequired()
	})
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordNeverExpires(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordNeverExpires(v)
	})
}

// UpdateLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordNeverExpires() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordNeverExpires()
	})
}

// ClearLocalUserPasswordNeverExpires clears the value of the "local_user_password_never_expires" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordNeverExpires() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordNeverExpires()
	})
}

// SetLocalUserAppend sets the "local_user_append" field.
func (u *TaskUpsertBulk) SetLocalUserAppend(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserAppend(v)
	})
}

// UpdateLocalUserAppend sets the "local_user_append" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserAppend() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserAppend()
	})
}

// ClearLocalUserAppend clears the value of the "local_user_append" field.
func (u *TaskUpsertBulk) ClearLocalUserAppend() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserAppend()
	})
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (u *TaskUpsertBulk) SetLocalUserCreateHome(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserCreateHome(v)
	})
}

// UpdateLocalUserCreateHome sets the "local_user_create_home" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserCreateHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserCreateHome()
	})
}

// ClearLocalUserCreateHome clears the value of the "local_user_create_home" field.
func (u *TaskUpsertBulk) ClearLocalUserCreateHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserCreateHome()
	})
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (u *TaskUpsertBulk) SetLocalUserExpires(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserExpires(v)
	})
}

// UpdateLocalUserExpires sets the "local_user_expires" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserExpires() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserExpires()
	})
}

// ClearLocalUserExpires clears the value of the "local_user_expires" field.
func (u *TaskUpsertBulk) ClearLocalUserExpires() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserExpires()
	})
}

// SetLocalUserForce sets the "local_user_force" field.
func (u *TaskUpsertBulk) SetLocalUserForce(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserForce(v)
	})
}

// UpdateLocalUserForce sets the "local_user_force" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserForce()
	})
}

// ClearLocalUserForce clears the value of the "local_user_force" field.
func (u *TaskUpsertBulk) ClearLocalUserForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserForce()
	})
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (u *TaskUpsertBulk) SetLocalUserGenerateSSHKey(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGenerateSSHKey(v)
	})
}

// UpdateLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserGenerateSSHKey() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGenerateSSHKey()
	})
}

// ClearLocalUserGenerateSSHKey clears the value of the "local_user_generate_ssh_key" field.
func (u *TaskUpsertBulk) ClearLocalUserGenerateSSHKey() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGenerateSSHKey()
	})
}

// SetLocalUserGroup sets the "local_user_group" field.
func (u *TaskUpsertBulk) SetLocalUserGroup(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGroup(v)
	})
}

// UpdateLocalUserGroup sets the "local_user_group" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserGroup() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGroup()
	})
}

// ClearLocalUserGroup clears the value of the "local_user_group" field.
func (u *TaskUpsertBulk) ClearLocalUserGroup() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGroup()
	})
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (u *TaskUpsertBulk) SetLocalUserGroups(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserGroups(v)
	})
}

// UpdateLocalUserGroups sets the "local_user_groups" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserGroups() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserGroups()
	})
}

// ClearLocalUserGroups clears the value of the "local_user_groups" field.
func (u *TaskUpsertBulk) ClearLocalUserGroups() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserGroups()
	})
}

// SetLocalUserHome sets the "local_user_home" field.
func (u *TaskUpsertBulk) SetLocalUserHome(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserHome(v)
	})
}

// UpdateLocalUserHome sets the "local_user_home" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserHome()
	})
}

// ClearLocalUserHome clears the value of the "local_user_home" field.
func (u *TaskUpsertBulk) ClearLocalUserHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserHome()
	})
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (u *TaskUpsertBulk) SetLocalUserMoveHome(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserMoveHome(v)
	})
}

// UpdateLocalUserMoveHome sets the "local_user_move_home" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserMoveHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserMoveHome()
	})
}

// ClearLocalUserMoveHome clears the value of the "local_user_move_home" field.
func (u *TaskUpsertBulk) ClearLocalUserMoveHome() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserMoveHome()
	})
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (u *TaskUpsertBulk) SetLocalUserNonunique(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserNonunique(v)
	})
}

// UpdateLocalUserNonunique sets the "local_user_nonunique" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserNonunique() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserNonunique()
	})
}

// ClearLocalUserNonunique clears the value of the "local_user_nonunique" field.
func (u *TaskUpsertBulk) ClearLocalUserNonunique() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserNonunique()
	})
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordExpireAccountDisable(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireAccountDisable(v)
	})
}

// UpdateLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordExpireAccountDisable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireAccountDisable()
	})
}

// ClearLocalUserPasswordExpireAccountDisable clears the value of the "local_user_password_expire_account_disable" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordExpireAccountDisable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireAccountDisable()
	})
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordExpireMax(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireMax(v)
	})
}

// UpdateLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordExpireMax() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireMax()
	})
}

// ClearLocalUserPasswordExpireMax clears the value of the "local_user_password_expire_max" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordExpireMax() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireMax()
	})
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordExpireMin(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireMin(v)
	})
}

// UpdateLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordExpireMin() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireMin()
	})
}

// ClearLocalUserPasswordExpireMin clears the value of the "local_user_password_expire_min" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordExpireMin() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireMin()
	})
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordExpireWarn(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordExpireWarn(v)
	})
}

// UpdateLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordExpireWarn() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordExpireWarn()
	})
}

// ClearLocalUserPasswordExpireWarn clears the value of the "local_user_password_expire_warn" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordExpireWarn() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordExpireWarn()
	})
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (u *TaskUpsertBulk) SetLocalUserPasswordLock(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserPasswordLock(v)
	})
}

// UpdateLocalUserPasswordLock sets the "local_user_password_lock" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserPasswordLock() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserPasswordLock()
	})
}

// ClearLocalUserPasswordLock clears the value of the "local_user_password_lock" field.
func (u *TaskUpsertBulk) ClearLocalUserPasswordLock() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserPasswordLock()
	})
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (u *TaskUpsertBulk) SetLocalUserSeuser(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSeuser(v)
	})
}

// UpdateLocalUserSeuser sets the "local_user_seuser" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSeuser() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSeuser()
	})
}

// ClearLocalUserSeuser clears the value of the "local_user_seuser" field.
func (u *TaskUpsertBulk) ClearLocalUserSeuser() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSeuser()
	})
}

// SetLocalUserShell sets the "local_user_shell" field.
func (u *TaskUpsertBulk) SetLocalUserShell(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserShell(v)
	})
}

// UpdateLocalUserShell sets the "local_user_shell" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserShell() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserShell()
	})
}

// ClearLocalUserShell clears the value of the "local_user_shell" field.
func (u *TaskUpsertBulk) ClearLocalUserShell() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserShell()
	})
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (u *TaskUpsertBulk) SetLocalUserSkeleton(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSkeleton(v)
	})
}

// UpdateLocalUserSkeleton sets the "local_user_skeleton" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSkeleton() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSkeleton()
	})
}

// ClearLocalUserSkeleton clears the value of the "local_user_skeleton" field.
func (u *TaskUpsertBulk) ClearLocalUserSkeleton() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSkeleton()
	})
}

// SetLocalUserSystem sets the "local_user_system" field.
func (u *TaskUpsertBulk) SetLocalUserSystem(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSystem(v)
	})
}

// UpdateLocalUserSystem sets the "local_user_system" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSystem() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSystem()
	})
}

// ClearLocalUserSystem clears the value of the "local_user_system" field.
func (u *TaskUpsertBulk) ClearLocalUserSystem() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSystem()
	})
}

// SetLocalUserID sets the "local_user_id" field.
func (u *TaskUpsertBulk) SetLocalUserID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserID(v)
	})
}

// UpdateLocalUserID sets the "local_user_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserID()
	})
}

// ClearLocalUserID clears the value of the "local_user_id" field.
func (u *TaskUpsertBulk) ClearLocalUserID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserID()
	})
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (u *TaskUpsertBulk) SetLocalUserIDMax(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserIDMax(v)
	})
}

// UpdateLocalUserIDMax sets the "local_user_id_max" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserIDMax() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserIDMax()
	})
}

// ClearLocalUserIDMax clears the value of the "local_user_id_max" field.
func (u *TaskUpsertBulk) ClearLocalUserIDMax() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserIDMax()
	})
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (u *TaskUpsertBulk) SetLocalUserIDMin(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserIDMin(v)
	})
}

// UpdateLocalUserIDMin sets the "local_user_id_min" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserIDMin() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserIDMin()
	})
}

// ClearLocalUserIDMin clears the value of the "local_user_id_min" field.
func (u *TaskUpsertBulk) ClearLocalUserIDMin() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserIDMin()
	})
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (u *TaskUpsertBulk) SetLocalUserSSHKeyBits(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyBits(v)
	})
}

// UpdateLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSSHKeyBits() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyBits()
	})
}

// ClearLocalUserSSHKeyBits clears the value of the "local_user_ssh_key_bits" field.
func (u *TaskUpsertBulk) ClearLocalUserSSHKeyBits() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyBits()
	})
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (u *TaskUpsertBulk) SetLocalUserSSHKeyComment(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyComment(v)
	})
}

// UpdateLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSSHKeyComment() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyComment()
	})
}

// ClearLocalUserSSHKeyComment clears the value of the "local_user_ssh_key_comment" field.
func (u *TaskUpsertBulk) ClearLocalUserSSHKeyComment() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyComment()
	})
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (u *TaskUpsertBulk) SetLocalUserSSHKeyFile(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyFile(v)
	})
}

// UpdateLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSSHKeyFile() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyFile()
	})
}

// ClearLocalUserSSHKeyFile clears the value of the "local_user_ssh_key_file" field.
func (u *TaskUpsertBulk) ClearLocalUserSSHKeyFile() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyFile()
	})
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsertBulk) SetLocalUserSSHKeyPassphrase(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyPassphrase(v)
	})
}

// UpdateLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSSHKeyPassphrase() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyPassphrase()
	})
}

// ClearLocalUserSSHKeyPassphrase clears the value of the "local_user_ssh_key_passphrase" field.
func (u *TaskUpsertBulk) ClearLocalUserSSHKeyPassphrase() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyPassphrase()
	})
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (u *TaskUpsertBulk) SetLocalUserSSHKeyType(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserSSHKeyType(v)
	})
}

// UpdateLocalUserSSHKeyType sets the "local_user_ssh_key_type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserSSHKeyType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserSSHKeyType()
	})
}

// ClearLocalUserSSHKeyType clears the value of the "local_user_ssh_key_type" field.
func (u *TaskUpsertBulk) ClearLocalUserSSHKeyType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserSSHKeyType()
	})
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (u *TaskUpsertBulk) SetLocalUserUmask(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalUserUmask(v)
	})
}

// UpdateLocalUserUmask sets the "local_user_umask" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalUserUmask() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalUserUmask()
	})
}

// ClearLocalUserUmask clears the value of the "local_user_umask" field.
func (u *TaskUpsertBulk) ClearLocalUserUmask() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalUserUmask()
	})
}

// SetLocalGroupID sets the "local_group_id" field.
func (u *TaskUpsertBulk) SetLocalGroupID(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupID(v)
	})
}

// UpdateLocalGroupID sets the "local_group_id" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupID()
	})
}

// ClearLocalGroupID clears the value of the "local_group_id" field.
func (u *TaskUpsertBulk) ClearLocalGroupID() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupID()
	})
}

// SetLocalGroupName sets the "local_group_name" field.
func (u *TaskUpsertBulk) SetLocalGroupName(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupName(v)
	})
}

// UpdateLocalGroupName sets the "local_group_name" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupName()
	})
}

// ClearLocalGroupName clears the value of the "local_group_name" field.
func (u *TaskUpsertBulk) ClearLocalGroupName() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupName()
	})
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (u *TaskUpsertBulk) SetLocalGroupDescription(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupDescription(v)
	})
}

// UpdateLocalGroupDescription sets the "local_group_description" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupDescription() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupDescription()
	})
}

// ClearLocalGroupDescription clears the value of the "local_group_description" field.
func (u *TaskUpsertBulk) ClearLocalGroupDescription() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupDescription()
	})
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (u *TaskUpsertBulk) SetLocalGroupSystem(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupSystem(v)
	})
}

// UpdateLocalGroupSystem sets the "local_group_system" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupSystem() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupSystem()
	})
}

// ClearLocalGroupSystem clears the value of the "local_group_system" field.
func (u *TaskUpsertBulk) ClearLocalGroupSystem() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupSystem()
	})
}

// SetLocalGroupForce sets the "local_group_force" field.
func (u *TaskUpsertBulk) SetLocalGroupForce(v bool) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupForce(v)
	})
}

// UpdateLocalGroupForce sets the "local_group_force" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupForce()
	})
}

// ClearLocalGroupForce clears the value of the "local_group_force" field.
func (u *TaskUpsertBulk) ClearLocalGroupForce() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupForce()
	})
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (u *TaskUpsertBulk) SetLocalGroupMembers(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembers(v)
	})
}

// UpdateLocalGroupMembers sets the "local_group_members" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupMembers() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembers()
	})
}

// ClearLocalGroupMembers clears the value of the "local_group_members" field.
func (u *TaskUpsertBulk) ClearLocalGroupMembers() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembers()
	})
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (u *TaskUpsertBulk) SetLocalGroupMembersToInclude(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembersToInclude(v)
	})
}

// UpdateLocalGroupMembersToInclude sets the "local_group_members_to_include" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupMembersToInclude() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembersToInclude()
	})
}

// ClearLocalGroupMembersToInclude clears the value of the "local_group_members_to_include" field.
func (u *TaskUpsertBulk) ClearLocalGroupMembersToInclude() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembersToInclude()
	})
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (u *TaskUpsertBulk) SetLocalGroupMembersToExclude(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetLocalGroupMembersToExclude(v)
	})
}

// UpdateLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateLocalGroupMembersToExclude() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateLocalGroupMembersToExclude()
	})
}

// ClearLocalGroupMembersToExclude clears the value of the "local_group_members_to_exclude" field.
func (u *TaskUpsertBulk) ClearLocalGroupMembersToExclude() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearLocalGroupMembersToExclude()
	})
}

// SetMsiProductid sets the "msi_productid" field.
func (u *TaskUpsertBulk) SetMsiProductid(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiProductid(v)
	})
}

// UpdateMsiProductid sets the "msi_productid" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiProductid() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiProductid()
	})
}

// ClearMsiProductid clears the value of the "msi_productid" field.
func (u *TaskUpsertBulk) ClearMsiProductid() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiProductid()
	})
}

// SetMsiPath sets the "msi_path" field.
func (u *TaskUpsertBulk) SetMsiPath(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiPath(v)
	})
}

// UpdateMsiPath sets the "msi_path" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiPath() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiPath()
	})
}

// ClearMsiPath clears the value of the "msi_path" field.
func (u *TaskUpsertBulk) ClearMsiPath() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiPath()
	})
}

// SetMsiArguments sets the "msi_arguments" field.
func (u *TaskUpsertBulk) SetMsiArguments(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiArguments(v)
	})
}

// UpdateMsiArguments sets the "msi_arguments" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiArguments() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiArguments()
	})
}

// ClearMsiArguments clears the value of the "msi_arguments" field.
func (u *TaskUpsertBulk) ClearMsiArguments() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiArguments()
	})
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (u *TaskUpsertBulk) SetMsiFileHash(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiFileHash(v)
	})
}

// UpdateMsiFileHash sets the "msi_file_hash" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiFileHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiFileHash()
	})
}

// ClearMsiFileHash clears the value of the "msi_file_hash" field.
func (u *TaskUpsertBulk) ClearMsiFileHash() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiFileHash()
	})
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (u *TaskUpsertBulk) SetMsiFileHashAlg(v task.MsiFileHashAlg) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiFileHashAlg(v)
	})
}

// UpdateMsiFileHashAlg sets the "msi_file_hash_alg" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiFileHashAlg() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiFileHashAlg()
	})
}

// ClearMsiFileHashAlg clears the value of the "msi_file_hash_alg" field.
func (u *TaskUpsertBulk) ClearMsiFileHashAlg() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiFileHashAlg()
	})
}

// SetMsiLogPath sets the "msi_log_path" field.
func (u *TaskUpsertBulk) SetMsiLogPath(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetMsiLogPath(v)
	})
}

// UpdateMsiLogPath sets the "msi_log_path" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateMsiLogPath() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateMsiLogPath()
	})
}

// ClearMsiLogPath clears the value of the "msi_log_path" field.
func (u *TaskUpsertBulk) ClearMsiLogPath() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearMsiLogPath()
	})
}

// SetScript sets the "script" field.
func (u *TaskUpsertBulk) SetScript(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetScript(v)
	})
}

// UpdateScript sets the "script" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateScript() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScript()
	})
}

// ClearScript clears the value of the "script" field.
func (u *TaskUpsertBulk) ClearScript() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScript()
	})
}

// SetScriptExecutable sets the "script_executable" field.
func (u *TaskUpsertBulk) SetScriptExecutable(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptExecutable(v)
	})
}

// UpdateScriptExecutable sets the "script_executable" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateScriptExecutable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptExecutable()
	})
}

// ClearScriptExecutable clears the value of the "script_executable" field.
func (u *TaskUpsertBulk) ClearScriptExecutable() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptExecutable()
	})
}

// SetScriptCreates sets the "script_creates" field.
func (u *TaskUpsertBulk) SetScriptCreates(v string) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptCreates(v)
	})
}

// UpdateScriptCreates sets the "script_creates" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateScriptCreates() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptCreates()
	})
}

// ClearScriptCreates clears the value of the "script_creates" field.
func (u *TaskUpsertBulk) ClearScriptCreates() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptCreates()
	})
}

// SetScriptRun sets the "script_run" field.
func (u *TaskUpsertBulk) SetScriptRun(v task.ScriptRun) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetScriptRun(v)
	})
}

// UpdateScriptRun sets the "script_run" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateScriptRun() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateScriptRun()
	})
}

// ClearScriptRun clears the value of the "script_run" field.
func (u *TaskUpsertBulk) ClearScriptRun() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearScriptRun()
	})
}

// SetAgentType sets the "agent_type" field.
func (u *TaskUpsertBulk) SetAgentType(v task.AgentType) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetAgentType(v)
	})
}

// UpdateAgentType sets the "agent_type" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateAgentType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateAgentType()
	})
}

// ClearAgentType clears the value of the "agent_type" field.
func (u *TaskUpsertBulk) ClearAgentType() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearAgentType()
	})
}

// SetWhen sets the "when" field.
func (u *TaskUpsertBulk) SetWhen(v time.Time) *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.SetWhen(v)
	})
}

// UpdateWhen sets the "when" field to the value that was provided on create.
func (u *TaskUpsertBulk) UpdateWhen() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.UpdateWhen()
	})
}

// ClearWhen clears the value of the "when" field.
func (u *TaskUpsertBulk) ClearWhen() *TaskUpsertBulk {
	return u.Update(func(s *TaskUpsert) {
		s.ClearWhen()
	})
}

// Exec executes the query.
func (u *TaskUpsertBulk) Exec(ctx context.Context) error {
	if u.create.err != nil {
		return u.create.err
	}
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the TaskCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for TaskCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *TaskUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
