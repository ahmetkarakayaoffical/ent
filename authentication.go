// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/authentication"
)

// Authentication is the model entity for the Authentication schema.
type Authentication struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// UseCertificates holds the value of the "use_certificates" field.
	UseCertificates bool `json:"use_certificates,omitempty"`
	// AllowRegister holds the value of the "allow_register" field.
	AllowRegister bool `json:"allow_register,omitempty"`
	// UseOIDC holds the value of the "use_OIDC" field.
	UseOIDC bool `json:"use_OIDC,omitempty"`
	// OIDCProvider holds the value of the "OIDC_provider" field.
	OIDCProvider string `json:"OIDC_provider,omitempty"`
	// OIDCIssuerURL holds the value of the "OIDC_issuer_url" field.
	OIDCIssuerURL string `json:"OIDC_issuer_url,omitempty"`
	// OIDCClientID holds the value of the "OIDC_client_id" field.
	OIDCClientID string `json:"OIDC_client_id,omitempty"`
	// OIDCRole holds the value of the "OIDC_role" field.
	OIDCRole string `json:"OIDC_role,omitempty"`
	// OIDCCookieEncriptionKey holds the value of the "OIDC_cookie_encription_key" field.
	OIDCCookieEncriptionKey string `json:"OIDC_cookie_encription_key,omitempty"`
	// OIDCKeycloakPublicKey holds the value of the "OIDC_keycloak_public_key" field.
	OIDCKeycloakPublicKey string `json:"OIDC_keycloak_public_key,omitempty"`
	// OIDCAutoCreateAccount holds the value of the "OIDC_auto_create_account" field.
	OIDCAutoCreateAccount bool `json:"OIDC_auto_create_account,omitempty"`
	// OIDCAutoApprove holds the value of the "OIDC_auto_approve" field.
	OIDCAutoApprove bool `json:"OIDC_auto_approve,omitempty"`
	selectValues    sql.SelectValues
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Authentication) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case authentication.FieldUseCertificates, authentication.FieldAllowRegister, authentication.FieldUseOIDC, authentication.FieldOIDCAutoCreateAccount, authentication.FieldOIDCAutoApprove:
			values[i] = new(sql.NullBool)
		case authentication.FieldID:
			values[i] = new(sql.NullInt64)
		case authentication.FieldOIDCProvider, authentication.FieldOIDCIssuerURL, authentication.FieldOIDCClientID, authentication.FieldOIDCRole, authentication.FieldOIDCCookieEncriptionKey, authentication.FieldOIDCKeycloakPublicKey:
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Authentication fields.
func (a *Authentication) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case authentication.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			a.ID = int(value.Int64)
		case authentication.FieldUseCertificates:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_certificates", values[i])
			} else if value.Valid {
				a.UseCertificates = value.Bool
			}
		case authentication.FieldAllowRegister:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field allow_register", values[i])
			} else if value.Valid {
				a.AllowRegister = value.Bool
			}
		case authentication.FieldUseOIDC:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field use_OIDC", values[i])
			} else if value.Valid {
				a.UseOIDC = value.Bool
			}
		case authentication.FieldOIDCProvider:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_provider", values[i])
			} else if value.Valid {
				a.OIDCProvider = value.String
			}
		case authentication.FieldOIDCIssuerURL:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_issuer_url", values[i])
			} else if value.Valid {
				a.OIDCIssuerURL = value.String
			}
		case authentication.FieldOIDCClientID:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_client_id", values[i])
			} else if value.Valid {
				a.OIDCClientID = value.String
			}
		case authentication.FieldOIDCRole:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_role", values[i])
			} else if value.Valid {
				a.OIDCRole = value.String
			}
		case authentication.FieldOIDCCookieEncriptionKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_cookie_encription_key", values[i])
			} else if value.Valid {
				a.OIDCCookieEncriptionKey = value.String
			}
		case authentication.FieldOIDCKeycloakPublicKey:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_keycloak_public_key", values[i])
			} else if value.Valid {
				a.OIDCKeycloakPublicKey = value.String
			}
		case authentication.FieldOIDCAutoCreateAccount:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_auto_create_account", values[i])
			} else if value.Valid {
				a.OIDCAutoCreateAccount = value.Bool
			}
		case authentication.FieldOIDCAutoApprove:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field OIDC_auto_approve", values[i])
			} else if value.Valid {
				a.OIDCAutoApprove = value.Bool
			}
		default:
			a.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Authentication.
// This includes values selected through modifiers, order, etc.
func (a *Authentication) Value(name string) (ent.Value, error) {
	return a.selectValues.Get(name)
}

// Update returns a builder for updating this Authentication.
// Note that you need to call Authentication.Unwrap() before calling this method if this Authentication
// was returned from a transaction, and the transaction was committed or rolled back.
func (a *Authentication) Update() *AuthenticationUpdateOne {
	return NewAuthenticationClient(a.config).UpdateOne(a)
}

// Unwrap unwraps the Authentication entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (a *Authentication) Unwrap() *Authentication {
	_tx, ok := a.config.driver.(*txDriver)
	if !ok {
		panic("ent: Authentication is not a transactional entity")
	}
	a.config.driver = _tx.drv
	return a
}

// String implements the fmt.Stringer.
func (a *Authentication) String() string {
	var builder strings.Builder
	builder.WriteString("Authentication(")
	builder.WriteString(fmt.Sprintf("id=%v, ", a.ID))
	builder.WriteString("use_certificates=")
	builder.WriteString(fmt.Sprintf("%v", a.UseCertificates))
	builder.WriteString(", ")
	builder.WriteString("allow_register=")
	builder.WriteString(fmt.Sprintf("%v", a.AllowRegister))
	builder.WriteString(", ")
	builder.WriteString("use_OIDC=")
	builder.WriteString(fmt.Sprintf("%v", a.UseOIDC))
	builder.WriteString(", ")
	builder.WriteString("OIDC_provider=")
	builder.WriteString(a.OIDCProvider)
	builder.WriteString(", ")
	builder.WriteString("OIDC_issuer_url=")
	builder.WriteString(a.OIDCIssuerURL)
	builder.WriteString(", ")
	builder.WriteString("OIDC_client_id=")
	builder.WriteString(a.OIDCClientID)
	builder.WriteString(", ")
	builder.WriteString("OIDC_role=")
	builder.WriteString(a.OIDCRole)
	builder.WriteString(", ")
	builder.WriteString("OIDC_cookie_encription_key=")
	builder.WriteString(a.OIDCCookieEncriptionKey)
	builder.WriteString(", ")
	builder.WriteString("OIDC_keycloak_public_key=")
	builder.WriteString(a.OIDCKeycloakPublicKey)
	builder.WriteString(", ")
	builder.WriteString("OIDC_auto_create_account=")
	builder.WriteString(fmt.Sprintf("%v", a.OIDCAutoCreateAccount))
	builder.WriteString(", ")
	builder.WriteString("OIDC_auto_approve=")
	builder.WriteString(fmt.Sprintf("%v", a.OIDCAutoApprove))
	builder.WriteByte(')')
	return builder.String()
}

// Authentications is a parsable slice of Authentication.
type Authentications []*Authentication
