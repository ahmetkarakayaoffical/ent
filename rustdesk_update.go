// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/rustdesk"
	"github.com/open-uem/ent/tenant"
)

// RustDeskUpdate is the builder for updating RustDesk entities.
type RustDeskUpdate struct {
	config
	hooks     []Hook
	mutation  *RustDeskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RustDeskUpdate builder.
func (rdu *RustDeskUpdate) Where(ps ...predicate.RustDesk) *RustDeskUpdate {
	rdu.mutation.Where(ps...)
	return rdu
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (rdu *RustDeskUpdate) SetCustomRendezvousServer(s string) *RustDeskUpdate {
	rdu.mutation.SetCustomRendezvousServer(s)
	return rdu
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableCustomRendezvousServer(s *string) *RustDeskUpdate {
	if s != nil {
		rdu.SetCustomRendezvousServer(*s)
	}
	return rdu
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (rdu *RustDeskUpdate) ClearCustomRendezvousServer() *RustDeskUpdate {
	rdu.mutation.ClearCustomRendezvousServer()
	return rdu
}

// SetRelayServer sets the "relay_server" field.
func (rdu *RustDeskUpdate) SetRelayServer(s string) *RustDeskUpdate {
	rdu.mutation.SetRelayServer(s)
	return rdu
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableRelayServer(s *string) *RustDeskUpdate {
	if s != nil {
		rdu.SetRelayServer(*s)
	}
	return rdu
}

// ClearRelayServer clears the value of the "relay_server" field.
func (rdu *RustDeskUpdate) ClearRelayServer() *RustDeskUpdate {
	rdu.mutation.ClearRelayServer()
	return rdu
}

// SetAPIServer sets the "api_server" field.
func (rdu *RustDeskUpdate) SetAPIServer(s string) *RustDeskUpdate {
	rdu.mutation.SetAPIServer(s)
	return rdu
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableAPIServer(s *string) *RustDeskUpdate {
	if s != nil {
		rdu.SetAPIServer(*s)
	}
	return rdu
}

// ClearAPIServer clears the value of the "api_server" field.
func (rdu *RustDeskUpdate) ClearAPIServer() *RustDeskUpdate {
	rdu.mutation.ClearAPIServer()
	return rdu
}

// SetKey sets the "key" field.
func (rdu *RustDeskUpdate) SetKey(s string) *RustDeskUpdate {
	rdu.mutation.SetKey(s)
	return rdu
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableKey(s *string) *RustDeskUpdate {
	if s != nil {
		rdu.SetKey(*s)
	}
	return rdu
}

// ClearKey clears the value of the "key" field.
func (rdu *RustDeskUpdate) ClearKey() *RustDeskUpdate {
	rdu.mutation.ClearKey()
	return rdu
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (rdu *RustDeskUpdate) SetUsePermanentPassword(b bool) *RustDeskUpdate {
	rdu.mutation.SetUsePermanentPassword(b)
	return rdu
}

// SetNillableUsePermanentPassword sets the "use_permanent_password" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableUsePermanentPassword(b *bool) *RustDeskUpdate {
	if b != nil {
		rdu.SetUsePermanentPassword(*b)
	}
	return rdu
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (rdu *RustDeskUpdate) ClearUsePermanentPassword() *RustDeskUpdate {
	rdu.mutation.ClearUsePermanentPassword()
	return rdu
}

// SetWhitelist sets the "whitelist" field.
func (rdu *RustDeskUpdate) SetWhitelist(s string) *RustDeskUpdate {
	rdu.mutation.SetWhitelist(s)
	return rdu
}

// SetNillableWhitelist sets the "whitelist" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableWhitelist(s *string) *RustDeskUpdate {
	if s != nil {
		rdu.SetWhitelist(*s)
	}
	return rdu
}

// ClearWhitelist clears the value of the "whitelist" field.
func (rdu *RustDeskUpdate) ClearWhitelist() *RustDeskUpdate {
	rdu.mutation.ClearWhitelist()
	return rdu
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (rdu *RustDeskUpdate) SetDirectIPAccess(b bool) *RustDeskUpdate {
	rdu.mutation.SetDirectIPAccess(b)
	return rdu
}

// SetNillableDirectIPAccess sets the "direct_ip_access" field if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableDirectIPAccess(b *bool) *RustDeskUpdate {
	if b != nil {
		rdu.SetDirectIPAccess(*b)
	}
	return rdu
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (rdu *RustDeskUpdate) ClearDirectIPAccess() *RustDeskUpdate {
	rdu.mutation.ClearDirectIPAccess()
	return rdu
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (rdu *RustDeskUpdate) SetTenantID(id int) *RustDeskUpdate {
	rdu.mutation.SetTenantID(id)
	return rdu
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (rdu *RustDeskUpdate) SetNillableTenantID(id *int) *RustDeskUpdate {
	if id != nil {
		rdu = rdu.SetTenantID(*id)
	}
	return rdu
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rdu *RustDeskUpdate) SetTenant(t *Tenant) *RustDeskUpdate {
	return rdu.SetTenantID(t.ID)
}

// Mutation returns the RustDeskMutation object of the builder.
func (rdu *RustDeskUpdate) Mutation() *RustDeskMutation {
	return rdu.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rdu *RustDeskUpdate) ClearTenant() *RustDeskUpdate {
	rdu.mutation.ClearTenant()
	return rdu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (rdu *RustDeskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, rdu.sqlSave, rdu.mutation, rdu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rdu *RustDeskUpdate) SaveX(ctx context.Context) int {
	affected, err := rdu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (rdu *RustDeskUpdate) Exec(ctx context.Context) error {
	_, err := rdu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rdu *RustDeskUpdate) ExecX(ctx context.Context) {
	if err := rdu.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rdu *RustDeskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RustDeskUpdate {
	rdu.modifiers = append(rdu.modifiers, modifiers...)
	return rdu
}

func (rdu *RustDeskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rustdesk.Table, rustdesk.Columns, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	if ps := rdu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rdu.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
	}
	if rdu.mutation.CustomRendezvousServerCleared() {
		_spec.ClearField(rustdesk.FieldCustomRendezvousServer, field.TypeString)
	}
	if value, ok := rdu.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
	}
	if rdu.mutation.RelayServerCleared() {
		_spec.ClearField(rustdesk.FieldRelayServer, field.TypeString)
	}
	if value, ok := rdu.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
	}
	if rdu.mutation.APIServerCleared() {
		_spec.ClearField(rustdesk.FieldAPIServer, field.TypeString)
	}
	if value, ok := rdu.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
	}
	if rdu.mutation.KeyCleared() {
		_spec.ClearField(rustdesk.FieldKey, field.TypeString)
	}
	if value, ok := rdu.mutation.UsePermanentPassword(); ok {
		_spec.SetField(rustdesk.FieldUsePermanentPassword, field.TypeBool, value)
	}
	if rdu.mutation.UsePermanentPasswordCleared() {
		_spec.ClearField(rustdesk.FieldUsePermanentPassword, field.TypeBool)
	}
	if value, ok := rdu.mutation.Whitelist(); ok {
		_spec.SetField(rustdesk.FieldWhitelist, field.TypeString, value)
	}
	if rdu.mutation.WhitelistCleared() {
		_spec.ClearField(rustdesk.FieldWhitelist, field.TypeString)
	}
	if value, ok := rdu.mutation.DirectIPAccess(); ok {
		_spec.SetField(rustdesk.FieldDirectIPAccess, field.TypeBool, value)
	}
	if rdu.mutation.DirectIPAccessCleared() {
		_spec.ClearField(rustdesk.FieldDirectIPAccess, field.TypeBool)
	}
	if rdu.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: []string{rustdesk.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rdu.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: []string{rustdesk.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rdu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, rdu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rustdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	rdu.mutation.done = true
	return n, nil
}

// RustDeskUpdateOne is the builder for updating a single RustDesk entity.
type RustDeskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RustDeskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (rduo *RustDeskUpdateOne) SetCustomRendezvousServer(s string) *RustDeskUpdateOne {
	rduo.mutation.SetCustomRendezvousServer(s)
	return rduo
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableCustomRendezvousServer(s *string) *RustDeskUpdateOne {
	if s != nil {
		rduo.SetCustomRendezvousServer(*s)
	}
	return rduo
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (rduo *RustDeskUpdateOne) ClearCustomRendezvousServer() *RustDeskUpdateOne {
	rduo.mutation.ClearCustomRendezvousServer()
	return rduo
}

// SetRelayServer sets the "relay_server" field.
func (rduo *RustDeskUpdateOne) SetRelayServer(s string) *RustDeskUpdateOne {
	rduo.mutation.SetRelayServer(s)
	return rduo
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableRelayServer(s *string) *RustDeskUpdateOne {
	if s != nil {
		rduo.SetRelayServer(*s)
	}
	return rduo
}

// ClearRelayServer clears the value of the "relay_server" field.
func (rduo *RustDeskUpdateOne) ClearRelayServer() *RustDeskUpdateOne {
	rduo.mutation.ClearRelayServer()
	return rduo
}

// SetAPIServer sets the "api_server" field.
func (rduo *RustDeskUpdateOne) SetAPIServer(s string) *RustDeskUpdateOne {
	rduo.mutation.SetAPIServer(s)
	return rduo
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableAPIServer(s *string) *RustDeskUpdateOne {
	if s != nil {
		rduo.SetAPIServer(*s)
	}
	return rduo
}

// ClearAPIServer clears the value of the "api_server" field.
func (rduo *RustDeskUpdateOne) ClearAPIServer() *RustDeskUpdateOne {
	rduo.mutation.ClearAPIServer()
	return rduo
}

// SetKey sets the "key" field.
func (rduo *RustDeskUpdateOne) SetKey(s string) *RustDeskUpdateOne {
	rduo.mutation.SetKey(s)
	return rduo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableKey(s *string) *RustDeskUpdateOne {
	if s != nil {
		rduo.SetKey(*s)
	}
	return rduo
}

// ClearKey clears the value of the "key" field.
func (rduo *RustDeskUpdateOne) ClearKey() *RustDeskUpdateOne {
	rduo.mutation.ClearKey()
	return rduo
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (rduo *RustDeskUpdateOne) SetUsePermanentPassword(b bool) *RustDeskUpdateOne {
	rduo.mutation.SetUsePermanentPassword(b)
	return rduo
}

// SetNillableUsePermanentPassword sets the "use_permanent_password" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableUsePermanentPassword(b *bool) *RustDeskUpdateOne {
	if b != nil {
		rduo.SetUsePermanentPassword(*b)
	}
	return rduo
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (rduo *RustDeskUpdateOne) ClearUsePermanentPassword() *RustDeskUpdateOne {
	rduo.mutation.ClearUsePermanentPassword()
	return rduo
}

// SetWhitelist sets the "whitelist" field.
func (rduo *RustDeskUpdateOne) SetWhitelist(s string) *RustDeskUpdateOne {
	rduo.mutation.SetWhitelist(s)
	return rduo
}

// SetNillableWhitelist sets the "whitelist" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableWhitelist(s *string) *RustDeskUpdateOne {
	if s != nil {
		rduo.SetWhitelist(*s)
	}
	return rduo
}

// ClearWhitelist clears the value of the "whitelist" field.
func (rduo *RustDeskUpdateOne) ClearWhitelist() *RustDeskUpdateOne {
	rduo.mutation.ClearWhitelist()
	return rduo
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (rduo *RustDeskUpdateOne) SetDirectIPAccess(b bool) *RustDeskUpdateOne {
	rduo.mutation.SetDirectIPAccess(b)
	return rduo
}

// SetNillableDirectIPAccess sets the "direct_ip_access" field if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableDirectIPAccess(b *bool) *RustDeskUpdateOne {
	if b != nil {
		rduo.SetDirectIPAccess(*b)
	}
	return rduo
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (rduo *RustDeskUpdateOne) ClearDirectIPAccess() *RustDeskUpdateOne {
	rduo.mutation.ClearDirectIPAccess()
	return rduo
}

// SetTenantID sets the "tenant" edge to the Tenant entity by ID.
func (rduo *RustDeskUpdateOne) SetTenantID(id int) *RustDeskUpdateOne {
	rduo.mutation.SetTenantID(id)
	return rduo
}

// SetNillableTenantID sets the "tenant" edge to the Tenant entity by ID if the given value is not nil.
func (rduo *RustDeskUpdateOne) SetNillableTenantID(id *int) *RustDeskUpdateOne {
	if id != nil {
		rduo = rduo.SetTenantID(*id)
	}
	return rduo
}

// SetTenant sets the "tenant" edge to the Tenant entity.
func (rduo *RustDeskUpdateOne) SetTenant(t *Tenant) *RustDeskUpdateOne {
	return rduo.SetTenantID(t.ID)
}

// Mutation returns the RustDeskMutation object of the builder.
func (rduo *RustDeskUpdateOne) Mutation() *RustDeskMutation {
	return rduo.mutation
}

// ClearTenant clears the "tenant" edge to the Tenant entity.
func (rduo *RustDeskUpdateOne) ClearTenant() *RustDeskUpdateOne {
	rduo.mutation.ClearTenant()
	return rduo
}

// Where appends a list predicates to the RustDeskUpdate builder.
func (rduo *RustDeskUpdateOne) Where(ps ...predicate.RustDesk) *RustDeskUpdateOne {
	rduo.mutation.Where(ps...)
	return rduo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (rduo *RustDeskUpdateOne) Select(field string, fields ...string) *RustDeskUpdateOne {
	rduo.fields = append([]string{field}, fields...)
	return rduo
}

// Save executes the query and returns the updated RustDesk entity.
func (rduo *RustDeskUpdateOne) Save(ctx context.Context) (*RustDesk, error) {
	return withHooks(ctx, rduo.sqlSave, rduo.mutation, rduo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (rduo *RustDeskUpdateOne) SaveX(ctx context.Context) *RustDesk {
	node, err := rduo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (rduo *RustDeskUpdateOne) Exec(ctx context.Context) error {
	_, err := rduo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (rduo *RustDeskUpdateOne) ExecX(ctx context.Context) {
	if err := rduo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (rduo *RustDeskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RustDeskUpdateOne {
	rduo.modifiers = append(rduo.modifiers, modifiers...)
	return rduo
}

func (rduo *RustDeskUpdateOne) sqlSave(ctx context.Context) (_node *RustDesk, err error) {
	_spec := sqlgraph.NewUpdateSpec(rustdesk.Table, rustdesk.Columns, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	id, ok := rduo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "RustDesk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := rduo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rustdesk.FieldID)
		for _, f := range fields {
			if !rustdesk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rustdesk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := rduo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := rduo.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
	}
	if rduo.mutation.CustomRendezvousServerCleared() {
		_spec.ClearField(rustdesk.FieldCustomRendezvousServer, field.TypeString)
	}
	if value, ok := rduo.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
	}
	if rduo.mutation.RelayServerCleared() {
		_spec.ClearField(rustdesk.FieldRelayServer, field.TypeString)
	}
	if value, ok := rduo.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
	}
	if rduo.mutation.APIServerCleared() {
		_spec.ClearField(rustdesk.FieldAPIServer, field.TypeString)
	}
	if value, ok := rduo.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
	}
	if rduo.mutation.KeyCleared() {
		_spec.ClearField(rustdesk.FieldKey, field.TypeString)
	}
	if value, ok := rduo.mutation.UsePermanentPassword(); ok {
		_spec.SetField(rustdesk.FieldUsePermanentPassword, field.TypeBool, value)
	}
	if rduo.mutation.UsePermanentPasswordCleared() {
		_spec.ClearField(rustdesk.FieldUsePermanentPassword, field.TypeBool)
	}
	if value, ok := rduo.mutation.Whitelist(); ok {
		_spec.SetField(rustdesk.FieldWhitelist, field.TypeString, value)
	}
	if rduo.mutation.WhitelistCleared() {
		_spec.ClearField(rustdesk.FieldWhitelist, field.TypeString)
	}
	if value, ok := rduo.mutation.DirectIPAccess(); ok {
		_spec.SetField(rustdesk.FieldDirectIPAccess, field.TypeBool, value)
	}
	if rduo.mutation.DirectIPAccessCleared() {
		_spec.ClearField(rustdesk.FieldDirectIPAccess, field.TypeBool)
	}
	if rduo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: []string{rustdesk.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := rduo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: []string{rustdesk.TenantColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(rduo.modifiers...)
	_node = &RustDesk{config: rduo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, rduo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rustdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	rduo.mutation.done = true
	return _node, nil
}
