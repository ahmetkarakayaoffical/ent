// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/ahmetkarakayaoffical/ent/predicate"
	"github.com/ahmetkarakayaoffical/ent/rustdesk"
	"github.com/ahmetkarakayaoffical/ent/tenant"
)

// RustdeskUpdate is the builder for updating Rustdesk entities.
type RustdeskUpdate struct {
	config
	hooks     []Hook
	mutation  *RustdeskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the RustdeskUpdate builder.
func (ru *RustdeskUpdate) Where(ps ...predicate.Rustdesk) *RustdeskUpdate {
	ru.mutation.Where(ps...)
	return ru
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (ru *RustdeskUpdate) SetCustomRendezvousServer(s string) *RustdeskUpdate {
	ru.mutation.SetCustomRendezvousServer(s)
	return ru
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableCustomRendezvousServer(s *string) *RustdeskUpdate {
	if s != nil {
		ru.SetCustomRendezvousServer(*s)
	}
	return ru
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (ru *RustdeskUpdate) ClearCustomRendezvousServer() *RustdeskUpdate {
	ru.mutation.ClearCustomRendezvousServer()
	return ru
}

// SetRelayServer sets the "relay_server" field.
func (ru *RustdeskUpdate) SetRelayServer(s string) *RustdeskUpdate {
	ru.mutation.SetRelayServer(s)
	return ru
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableRelayServer(s *string) *RustdeskUpdate {
	if s != nil {
		ru.SetRelayServer(*s)
	}
	return ru
}

// ClearRelayServer clears the value of the "relay_server" field.
func (ru *RustdeskUpdate) ClearRelayServer() *RustdeskUpdate {
	ru.mutation.ClearRelayServer()
	return ru
}

// SetAPIServer sets the "api_server" field.
func (ru *RustdeskUpdate) SetAPIServer(s string) *RustdeskUpdate {
	ru.mutation.SetAPIServer(s)
	return ru
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableAPIServer(s *string) *RustdeskUpdate {
	if s != nil {
		ru.SetAPIServer(*s)
	}
	return ru
}

// ClearAPIServer clears the value of the "api_server" field.
func (ru *RustdeskUpdate) ClearAPIServer() *RustdeskUpdate {
	ru.mutation.ClearAPIServer()
	return ru
}

// SetKey sets the "key" field.
func (ru *RustdeskUpdate) SetKey(s string) *RustdeskUpdate {
	ru.mutation.SetKey(s)
	return ru
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableKey(s *string) *RustdeskUpdate {
	if s != nil {
		ru.SetKey(*s)
	}
	return ru
}

// ClearKey clears the value of the "key" field.
func (ru *RustdeskUpdate) ClearKey() *RustdeskUpdate {
	ru.mutation.ClearKey()
	return ru
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (ru *RustdeskUpdate) SetUsePermanentPassword(b bool) *RustdeskUpdate {
	ru.mutation.SetUsePermanentPassword(b)
	return ru
}

// SetNillableUsePermanentPassword sets the "use_permanent_password" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableUsePermanentPassword(b *bool) *RustdeskUpdate {
	if b != nil {
		ru.SetUsePermanentPassword(*b)
	}
	return ru
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (ru *RustdeskUpdate) ClearUsePermanentPassword() *RustdeskUpdate {
	ru.mutation.ClearUsePermanentPassword()
	return ru
}

// SetWhitelist sets the "whitelist" field.
func (ru *RustdeskUpdate) SetWhitelist(s string) *RustdeskUpdate {
	ru.mutation.SetWhitelist(s)
	return ru
}

// SetNillableWhitelist sets the "whitelist" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableWhitelist(s *string) *RustdeskUpdate {
	if s != nil {
		ru.SetWhitelist(*s)
	}
	return ru
}

// ClearWhitelist clears the value of the "whitelist" field.
func (ru *RustdeskUpdate) ClearWhitelist() *RustdeskUpdate {
	ru.mutation.ClearWhitelist()
	return ru
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (ru *RustdeskUpdate) SetDirectIPAccess(b bool) *RustdeskUpdate {
	ru.mutation.SetDirectIPAccess(b)
	return ru
}

// SetNillableDirectIPAccess sets the "direct_ip_access" field if the given value is not nil.
func (ru *RustdeskUpdate) SetNillableDirectIPAccess(b *bool) *RustdeskUpdate {
	if b != nil {
		ru.SetDirectIPAccess(*b)
	}
	return ru
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (ru *RustdeskUpdate) ClearDirectIPAccess() *RustdeskUpdate {
	ru.mutation.ClearDirectIPAccess()
	return ru
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (ru *RustdeskUpdate) AddTenantIDs(ids ...int) *RustdeskUpdate {
	ru.mutation.AddTenantIDs(ids...)
	return ru
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (ru *RustdeskUpdate) AddTenant(t ...*Tenant) *RustdeskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.AddTenantIDs(ids...)
}

// Mutation returns the RustdeskMutation object of the builder.
func (ru *RustdeskUpdate) Mutation() *RustdeskMutation {
	return ru.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (ru *RustdeskUpdate) ClearTenant() *RustdeskUpdate {
	ru.mutation.ClearTenant()
	return ru
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (ru *RustdeskUpdate) RemoveTenantIDs(ids ...int) *RustdeskUpdate {
	ru.mutation.RemoveTenantIDs(ids...)
	return ru
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (ru *RustdeskUpdate) RemoveTenant(t ...*Tenant) *RustdeskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ru.RemoveTenantIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (ru *RustdeskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, ru.sqlSave, ru.mutation, ru.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ru *RustdeskUpdate) SaveX(ctx context.Context) int {
	affected, err := ru.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (ru *RustdeskUpdate) Exec(ctx context.Context) error {
	_, err := ru.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ru *RustdeskUpdate) ExecX(ctx context.Context) {
	if err := ru.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ru *RustdeskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RustdeskUpdate {
	ru.modifiers = append(ru.modifiers, modifiers...)
	return ru
}

func (ru *RustdeskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := sqlgraph.NewUpdateSpec(rustdesk.Table, rustdesk.Columns, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	if ps := ru.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ru.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
	}
	if ru.mutation.CustomRendezvousServerCleared() {
		_spec.ClearField(rustdesk.FieldCustomRendezvousServer, field.TypeString)
	}
	if value, ok := ru.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
	}
	if ru.mutation.RelayServerCleared() {
		_spec.ClearField(rustdesk.FieldRelayServer, field.TypeString)
	}
	if value, ok := ru.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
	}
	if ru.mutation.APIServerCleared() {
		_spec.ClearField(rustdesk.FieldAPIServer, field.TypeString)
	}
	if value, ok := ru.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
	}
	if ru.mutation.KeyCleared() {
		_spec.ClearField(rustdesk.FieldKey, field.TypeString)
	}
	if value, ok := ru.mutation.UsePermanentPassword(); ok {
		_spec.SetField(rustdesk.FieldUsePermanentPassword, field.TypeBool, value)
	}
	if ru.mutation.UsePermanentPasswordCleared() {
		_spec.ClearField(rustdesk.FieldUsePermanentPassword, field.TypeBool)
	}
	if value, ok := ru.mutation.Whitelist(); ok {
		_spec.SetField(rustdesk.FieldWhitelist, field.TypeString, value)
	}
	if ru.mutation.WhitelistCleared() {
		_spec.ClearField(rustdesk.FieldWhitelist, field.TypeString)
	}
	if value, ok := ru.mutation.DirectIPAccess(); ok {
		_spec.SetField(rustdesk.FieldDirectIPAccess, field.TypeBool, value)
	}
	if ru.mutation.DirectIPAccessCleared() {
		_spec.ClearField(rustdesk.FieldDirectIPAccess, field.TypeBool)
	}
	if ru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.RemovedTenantIDs(); len(nodes) > 0 && !ru.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ru.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ru.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, ru.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rustdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	ru.mutation.done = true
	return n, nil
}

// RustdeskUpdateOne is the builder for updating a single Rustdesk entity.
type RustdeskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *RustdeskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetCustomRendezvousServer sets the "custom_rendezvous_server" field.
func (ruo *RustdeskUpdateOne) SetCustomRendezvousServer(s string) *RustdeskUpdateOne {
	ruo.mutation.SetCustomRendezvousServer(s)
	return ruo
}

// SetNillableCustomRendezvousServer sets the "custom_rendezvous_server" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableCustomRendezvousServer(s *string) *RustdeskUpdateOne {
	if s != nil {
		ruo.SetCustomRendezvousServer(*s)
	}
	return ruo
}

// ClearCustomRendezvousServer clears the value of the "custom_rendezvous_server" field.
func (ruo *RustdeskUpdateOne) ClearCustomRendezvousServer() *RustdeskUpdateOne {
	ruo.mutation.ClearCustomRendezvousServer()
	return ruo
}

// SetRelayServer sets the "relay_server" field.
func (ruo *RustdeskUpdateOne) SetRelayServer(s string) *RustdeskUpdateOne {
	ruo.mutation.SetRelayServer(s)
	return ruo
}

// SetNillableRelayServer sets the "relay_server" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableRelayServer(s *string) *RustdeskUpdateOne {
	if s != nil {
		ruo.SetRelayServer(*s)
	}
	return ruo
}

// ClearRelayServer clears the value of the "relay_server" field.
func (ruo *RustdeskUpdateOne) ClearRelayServer() *RustdeskUpdateOne {
	ruo.mutation.ClearRelayServer()
	return ruo
}

// SetAPIServer sets the "api_server" field.
func (ruo *RustdeskUpdateOne) SetAPIServer(s string) *RustdeskUpdateOne {
	ruo.mutation.SetAPIServer(s)
	return ruo
}

// SetNillableAPIServer sets the "api_server" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableAPIServer(s *string) *RustdeskUpdateOne {
	if s != nil {
		ruo.SetAPIServer(*s)
	}
	return ruo
}

// ClearAPIServer clears the value of the "api_server" field.
func (ruo *RustdeskUpdateOne) ClearAPIServer() *RustdeskUpdateOne {
	ruo.mutation.ClearAPIServer()
	return ruo
}

// SetKey sets the "key" field.
func (ruo *RustdeskUpdateOne) SetKey(s string) *RustdeskUpdateOne {
	ruo.mutation.SetKey(s)
	return ruo
}

// SetNillableKey sets the "key" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableKey(s *string) *RustdeskUpdateOne {
	if s != nil {
		ruo.SetKey(*s)
	}
	return ruo
}

// ClearKey clears the value of the "key" field.
func (ruo *RustdeskUpdateOne) ClearKey() *RustdeskUpdateOne {
	ruo.mutation.ClearKey()
	return ruo
}

// SetUsePermanentPassword sets the "use_permanent_password" field.
func (ruo *RustdeskUpdateOne) SetUsePermanentPassword(b bool) *RustdeskUpdateOne {
	ruo.mutation.SetUsePermanentPassword(b)
	return ruo
}

// SetNillableUsePermanentPassword sets the "use_permanent_password" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableUsePermanentPassword(b *bool) *RustdeskUpdateOne {
	if b != nil {
		ruo.SetUsePermanentPassword(*b)
	}
	return ruo
}

// ClearUsePermanentPassword clears the value of the "use_permanent_password" field.
func (ruo *RustdeskUpdateOne) ClearUsePermanentPassword() *RustdeskUpdateOne {
	ruo.mutation.ClearUsePermanentPassword()
	return ruo
}

// SetWhitelist sets the "whitelist" field.
func (ruo *RustdeskUpdateOne) SetWhitelist(s string) *RustdeskUpdateOne {
	ruo.mutation.SetWhitelist(s)
	return ruo
}

// SetNillableWhitelist sets the "whitelist" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableWhitelist(s *string) *RustdeskUpdateOne {
	if s != nil {
		ruo.SetWhitelist(*s)
	}
	return ruo
}

// ClearWhitelist clears the value of the "whitelist" field.
func (ruo *RustdeskUpdateOne) ClearWhitelist() *RustdeskUpdateOne {
	ruo.mutation.ClearWhitelist()
	return ruo
}

// SetDirectIPAccess sets the "direct_ip_access" field.
func (ruo *RustdeskUpdateOne) SetDirectIPAccess(b bool) *RustdeskUpdateOne {
	ruo.mutation.SetDirectIPAccess(b)
	return ruo
}

// SetNillableDirectIPAccess sets the "direct_ip_access" field if the given value is not nil.
func (ruo *RustdeskUpdateOne) SetNillableDirectIPAccess(b *bool) *RustdeskUpdateOne {
	if b != nil {
		ruo.SetDirectIPAccess(*b)
	}
	return ruo
}

// ClearDirectIPAccess clears the value of the "direct_ip_access" field.
func (ruo *RustdeskUpdateOne) ClearDirectIPAccess() *RustdeskUpdateOne {
	ruo.mutation.ClearDirectIPAccess()
	return ruo
}

// AddTenantIDs adds the "tenant" edge to the Tenant entity by IDs.
func (ruo *RustdeskUpdateOne) AddTenantIDs(ids ...int) *RustdeskUpdateOne {
	ruo.mutation.AddTenantIDs(ids...)
	return ruo
}

// AddTenant adds the "tenant" edges to the Tenant entity.
func (ruo *RustdeskUpdateOne) AddTenant(t ...*Tenant) *RustdeskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.AddTenantIDs(ids...)
}

// Mutation returns the RustdeskMutation object of the builder.
func (ruo *RustdeskUpdateOne) Mutation() *RustdeskMutation {
	return ruo.mutation
}

// ClearTenant clears all "tenant" edges to the Tenant entity.
func (ruo *RustdeskUpdateOne) ClearTenant() *RustdeskUpdateOne {
	ruo.mutation.ClearTenant()
	return ruo
}

// RemoveTenantIDs removes the "tenant" edge to Tenant entities by IDs.
func (ruo *RustdeskUpdateOne) RemoveTenantIDs(ids ...int) *RustdeskUpdateOne {
	ruo.mutation.RemoveTenantIDs(ids...)
	return ruo
}

// RemoveTenant removes "tenant" edges to Tenant entities.
func (ruo *RustdeskUpdateOne) RemoveTenant(t ...*Tenant) *RustdeskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return ruo.RemoveTenantIDs(ids...)
}

// Where appends a list predicates to the RustdeskUpdate builder.
func (ruo *RustdeskUpdateOne) Where(ps ...predicate.Rustdesk) *RustdeskUpdateOne {
	ruo.mutation.Where(ps...)
	return ruo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (ruo *RustdeskUpdateOne) Select(field string, fields ...string) *RustdeskUpdateOne {
	ruo.fields = append([]string{field}, fields...)
	return ruo
}

// Save executes the query and returns the updated Rustdesk entity.
func (ruo *RustdeskUpdateOne) Save(ctx context.Context) (*Rustdesk, error) {
	return withHooks(ctx, ruo.sqlSave, ruo.mutation, ruo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (ruo *RustdeskUpdateOne) SaveX(ctx context.Context) *Rustdesk {
	node, err := ruo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (ruo *RustdeskUpdateOne) Exec(ctx context.Context) error {
	_, err := ruo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (ruo *RustdeskUpdateOne) ExecX(ctx context.Context) {
	if err := ruo.Exec(ctx); err != nil {
		panic(err)
	}
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (ruo *RustdeskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *RustdeskUpdateOne {
	ruo.modifiers = append(ruo.modifiers, modifiers...)
	return ruo
}

func (ruo *RustdeskUpdateOne) sqlSave(ctx context.Context) (_node *Rustdesk, err error) {
	_spec := sqlgraph.NewUpdateSpec(rustdesk.Table, rustdesk.Columns, sqlgraph.NewFieldSpec(rustdesk.FieldID, field.TypeInt))
	id, ok := ruo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Rustdesk.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := ruo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, rustdesk.FieldID)
		for _, f := range fields {
			if !rustdesk.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != rustdesk.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := ruo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := ruo.mutation.CustomRendezvousServer(); ok {
		_spec.SetField(rustdesk.FieldCustomRendezvousServer, field.TypeString, value)
	}
	if ruo.mutation.CustomRendezvousServerCleared() {
		_spec.ClearField(rustdesk.FieldCustomRendezvousServer, field.TypeString)
	}
	if value, ok := ruo.mutation.RelayServer(); ok {
		_spec.SetField(rustdesk.FieldRelayServer, field.TypeString, value)
	}
	if ruo.mutation.RelayServerCleared() {
		_spec.ClearField(rustdesk.FieldRelayServer, field.TypeString)
	}
	if value, ok := ruo.mutation.APIServer(); ok {
		_spec.SetField(rustdesk.FieldAPIServer, field.TypeString, value)
	}
	if ruo.mutation.APIServerCleared() {
		_spec.ClearField(rustdesk.FieldAPIServer, field.TypeString)
	}
	if value, ok := ruo.mutation.Key(); ok {
		_spec.SetField(rustdesk.FieldKey, field.TypeString, value)
	}
	if ruo.mutation.KeyCleared() {
		_spec.ClearField(rustdesk.FieldKey, field.TypeString)
	}
	if value, ok := ruo.mutation.UsePermanentPassword(); ok {
		_spec.SetField(rustdesk.FieldUsePermanentPassword, field.TypeBool, value)
	}
	if ruo.mutation.UsePermanentPasswordCleared() {
		_spec.ClearField(rustdesk.FieldUsePermanentPassword, field.TypeBool)
	}
	if value, ok := ruo.mutation.Whitelist(); ok {
		_spec.SetField(rustdesk.FieldWhitelist, field.TypeString, value)
	}
	if ruo.mutation.WhitelistCleared() {
		_spec.ClearField(rustdesk.FieldWhitelist, field.TypeString)
	}
	if value, ok := ruo.mutation.DirectIPAccess(); ok {
		_spec.SetField(rustdesk.FieldDirectIPAccess, field.TypeBool, value)
	}
	if ruo.mutation.DirectIPAccessCleared() {
		_spec.ClearField(rustdesk.FieldDirectIPAccess, field.TypeBool)
	}
	if ruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.RemovedTenantIDs(); len(nodes) > 0 && !ruo.mutation.TenantCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := ruo.mutation.TenantIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   rustdesk.TenantTable,
			Columns: rustdesk.TenantPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tenant.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(ruo.modifiers...)
	_node = &Rustdesk{config: ruo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, ruo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{rustdesk.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	ruo.mutation.done = true
	return _node, nil
}
