// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/open-uem/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageID, v))
}

// PackageName applies equality check predicate on the "package_name" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageName, v))
}

// RegistryKey applies equality check predicate on the "registry_key" field. It's identical to RegistryKeyEQ.
func RegistryKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKey, v))
}

// RegistryKeyValueName applies equality check predicate on the "registry_key_value_name" field. It's identical to RegistryKeyValueNameEQ.
func RegistryKeyValueName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueData applies equality check predicate on the "registry_key_value_data" field. It's identical to RegistryKeyValueDataEQ.
func RegistryKeyValueData(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueData, v))
}

// RegistryHex applies equality check predicate on the "registry_hex" field. It's identical to RegistryHexEQ.
func RegistryHex(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryHex, v))
}

// RegistryForce applies equality check predicate on the "registry_force" field. It's identical to RegistryForceEQ.
func RegistryForce(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryForce, v))
}

// LocalUserUsername applies equality check predicate on the "local_user_username" field. It's identical to LocalUserUsernameEQ.
func LocalUserUsername(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUsername, v))
}

// LocalUserDescription applies equality check predicate on the "local_user_description" field. It's identical to LocalUserDescriptionEQ.
func LocalUserDescription(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDescription, v))
}

// LocalUserDisable applies equality check predicate on the "local_user_disable" field. It's identical to LocalUserDisableEQ.
func LocalUserDisable(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDisable, v))
}

// LocalUserFullname applies equality check predicate on the "local_user_fullname" field. It's identical to LocalUserFullnameEQ.
func LocalUserFullname(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserFullname, v))
}

// LocalUserPassword applies equality check predicate on the "local_user_password" field. It's identical to LocalUserPasswordEQ.
func LocalUserPassword(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordChangeNotAllowed applies equality check predicate on the "local_user_password_change_not_allowed" field. It's identical to LocalUserPasswordChangeNotAllowedEQ.
func LocalUserPasswordChangeNotAllowed(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeRequired applies equality check predicate on the "local_user_password_change_required" field. It's identical to LocalUserPasswordChangeRequiredEQ.
func LocalUserPasswordChangeRequired(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordNeverExpires applies equality check predicate on the "local_user_password_never_expires" field. It's identical to LocalUserPasswordNeverExpiresEQ.
func LocalUserPasswordNeverExpires(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalGroupName applies equality check predicate on the "local_group_name" field. It's identical to LocalGroupNameEQ.
func LocalGroupName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupName, v))
}

// LocalGroupDescription applies equality check predicate on the "local_group_description" field. It's identical to LocalGroupDescriptionEQ.
func LocalGroupDescription(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupDescription, v))
}

// LocalGroupMembers applies equality check predicate on the "local_group_members" field. It's identical to LocalGroupMembersEQ.
func LocalGroupMembers(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersToInclude applies equality check predicate on the "local_group_members_to_include" field. It's identical to LocalGroupMembersToIncludeEQ.
func LocalGroupMembersToInclude(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToExclude applies equality check predicate on the "local_group_members_to_exclude" field. It's identical to LocalGroupMembersToExcludeEQ.
func LocalGroupMembersToExclude(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToExclude, v))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWhen, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldType, vs...))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPackageID, v))
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPackageID, v))
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPackageID, v))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageID))
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPackageID, v))
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPackageID, v))
}

// PackageNameEQ applies the EQ predicate on the "package_name" field.
func PackageNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageName, v))
}

// PackageNameNEQ applies the NEQ predicate on the "package_name" field.
func PackageNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageName, v))
}

// PackageNameIn applies the In predicate on the "package_name" field.
func PackageNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPackageName, vs...))
}

// PackageNameNotIn applies the NotIn predicate on the "package_name" field.
func PackageNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPackageName, vs...))
}

// PackageNameGT applies the GT predicate on the "package_name" field.
func PackageNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPackageName, v))
}

// PackageNameGTE applies the GTE predicate on the "package_name" field.
func PackageNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPackageName, v))
}

// PackageNameLT applies the LT predicate on the "package_name" field.
func PackageNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPackageName, v))
}

// PackageNameLTE applies the LTE predicate on the "package_name" field.
func PackageNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPackageName, v))
}

// PackageNameContains applies the Contains predicate on the "package_name" field.
func PackageNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPackageName, v))
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "package_name" field.
func PackageNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPackageName, v))
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "package_name" field.
func PackageNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPackageName, v))
}

// PackageNameIsNil applies the IsNil predicate on the "package_name" field.
func PackageNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageName))
}

// PackageNameNotNil applies the NotNil predicate on the "package_name" field.
func PackageNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageName))
}

// PackageNameEqualFold applies the EqualFold predicate on the "package_name" field.
func PackageNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPackageName, v))
}

// PackageNameContainsFold applies the ContainsFold predicate on the "package_name" field.
func PackageNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPackageName, v))
}

// RegistryKeyEQ applies the EQ predicate on the "registry_key" field.
func RegistryKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKey, v))
}

// RegistryKeyNEQ applies the NEQ predicate on the "registry_key" field.
func RegistryKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKey, v))
}

// RegistryKeyIn applies the In predicate on the "registry_key" field.
func RegistryKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKey, vs...))
}

// RegistryKeyNotIn applies the NotIn predicate on the "registry_key" field.
func RegistryKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKey, vs...))
}

// RegistryKeyGT applies the GT predicate on the "registry_key" field.
func RegistryKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKey, v))
}

// RegistryKeyGTE applies the GTE predicate on the "registry_key" field.
func RegistryKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKey, v))
}

// RegistryKeyLT applies the LT predicate on the "registry_key" field.
func RegistryKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKey, v))
}

// RegistryKeyLTE applies the LTE predicate on the "registry_key" field.
func RegistryKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKey, v))
}

// RegistryKeyContains applies the Contains predicate on the "registry_key" field.
func RegistryKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKey, v))
}

// RegistryKeyHasPrefix applies the HasPrefix predicate on the "registry_key" field.
func RegistryKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKey, v))
}

// RegistryKeyHasSuffix applies the HasSuffix predicate on the "registry_key" field.
func RegistryKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKey, v))
}

// RegistryKeyIsNil applies the IsNil predicate on the "registry_key" field.
func RegistryKeyIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKey))
}

// RegistryKeyNotNil applies the NotNil predicate on the "registry_key" field.
func RegistryKeyNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKey))
}

// RegistryKeyEqualFold applies the EqualFold predicate on the "registry_key" field.
func RegistryKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKey, v))
}

// RegistryKeyContainsFold applies the ContainsFold predicate on the "registry_key" field.
func RegistryKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKey, v))
}

// RegistryKeyValueNameEQ applies the EQ predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameNEQ applies the NEQ predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameIn applies the In predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueName, vs...))
}

// RegistryKeyValueNameNotIn applies the NotIn predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueName, vs...))
}

// RegistryKeyValueNameGT applies the GT predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameGTE applies the GTE predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameLT applies the LT predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameLTE applies the LTE predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameContains applies the Contains predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameHasPrefix applies the HasPrefix predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameHasSuffix applies the HasSuffix predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameIsNil applies the IsNil predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueName))
}

// RegistryKeyValueNameNotNil applies the NotNil predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueName))
}

// RegistryKeyValueNameEqualFold applies the EqualFold predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameContainsFold applies the ContainsFold predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueTypeEQ applies the EQ predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeEQ(v RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueType, v))
}

// RegistryKeyValueTypeNEQ applies the NEQ predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNEQ(v RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueType, v))
}

// RegistryKeyValueTypeIn applies the In predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeIn(vs ...RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueType, vs...))
}

// RegistryKeyValueTypeNotIn applies the NotIn predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNotIn(vs ...RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueType, vs...))
}

// RegistryKeyValueTypeIsNil applies the IsNil predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueType))
}

// RegistryKeyValueTypeNotNil applies the NotNil predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueType))
}

// RegistryKeyValueDataEQ applies the EQ predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataNEQ applies the NEQ predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataIn applies the In predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueData, vs...))
}

// RegistryKeyValueDataNotIn applies the NotIn predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueData, vs...))
}

// RegistryKeyValueDataGT applies the GT predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataGTE applies the GTE predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataLT applies the LT predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataLTE applies the LTE predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataContains applies the Contains predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataHasPrefix applies the HasPrefix predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataHasSuffix applies the HasSuffix predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataIsNil applies the IsNil predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueData))
}

// RegistryKeyValueDataNotNil applies the NotNil predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueData))
}

// RegistryKeyValueDataEqualFold applies the EqualFold predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataContainsFold applies the ContainsFold predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKeyValueData, v))
}

// RegistryHexEQ applies the EQ predicate on the "registry_hex" field.
func RegistryHexEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryHex, v))
}

// RegistryHexNEQ applies the NEQ predicate on the "registry_hex" field.
func RegistryHexNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryHex, v))
}

// RegistryHexIsNil applies the IsNil predicate on the "registry_hex" field.
func RegistryHexIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryHex))
}

// RegistryHexNotNil applies the NotNil predicate on the "registry_hex" field.
func RegistryHexNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryHex))
}

// RegistryForceEQ applies the EQ predicate on the "registry_force" field.
func RegistryForceEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryForce, v))
}

// RegistryForceNEQ applies the NEQ predicate on the "registry_force" field.
func RegistryForceNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryForce, v))
}

// RegistryForceIsNil applies the IsNil predicate on the "registry_force" field.
func RegistryForceIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryForce))
}

// RegistryForceNotNil applies the NotNil predicate on the "registry_force" field.
func RegistryForceNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryForce))
}

// LocalUserUsernameEQ applies the EQ predicate on the "local_user_username" field.
func LocalUserUsernameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUsername, v))
}

// LocalUserUsernameNEQ applies the NEQ predicate on the "local_user_username" field.
func LocalUserUsernameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserUsername, v))
}

// LocalUserUsernameIn applies the In predicate on the "local_user_username" field.
func LocalUserUsernameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserUsername, vs...))
}

// LocalUserUsernameNotIn applies the NotIn predicate on the "local_user_username" field.
func LocalUserUsernameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserUsername, vs...))
}

// LocalUserUsernameGT applies the GT predicate on the "local_user_username" field.
func LocalUserUsernameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserUsername, v))
}

// LocalUserUsernameGTE applies the GTE predicate on the "local_user_username" field.
func LocalUserUsernameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserUsername, v))
}

// LocalUserUsernameLT applies the LT predicate on the "local_user_username" field.
func LocalUserUsernameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserUsername, v))
}

// LocalUserUsernameLTE applies the LTE predicate on the "local_user_username" field.
func LocalUserUsernameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserUsername, v))
}

// LocalUserUsernameContains applies the Contains predicate on the "local_user_username" field.
func LocalUserUsernameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserUsername, v))
}

// LocalUserUsernameHasPrefix applies the HasPrefix predicate on the "local_user_username" field.
func LocalUserUsernameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserUsername, v))
}

// LocalUserUsernameHasSuffix applies the HasSuffix predicate on the "local_user_username" field.
func LocalUserUsernameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserUsername, v))
}

// LocalUserUsernameIsNil applies the IsNil predicate on the "local_user_username" field.
func LocalUserUsernameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserUsername))
}

// LocalUserUsernameNotNil applies the NotNil predicate on the "local_user_username" field.
func LocalUserUsernameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserUsername))
}

// LocalUserUsernameEqualFold applies the EqualFold predicate on the "local_user_username" field.
func LocalUserUsernameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserUsername, v))
}

// LocalUserUsernameContainsFold applies the ContainsFold predicate on the "local_user_username" field.
func LocalUserUsernameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserUsername, v))
}

// LocalUserDescriptionEQ applies the EQ predicate on the "local_user_description" field.
func LocalUserDescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDescription, v))
}

// LocalUserDescriptionNEQ applies the NEQ predicate on the "local_user_description" field.
func LocalUserDescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserDescription, v))
}

// LocalUserDescriptionIn applies the In predicate on the "local_user_description" field.
func LocalUserDescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserDescription, vs...))
}

// LocalUserDescriptionNotIn applies the NotIn predicate on the "local_user_description" field.
func LocalUserDescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserDescription, vs...))
}

// LocalUserDescriptionGT applies the GT predicate on the "local_user_description" field.
func LocalUserDescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserDescription, v))
}

// LocalUserDescriptionGTE applies the GTE predicate on the "local_user_description" field.
func LocalUserDescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserDescription, v))
}

// LocalUserDescriptionLT applies the LT predicate on the "local_user_description" field.
func LocalUserDescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserDescription, v))
}

// LocalUserDescriptionLTE applies the LTE predicate on the "local_user_description" field.
func LocalUserDescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserDescription, v))
}

// LocalUserDescriptionContains applies the Contains predicate on the "local_user_description" field.
func LocalUserDescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserDescription, v))
}

// LocalUserDescriptionHasPrefix applies the HasPrefix predicate on the "local_user_description" field.
func LocalUserDescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserDescription, v))
}

// LocalUserDescriptionHasSuffix applies the HasSuffix predicate on the "local_user_description" field.
func LocalUserDescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserDescription, v))
}

// LocalUserDescriptionIsNil applies the IsNil predicate on the "local_user_description" field.
func LocalUserDescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserDescription))
}

// LocalUserDescriptionNotNil applies the NotNil predicate on the "local_user_description" field.
func LocalUserDescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserDescription))
}

// LocalUserDescriptionEqualFold applies the EqualFold predicate on the "local_user_description" field.
func LocalUserDescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserDescription, v))
}

// LocalUserDescriptionContainsFold applies the ContainsFold predicate on the "local_user_description" field.
func LocalUserDescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserDescription, v))
}

// LocalUserDisableEQ applies the EQ predicate on the "local_user_disable" field.
func LocalUserDisableEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDisable, v))
}

// LocalUserDisableNEQ applies the NEQ predicate on the "local_user_disable" field.
func LocalUserDisableNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserDisable, v))
}

// LocalUserDisableIsNil applies the IsNil predicate on the "local_user_disable" field.
func LocalUserDisableIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserDisable))
}

// LocalUserDisableNotNil applies the NotNil predicate on the "local_user_disable" field.
func LocalUserDisableNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserDisable))
}

// LocalUserFullnameEQ applies the EQ predicate on the "local_user_fullname" field.
func LocalUserFullnameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserFullname, v))
}

// LocalUserFullnameNEQ applies the NEQ predicate on the "local_user_fullname" field.
func LocalUserFullnameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserFullname, v))
}

// LocalUserFullnameIn applies the In predicate on the "local_user_fullname" field.
func LocalUserFullnameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserFullname, vs...))
}

// LocalUserFullnameNotIn applies the NotIn predicate on the "local_user_fullname" field.
func LocalUserFullnameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserFullname, vs...))
}

// LocalUserFullnameGT applies the GT predicate on the "local_user_fullname" field.
func LocalUserFullnameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserFullname, v))
}

// LocalUserFullnameGTE applies the GTE predicate on the "local_user_fullname" field.
func LocalUserFullnameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserFullname, v))
}

// LocalUserFullnameLT applies the LT predicate on the "local_user_fullname" field.
func LocalUserFullnameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserFullname, v))
}

// LocalUserFullnameLTE applies the LTE predicate on the "local_user_fullname" field.
func LocalUserFullnameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserFullname, v))
}

// LocalUserFullnameContains applies the Contains predicate on the "local_user_fullname" field.
func LocalUserFullnameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserFullname, v))
}

// LocalUserFullnameHasPrefix applies the HasPrefix predicate on the "local_user_fullname" field.
func LocalUserFullnameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserFullname, v))
}

// LocalUserFullnameHasSuffix applies the HasSuffix predicate on the "local_user_fullname" field.
func LocalUserFullnameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserFullname, v))
}

// LocalUserFullnameIsNil applies the IsNil predicate on the "local_user_fullname" field.
func LocalUserFullnameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserFullname))
}

// LocalUserFullnameNotNil applies the NotNil predicate on the "local_user_fullname" field.
func LocalUserFullnameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserFullname))
}

// LocalUserFullnameEqualFold applies the EqualFold predicate on the "local_user_fullname" field.
func LocalUserFullnameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserFullname, v))
}

// LocalUserFullnameContainsFold applies the ContainsFold predicate on the "local_user_fullname" field.
func LocalUserFullnameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserFullname, v))
}

// LocalUserPasswordEQ applies the EQ predicate on the "local_user_password" field.
func LocalUserPasswordEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordNEQ applies the NEQ predicate on the "local_user_password" field.
func LocalUserPasswordNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordIn applies the In predicate on the "local_user_password" field.
func LocalUserPasswordIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPassword, vs...))
}

// LocalUserPasswordNotIn applies the NotIn predicate on the "local_user_password" field.
func LocalUserPasswordNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPassword, vs...))
}

// LocalUserPasswordGT applies the GT predicate on the "local_user_password" field.
func LocalUserPasswordGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPassword, v))
}

// LocalUserPasswordGTE applies the GTE predicate on the "local_user_password" field.
func LocalUserPasswordGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPassword, v))
}

// LocalUserPasswordLT applies the LT predicate on the "local_user_password" field.
func LocalUserPasswordLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPassword, v))
}

// LocalUserPasswordLTE applies the LTE predicate on the "local_user_password" field.
func LocalUserPasswordLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPassword, v))
}

// LocalUserPasswordContains applies the Contains predicate on the "local_user_password" field.
func LocalUserPasswordContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPassword, v))
}

// LocalUserPasswordHasPrefix applies the HasPrefix predicate on the "local_user_password" field.
func LocalUserPasswordHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPassword, v))
}

// LocalUserPasswordHasSuffix applies the HasSuffix predicate on the "local_user_password" field.
func LocalUserPasswordHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPassword, v))
}

// LocalUserPasswordIsNil applies the IsNil predicate on the "local_user_password" field.
func LocalUserPasswordIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPassword))
}

// LocalUserPasswordNotNil applies the NotNil predicate on the "local_user_password" field.
func LocalUserPasswordNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPassword))
}

// LocalUserPasswordEqualFold applies the EqualFold predicate on the "local_user_password" field.
func LocalUserPasswordEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPassword, v))
}

// LocalUserPasswordContainsFold applies the ContainsFold predicate on the "local_user_password" field.
func LocalUserPasswordContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPassword, v))
}

// LocalUserPasswordChangeNotAllowedEQ applies the EQ predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeNotAllowedNEQ applies the NEQ predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeNotAllowedIsNil applies the IsNil predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordChangeNotAllowed))
}

// LocalUserPasswordChangeNotAllowedNotNil applies the NotNil predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordChangeNotAllowed))
}

// LocalUserPasswordChangeRequiredEQ applies the EQ predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordChangeRequiredNEQ applies the NEQ predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordChangeRequiredIsNil applies the IsNil predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordChangeRequired))
}

// LocalUserPasswordChangeRequiredNotNil applies the NotNil predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordChangeRequired))
}

// LocalUserPasswordNeverExpiresEQ applies the EQ predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalUserPasswordNeverExpiresNEQ applies the NEQ predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalUserPasswordNeverExpiresIsNil applies the IsNil predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordNeverExpires))
}

// LocalUserPasswordNeverExpiresNotNil applies the NotNil predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordNeverExpires))
}

// LocalGroupNameEQ applies the EQ predicate on the "local_group_name" field.
func LocalGroupNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupName, v))
}

// LocalGroupNameNEQ applies the NEQ predicate on the "local_group_name" field.
func LocalGroupNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupName, v))
}

// LocalGroupNameIn applies the In predicate on the "local_group_name" field.
func LocalGroupNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupName, vs...))
}

// LocalGroupNameNotIn applies the NotIn predicate on the "local_group_name" field.
func LocalGroupNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupName, vs...))
}

// LocalGroupNameGT applies the GT predicate on the "local_group_name" field.
func LocalGroupNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupName, v))
}

// LocalGroupNameGTE applies the GTE predicate on the "local_group_name" field.
func LocalGroupNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupName, v))
}

// LocalGroupNameLT applies the LT predicate on the "local_group_name" field.
func LocalGroupNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupName, v))
}

// LocalGroupNameLTE applies the LTE predicate on the "local_group_name" field.
func LocalGroupNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupName, v))
}

// LocalGroupNameContains applies the Contains predicate on the "local_group_name" field.
func LocalGroupNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupName, v))
}

// LocalGroupNameHasPrefix applies the HasPrefix predicate on the "local_group_name" field.
func LocalGroupNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupName, v))
}

// LocalGroupNameHasSuffix applies the HasSuffix predicate on the "local_group_name" field.
func LocalGroupNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupName, v))
}

// LocalGroupNameIsNil applies the IsNil predicate on the "local_group_name" field.
func LocalGroupNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupName))
}

// LocalGroupNameNotNil applies the NotNil predicate on the "local_group_name" field.
func LocalGroupNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupName))
}

// LocalGroupNameEqualFold applies the EqualFold predicate on the "local_group_name" field.
func LocalGroupNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupName, v))
}

// LocalGroupNameContainsFold applies the ContainsFold predicate on the "local_group_name" field.
func LocalGroupNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupName, v))
}

// LocalGroupDescriptionEQ applies the EQ predicate on the "local_group_description" field.
func LocalGroupDescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionNEQ applies the NEQ predicate on the "local_group_description" field.
func LocalGroupDescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionIn applies the In predicate on the "local_group_description" field.
func LocalGroupDescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupDescription, vs...))
}

// LocalGroupDescriptionNotIn applies the NotIn predicate on the "local_group_description" field.
func LocalGroupDescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupDescription, vs...))
}

// LocalGroupDescriptionGT applies the GT predicate on the "local_group_description" field.
func LocalGroupDescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionGTE applies the GTE predicate on the "local_group_description" field.
func LocalGroupDescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionLT applies the LT predicate on the "local_group_description" field.
func LocalGroupDescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionLTE applies the LTE predicate on the "local_group_description" field.
func LocalGroupDescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionContains applies the Contains predicate on the "local_group_description" field.
func LocalGroupDescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionHasPrefix applies the HasPrefix predicate on the "local_group_description" field.
func LocalGroupDescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionHasSuffix applies the HasSuffix predicate on the "local_group_description" field.
func LocalGroupDescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionIsNil applies the IsNil predicate on the "local_group_description" field.
func LocalGroupDescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupDescription))
}

// LocalGroupDescriptionNotNil applies the NotNil predicate on the "local_group_description" field.
func LocalGroupDescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupDescription))
}

// LocalGroupDescriptionEqualFold applies the EqualFold predicate on the "local_group_description" field.
func LocalGroupDescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionContainsFold applies the ContainsFold predicate on the "local_group_description" field.
func LocalGroupDescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupDescription, v))
}

// LocalGroupMembersEQ applies the EQ predicate on the "local_group_members" field.
func LocalGroupMembersEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersNEQ applies the NEQ predicate on the "local_group_members" field.
func LocalGroupMembersNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersIn applies the In predicate on the "local_group_members" field.
func LocalGroupMembersIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembers, vs...))
}

// LocalGroupMembersNotIn applies the NotIn predicate on the "local_group_members" field.
func LocalGroupMembersNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembers, vs...))
}

// LocalGroupMembersGT applies the GT predicate on the "local_group_members" field.
func LocalGroupMembersGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembers, v))
}

// LocalGroupMembersGTE applies the GTE predicate on the "local_group_members" field.
func LocalGroupMembersGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembers, v))
}

// LocalGroupMembersLT applies the LT predicate on the "local_group_members" field.
func LocalGroupMembersLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembers, v))
}

// LocalGroupMembersLTE applies the LTE predicate on the "local_group_members" field.
func LocalGroupMembersLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembers, v))
}

// LocalGroupMembersContains applies the Contains predicate on the "local_group_members" field.
func LocalGroupMembersContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembers, v))
}

// LocalGroupMembersHasPrefix applies the HasPrefix predicate on the "local_group_members" field.
func LocalGroupMembersHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembers, v))
}

// LocalGroupMembersHasSuffix applies the HasSuffix predicate on the "local_group_members" field.
func LocalGroupMembersHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembers, v))
}

// LocalGroupMembersIsNil applies the IsNil predicate on the "local_group_members" field.
func LocalGroupMembersIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembers))
}

// LocalGroupMembersNotNil applies the NotNil predicate on the "local_group_members" field.
func LocalGroupMembersNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembers))
}

// LocalGroupMembersEqualFold applies the EqualFold predicate on the "local_group_members" field.
func LocalGroupMembersEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembers, v))
}

// LocalGroupMembersContainsFold applies the ContainsFold predicate on the "local_group_members" field.
func LocalGroupMembersContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembers, v))
}

// LocalGroupMembersToIncludeEQ applies the EQ predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeNEQ applies the NEQ predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeIn applies the In predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembersToInclude, vs...))
}

// LocalGroupMembersToIncludeNotIn applies the NotIn predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembersToInclude, vs...))
}

// LocalGroupMembersToIncludeGT applies the GT predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeGTE applies the GTE predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeLT applies the LT predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeLTE applies the LTE predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeContains applies the Contains predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeHasPrefix applies the HasPrefix predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeHasSuffix applies the HasSuffix predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeIsNil applies the IsNil predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembersToInclude))
}

// LocalGroupMembersToIncludeNotNil applies the NotNil predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembersToInclude))
}

// LocalGroupMembersToIncludeEqualFold applies the EqualFold predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeContainsFold applies the ContainsFold predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToExcludeEQ applies the EQ predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeNEQ applies the NEQ predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeIn applies the In predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembersToExclude, vs...))
}

// LocalGroupMembersToExcludeNotIn applies the NotIn predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembersToExclude, vs...))
}

// LocalGroupMembersToExcludeGT applies the GT predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeGTE applies the GTE predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeLT applies the LT predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeLTE applies the LTE predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeContains applies the Contains predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeHasPrefix applies the HasPrefix predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeHasSuffix applies the HasSuffix predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeIsNil applies the IsNil predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembersToExclude))
}

// LocalGroupMembersToExcludeNotNil applies the NotNil predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembersToExclude))
}

// LocalGroupMembersToExcludeEqualFold applies the EqualFold predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeContainsFold applies the ContainsFold predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembersToExclude, v))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldWhen, v))
}

// WhenIsNil applies the IsNil predicate on the "when" field.
func WhenIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldWhen))
}

// WhenNotNil applies the NotNil predicate on the "when" field.
func WhenNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldWhen))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
