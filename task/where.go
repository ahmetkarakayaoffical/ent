// Code generated by ent, DO NOT EDIT.

package task

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/ahmetkarakayaoffical/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// PackageID applies equality check predicate on the "package_id" field. It's identical to PackageIDEQ.
func PackageID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageID, v))
}

// PackageName applies equality check predicate on the "package_name" field. It's identical to PackageNameEQ.
func PackageName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageName, v))
}

// PackageLatest applies equality check predicate on the "package_latest" field. It's identical to PackageLatestEQ.
func PackageLatest(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageLatest, v))
}

// RegistryKey applies equality check predicate on the "registry_key" field. It's identical to RegistryKeyEQ.
func RegistryKey(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKey, v))
}

// RegistryKeyValueName applies equality check predicate on the "registry_key_value_name" field. It's identical to RegistryKeyValueNameEQ.
func RegistryKeyValueName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueData applies equality check predicate on the "registry_key_value_data" field. It's identical to RegistryKeyValueDataEQ.
func RegistryKeyValueData(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueData, v))
}

// RegistryHex applies equality check predicate on the "registry_hex" field. It's identical to RegistryHexEQ.
func RegistryHex(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryHex, v))
}

// RegistryForce applies equality check predicate on the "registry_force" field. It's identical to RegistryForceEQ.
func RegistryForce(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryForce, v))
}

// LocalUserUsername applies equality check predicate on the "local_user_username" field. It's identical to LocalUserUsernameEQ.
func LocalUserUsername(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUsername, v))
}

// LocalUserDescription applies equality check predicate on the "local_user_description" field. It's identical to LocalUserDescriptionEQ.
func LocalUserDescription(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDescription, v))
}

// LocalUserDisable applies equality check predicate on the "local_user_disable" field. It's identical to LocalUserDisableEQ.
func LocalUserDisable(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDisable, v))
}

// LocalUserFullname applies equality check predicate on the "local_user_fullname" field. It's identical to LocalUserFullnameEQ.
func LocalUserFullname(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserFullname, v))
}

// LocalUserPassword applies equality check predicate on the "local_user_password" field. It's identical to LocalUserPasswordEQ.
func LocalUserPassword(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordChangeNotAllowed applies equality check predicate on the "local_user_password_change_not_allowed" field. It's identical to LocalUserPasswordChangeNotAllowedEQ.
func LocalUserPasswordChangeNotAllowed(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeRequired applies equality check predicate on the "local_user_password_change_required" field. It's identical to LocalUserPasswordChangeRequiredEQ.
func LocalUserPasswordChangeRequired(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordNeverExpires applies equality check predicate on the "local_user_password_never_expires" field. It's identical to LocalUserPasswordNeverExpiresEQ.
func LocalUserPasswordNeverExpires(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalUserAppend applies equality check predicate on the "local_user_append" field. It's identical to LocalUserAppendEQ.
func LocalUserAppend(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserAppend, v))
}

// LocalUserCreateHome applies equality check predicate on the "local_user_create_home" field. It's identical to LocalUserCreateHomeEQ.
func LocalUserCreateHome(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserCreateHome, v))
}

// LocalUserExpires applies equality check predicate on the "local_user_expires" field. It's identical to LocalUserExpiresEQ.
func LocalUserExpires(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserExpires, v))
}

// LocalUserForce applies equality check predicate on the "local_user_force" field. It's identical to LocalUserForceEQ.
func LocalUserForce(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserForce, v))
}

// LocalUserGenerateSSHKey applies equality check predicate on the "local_user_generate_ssh_key" field. It's identical to LocalUserGenerateSSHKeyEQ.
func LocalUserGenerateSSHKey(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGenerateSSHKey, v))
}

// LocalUserGroup applies equality check predicate on the "local_user_group" field. It's identical to LocalUserGroupEQ.
func LocalUserGroup(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGroup, v))
}

// LocalUserGroups applies equality check predicate on the "local_user_groups" field. It's identical to LocalUserGroupsEQ.
func LocalUserGroups(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGroups, v))
}

// LocalUserHome applies equality check predicate on the "local_user_home" field. It's identical to LocalUserHomeEQ.
func LocalUserHome(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserHome, v))
}

// LocalUserMoveHome applies equality check predicate on the "local_user_move_home" field. It's identical to LocalUserMoveHomeEQ.
func LocalUserMoveHome(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserMoveHome, v))
}

// LocalUserNonunique applies equality check predicate on the "local_user_nonunique" field. It's identical to LocalUserNonuniqueEQ.
func LocalUserNonunique(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserNonunique, v))
}

// LocalUserPasswordExpireAccountDisable applies equality check predicate on the "local_user_password_expire_account_disable" field. It's identical to LocalUserPasswordExpireAccountDisableEQ.
func LocalUserPasswordExpireAccountDisable(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireMax applies equality check predicate on the "local_user_password_expire_max" field. It's identical to LocalUserPasswordExpireMaxEQ.
func LocalUserPasswordExpireMax(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMin applies equality check predicate on the "local_user_password_expire_min" field. It's identical to LocalUserPasswordExpireMinEQ.
func LocalUserPasswordExpireMin(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireWarn applies equality check predicate on the "local_user_password_expire_warn" field. It's identical to LocalUserPasswordExpireWarnEQ.
func LocalUserPasswordExpireWarn(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordLock applies equality check predicate on the "local_user_password_lock" field. It's identical to LocalUserPasswordLockEQ.
func LocalUserPasswordLock(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordLock, v))
}

// LocalUserSeuser applies equality check predicate on the "local_user_seuser" field. It's identical to LocalUserSeuserEQ.
func LocalUserSeuser(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSeuser, v))
}

// LocalUserShell applies equality check predicate on the "local_user_shell" field. It's identical to LocalUserShellEQ.
func LocalUserShell(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserShell, v))
}

// LocalUserSkeleton applies equality check predicate on the "local_user_skeleton" field. It's identical to LocalUserSkeletonEQ.
func LocalUserSkeleton(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSkeleton, v))
}

// LocalUserSystem applies equality check predicate on the "local_user_system" field. It's identical to LocalUserSystemEQ.
func LocalUserSystem(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSystem, v))
}

// LocalUserID applies equality check predicate on the "local_user_id" field. It's identical to LocalUserIDEQ.
func LocalUserID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserID, v))
}

// LocalUserIDMax applies equality check predicate on the "local_user_id_max" field. It's identical to LocalUserIDMaxEQ.
func LocalUserIDMax(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserIDMax, v))
}

// LocalUserIDMin applies equality check predicate on the "local_user_id_min" field. It's identical to LocalUserIDMinEQ.
func LocalUserIDMin(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserIDMin, v))
}

// LocalUserSSHKeyBits applies equality check predicate on the "local_user_ssh_key_bits" field. It's identical to LocalUserSSHKeyBitsEQ.
func LocalUserSSHKeyBits(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyComment applies equality check predicate on the "local_user_ssh_key_comment" field. It's identical to LocalUserSSHKeyCommentEQ.
func LocalUserSSHKeyComment(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyFile applies equality check predicate on the "local_user_ssh_key_file" field. It's identical to LocalUserSSHKeyFileEQ.
func LocalUserSSHKeyFile(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyPassphrase applies equality check predicate on the "local_user_ssh_key_passphrase" field. It's identical to LocalUserSSHKeyPassphraseEQ.
func LocalUserSSHKeyPassphrase(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyType applies equality check predicate on the "local_user_ssh_key_type" field. It's identical to LocalUserSSHKeyTypeEQ.
func LocalUserSSHKeyType(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyType, v))
}

// LocalUserUmask applies equality check predicate on the "local_user_umask" field. It's identical to LocalUserUmaskEQ.
func LocalUserUmask(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUmask, v))
}

// LocalGroupID applies equality check predicate on the "local_group_id" field. It's identical to LocalGroupIDEQ.
func LocalGroupID(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupID, v))
}

// LocalGroupName applies equality check predicate on the "local_group_name" field. It's identical to LocalGroupNameEQ.
func LocalGroupName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupName, v))
}

// LocalGroupDescription applies equality check predicate on the "local_group_description" field. It's identical to LocalGroupDescriptionEQ.
func LocalGroupDescription(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupDescription, v))
}

// LocalGroupSystem applies equality check predicate on the "local_group_system" field. It's identical to LocalGroupSystemEQ.
func LocalGroupSystem(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupSystem, v))
}

// LocalGroupForce applies equality check predicate on the "local_group_force" field. It's identical to LocalGroupForceEQ.
func LocalGroupForce(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupForce, v))
}

// LocalGroupMembers applies equality check predicate on the "local_group_members" field. It's identical to LocalGroupMembersEQ.
func LocalGroupMembers(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersToInclude applies equality check predicate on the "local_group_members_to_include" field. It's identical to LocalGroupMembersToIncludeEQ.
func LocalGroupMembersToInclude(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToExclude applies equality check predicate on the "local_group_members_to_exclude" field. It's identical to LocalGroupMembersToExcludeEQ.
func LocalGroupMembersToExclude(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToExclude, v))
}

// MsiProductid applies equality check predicate on the "msi_productid" field. It's identical to MsiProductidEQ.
func MsiProductid(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiProductid, v))
}

// MsiPath applies equality check predicate on the "msi_path" field. It's identical to MsiPathEQ.
func MsiPath(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiPath, v))
}

// MsiArguments applies equality check predicate on the "msi_arguments" field. It's identical to MsiArgumentsEQ.
func MsiArguments(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiArguments, v))
}

// MsiFileHash applies equality check predicate on the "msi_file_hash" field. It's identical to MsiFileHashEQ.
func MsiFileHash(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiFileHash, v))
}

// MsiLogPath applies equality check predicate on the "msi_log_path" field. It's identical to MsiLogPathEQ.
func MsiLogPath(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiLogPath, v))
}

// Script applies equality check predicate on the "script" field. It's identical to ScriptEQ.
func Script(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScript, v))
}

// ScriptExecutable applies equality check predicate on the "script_executable" field. It's identical to ScriptExecutableEQ.
func ScriptExecutable(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScriptExecutable, v))
}

// ScriptCreates applies equality check predicate on the "script_creates" field. It's identical to ScriptCreatesEQ.
func ScriptCreates(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScriptCreates, v))
}

// When applies equality check predicate on the "when" field. It's identical to WhenEQ.
func When(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWhen, v))
}

// BrewUpdate applies equality check predicate on the "brew_update" field. It's identical to BrewUpdateEQ.
func BrewUpdate(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpdate, v))
}

// BrewUpgradeAll applies equality check predicate on the "brew_upgrade_all" field. It's identical to BrewUpgradeAllEQ.
func BrewUpgradeAll(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpgradeAll, v))
}

// BrewUpgradeOptions applies equality check predicate on the "brew_upgrade_options" field. It's identical to BrewUpgradeOptionsEQ.
func BrewUpgradeOptions(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpgradeOptions, v))
}

// BrewInstallOptions applies equality check predicate on the "brew_install_options" field. It's identical to BrewInstallOptionsEQ.
func BrewInstallOptions(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewInstallOptions, v))
}

// BrewGreedy applies equality check predicate on the "brew_greedy" field. It's identical to BrewGreedyEQ.
func BrewGreedy(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewGreedy, v))
}

// PackageVersion applies equality check predicate on the "package_version" field. It's identical to PackageVersionEQ.
func PackageVersion(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageVersion, v))
}

// AptAllowDowngrade applies equality check predicate on the "apt_allow_downgrade" field. It's identical to AptAllowDowngradeEQ.
func AptAllowDowngrade(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptAllowDowngrade, v))
}

// AptDeb applies equality check predicate on the "apt_deb" field. It's identical to AptDebEQ.
func AptDeb(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptDeb, v))
}

// AptDpkgOptions applies equality check predicate on the "apt_dpkg_options" field. It's identical to AptDpkgOptionsEQ.
func AptDpkgOptions(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptDpkgOptions, v))
}

// AptFailOnAutoremove applies equality check predicate on the "apt_fail_on_autoremove" field. It's identical to AptFailOnAutoremoveEQ.
func AptFailOnAutoremove(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptFailOnAutoremove, v))
}

// AptForce applies equality check predicate on the "apt_force" field. It's identical to AptForceEQ.
func AptForce(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptForce, v))
}

// AptInstallRecommends applies equality check predicate on the "apt_install_recommends" field. It's identical to AptInstallRecommendsEQ.
func AptInstallRecommends(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptInstallRecommends, v))
}

// AptName applies equality check predicate on the "apt_name" field. It's identical to AptNameEQ.
func AptName(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptName, v))
}

// AptOnlyUpgrade applies equality check predicate on the "apt_only_upgrade" field. It's identical to AptOnlyUpgradeEQ.
func AptOnlyUpgrade(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptOnlyUpgrade, v))
}

// AptPurge applies equality check predicate on the "apt_purge" field. It's identical to AptPurgeEQ.
func AptPurge(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptPurge, v))
}

// AptUpdateCache applies equality check predicate on the "apt_update_cache" field. It's identical to AptUpdateCacheEQ.
func AptUpdateCache(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptUpdateCache, v))
}

// Version applies equality check predicate on the "version" field. It's identical to VersionEQ.
func Version(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldVersion, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldName, v))
}

// TypeEQ applies the EQ predicate on the "type" field.
func TypeEQ(v Type) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldType, v))
}

// TypeNEQ applies the NEQ predicate on the "type" field.
func TypeNEQ(v Type) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldType, v))
}

// TypeIn applies the In predicate on the "type" field.
func TypeIn(vs ...Type) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldType, vs...))
}

// TypeNotIn applies the NotIn predicate on the "type" field.
func TypeNotIn(vs ...Type) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldType, vs...))
}

// PackageIDEQ applies the EQ predicate on the "package_id" field.
func PackageIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageID, v))
}

// PackageIDNEQ applies the NEQ predicate on the "package_id" field.
func PackageIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageID, v))
}

// PackageIDIn applies the In predicate on the "package_id" field.
func PackageIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPackageID, vs...))
}

// PackageIDNotIn applies the NotIn predicate on the "package_id" field.
func PackageIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPackageID, vs...))
}

// PackageIDGT applies the GT predicate on the "package_id" field.
func PackageIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPackageID, v))
}

// PackageIDGTE applies the GTE predicate on the "package_id" field.
func PackageIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPackageID, v))
}

// PackageIDLT applies the LT predicate on the "package_id" field.
func PackageIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPackageID, v))
}

// PackageIDLTE applies the LTE predicate on the "package_id" field.
func PackageIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPackageID, v))
}

// PackageIDContains applies the Contains predicate on the "package_id" field.
func PackageIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPackageID, v))
}

// PackageIDHasPrefix applies the HasPrefix predicate on the "package_id" field.
func PackageIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPackageID, v))
}

// PackageIDHasSuffix applies the HasSuffix predicate on the "package_id" field.
func PackageIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPackageID, v))
}

// PackageIDIsNil applies the IsNil predicate on the "package_id" field.
func PackageIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageID))
}

// PackageIDNotNil applies the NotNil predicate on the "package_id" field.
func PackageIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageID))
}

// PackageIDEqualFold applies the EqualFold predicate on the "package_id" field.
func PackageIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPackageID, v))
}

// PackageIDContainsFold applies the ContainsFold predicate on the "package_id" field.
func PackageIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPackageID, v))
}

// PackageNameEQ applies the EQ predicate on the "package_name" field.
func PackageNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageName, v))
}

// PackageNameNEQ applies the NEQ predicate on the "package_name" field.
func PackageNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageName, v))
}

// PackageNameIn applies the In predicate on the "package_name" field.
func PackageNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPackageName, vs...))
}

// PackageNameNotIn applies the NotIn predicate on the "package_name" field.
func PackageNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPackageName, vs...))
}

// PackageNameGT applies the GT predicate on the "package_name" field.
func PackageNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPackageName, v))
}

// PackageNameGTE applies the GTE predicate on the "package_name" field.
func PackageNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPackageName, v))
}

// PackageNameLT applies the LT predicate on the "package_name" field.
func PackageNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPackageName, v))
}

// PackageNameLTE applies the LTE predicate on the "package_name" field.
func PackageNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPackageName, v))
}

// PackageNameContains applies the Contains predicate on the "package_name" field.
func PackageNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPackageName, v))
}

// PackageNameHasPrefix applies the HasPrefix predicate on the "package_name" field.
func PackageNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPackageName, v))
}

// PackageNameHasSuffix applies the HasSuffix predicate on the "package_name" field.
func PackageNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPackageName, v))
}

// PackageNameIsNil applies the IsNil predicate on the "package_name" field.
func PackageNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageName))
}

// PackageNameNotNil applies the NotNil predicate on the "package_name" field.
func PackageNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageName))
}

// PackageNameEqualFold applies the EqualFold predicate on the "package_name" field.
func PackageNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPackageName, v))
}

// PackageNameContainsFold applies the ContainsFold predicate on the "package_name" field.
func PackageNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPackageName, v))
}

// PackageLatestEQ applies the EQ predicate on the "package_latest" field.
func PackageLatestEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageLatest, v))
}

// PackageLatestNEQ applies the NEQ predicate on the "package_latest" field.
func PackageLatestNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageLatest, v))
}

// PackageLatestIsNil applies the IsNil predicate on the "package_latest" field.
func PackageLatestIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageLatest))
}

// PackageLatestNotNil applies the NotNil predicate on the "package_latest" field.
func PackageLatestNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageLatest))
}

// RegistryKeyEQ applies the EQ predicate on the "registry_key" field.
func RegistryKeyEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKey, v))
}

// RegistryKeyNEQ applies the NEQ predicate on the "registry_key" field.
func RegistryKeyNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKey, v))
}

// RegistryKeyIn applies the In predicate on the "registry_key" field.
func RegistryKeyIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKey, vs...))
}

// RegistryKeyNotIn applies the NotIn predicate on the "registry_key" field.
func RegistryKeyNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKey, vs...))
}

// RegistryKeyGT applies the GT predicate on the "registry_key" field.
func RegistryKeyGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKey, v))
}

// RegistryKeyGTE applies the GTE predicate on the "registry_key" field.
func RegistryKeyGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKey, v))
}

// RegistryKeyLT applies the LT predicate on the "registry_key" field.
func RegistryKeyLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKey, v))
}

// RegistryKeyLTE applies the LTE predicate on the "registry_key" field.
func RegistryKeyLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKey, v))
}

// RegistryKeyContains applies the Contains predicate on the "registry_key" field.
func RegistryKeyContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKey, v))
}

// RegistryKeyHasPrefix applies the HasPrefix predicate on the "registry_key" field.
func RegistryKeyHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKey, v))
}

// RegistryKeyHasSuffix applies the HasSuffix predicate on the "registry_key" field.
func RegistryKeyHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKey, v))
}

// RegistryKeyIsNil applies the IsNil predicate on the "registry_key" field.
func RegistryKeyIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKey))
}

// RegistryKeyNotNil applies the NotNil predicate on the "registry_key" field.
func RegistryKeyNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKey))
}

// RegistryKeyEqualFold applies the EqualFold predicate on the "registry_key" field.
func RegistryKeyEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKey, v))
}

// RegistryKeyContainsFold applies the ContainsFold predicate on the "registry_key" field.
func RegistryKeyContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKey, v))
}

// RegistryKeyValueNameEQ applies the EQ predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameNEQ applies the NEQ predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameIn applies the In predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueName, vs...))
}

// RegistryKeyValueNameNotIn applies the NotIn predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueName, vs...))
}

// RegistryKeyValueNameGT applies the GT predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameGTE applies the GTE predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameLT applies the LT predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameLTE applies the LTE predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameContains applies the Contains predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameHasPrefix applies the HasPrefix predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameHasSuffix applies the HasSuffix predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameIsNil applies the IsNil predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueName))
}

// RegistryKeyValueNameNotNil applies the NotNil predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueName))
}

// RegistryKeyValueNameEqualFold applies the EqualFold predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueNameContainsFold applies the ContainsFold predicate on the "registry_key_value_name" field.
func RegistryKeyValueNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKeyValueName, v))
}

// RegistryKeyValueTypeEQ applies the EQ predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeEQ(v RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueType, v))
}

// RegistryKeyValueTypeNEQ applies the NEQ predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNEQ(v RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueType, v))
}

// RegistryKeyValueTypeIn applies the In predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeIn(vs ...RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueType, vs...))
}

// RegistryKeyValueTypeNotIn applies the NotIn predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNotIn(vs ...RegistryKeyValueType) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueType, vs...))
}

// RegistryKeyValueTypeIsNil applies the IsNil predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueType))
}

// RegistryKeyValueTypeNotNil applies the NotNil predicate on the "registry_key_value_type" field.
func RegistryKeyValueTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueType))
}

// RegistryKeyValueDataEQ applies the EQ predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataNEQ applies the NEQ predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataIn applies the In predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldRegistryKeyValueData, vs...))
}

// RegistryKeyValueDataNotIn applies the NotIn predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldRegistryKeyValueData, vs...))
}

// RegistryKeyValueDataGT applies the GT predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataGTE applies the GTE predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataLT applies the LT predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataLTE applies the LTE predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataContains applies the Contains predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataHasPrefix applies the HasPrefix predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataHasSuffix applies the HasSuffix predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataIsNil applies the IsNil predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryKeyValueData))
}

// RegistryKeyValueDataNotNil applies the NotNil predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryKeyValueData))
}

// RegistryKeyValueDataEqualFold applies the EqualFold predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldRegistryKeyValueData, v))
}

// RegistryKeyValueDataContainsFold applies the ContainsFold predicate on the "registry_key_value_data" field.
func RegistryKeyValueDataContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldRegistryKeyValueData, v))
}

// RegistryHexEQ applies the EQ predicate on the "registry_hex" field.
func RegistryHexEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryHex, v))
}

// RegistryHexNEQ applies the NEQ predicate on the "registry_hex" field.
func RegistryHexNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryHex, v))
}

// RegistryHexIsNil applies the IsNil predicate on the "registry_hex" field.
func RegistryHexIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryHex))
}

// RegistryHexNotNil applies the NotNil predicate on the "registry_hex" field.
func RegistryHexNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryHex))
}

// RegistryForceEQ applies the EQ predicate on the "registry_force" field.
func RegistryForceEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldRegistryForce, v))
}

// RegistryForceNEQ applies the NEQ predicate on the "registry_force" field.
func RegistryForceNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldRegistryForce, v))
}

// RegistryForceIsNil applies the IsNil predicate on the "registry_force" field.
func RegistryForceIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldRegistryForce))
}

// RegistryForceNotNil applies the NotNil predicate on the "registry_force" field.
func RegistryForceNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldRegistryForce))
}

// LocalUserUsernameEQ applies the EQ predicate on the "local_user_username" field.
func LocalUserUsernameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUsername, v))
}

// LocalUserUsernameNEQ applies the NEQ predicate on the "local_user_username" field.
func LocalUserUsernameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserUsername, v))
}

// LocalUserUsernameIn applies the In predicate on the "local_user_username" field.
func LocalUserUsernameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserUsername, vs...))
}

// LocalUserUsernameNotIn applies the NotIn predicate on the "local_user_username" field.
func LocalUserUsernameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserUsername, vs...))
}

// LocalUserUsernameGT applies the GT predicate on the "local_user_username" field.
func LocalUserUsernameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserUsername, v))
}

// LocalUserUsernameGTE applies the GTE predicate on the "local_user_username" field.
func LocalUserUsernameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserUsername, v))
}

// LocalUserUsernameLT applies the LT predicate on the "local_user_username" field.
func LocalUserUsernameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserUsername, v))
}

// LocalUserUsernameLTE applies the LTE predicate on the "local_user_username" field.
func LocalUserUsernameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserUsername, v))
}

// LocalUserUsernameContains applies the Contains predicate on the "local_user_username" field.
func LocalUserUsernameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserUsername, v))
}

// LocalUserUsernameHasPrefix applies the HasPrefix predicate on the "local_user_username" field.
func LocalUserUsernameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserUsername, v))
}

// LocalUserUsernameHasSuffix applies the HasSuffix predicate on the "local_user_username" field.
func LocalUserUsernameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserUsername, v))
}

// LocalUserUsernameIsNil applies the IsNil predicate on the "local_user_username" field.
func LocalUserUsernameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserUsername))
}

// LocalUserUsernameNotNil applies the NotNil predicate on the "local_user_username" field.
func LocalUserUsernameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserUsername))
}

// LocalUserUsernameEqualFold applies the EqualFold predicate on the "local_user_username" field.
func LocalUserUsernameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserUsername, v))
}

// LocalUserUsernameContainsFold applies the ContainsFold predicate on the "local_user_username" field.
func LocalUserUsernameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserUsername, v))
}

// LocalUserDescriptionEQ applies the EQ predicate on the "local_user_description" field.
func LocalUserDescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDescription, v))
}

// LocalUserDescriptionNEQ applies the NEQ predicate on the "local_user_description" field.
func LocalUserDescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserDescription, v))
}

// LocalUserDescriptionIn applies the In predicate on the "local_user_description" field.
func LocalUserDescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserDescription, vs...))
}

// LocalUserDescriptionNotIn applies the NotIn predicate on the "local_user_description" field.
func LocalUserDescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserDescription, vs...))
}

// LocalUserDescriptionGT applies the GT predicate on the "local_user_description" field.
func LocalUserDescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserDescription, v))
}

// LocalUserDescriptionGTE applies the GTE predicate on the "local_user_description" field.
func LocalUserDescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserDescription, v))
}

// LocalUserDescriptionLT applies the LT predicate on the "local_user_description" field.
func LocalUserDescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserDescription, v))
}

// LocalUserDescriptionLTE applies the LTE predicate on the "local_user_description" field.
func LocalUserDescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserDescription, v))
}

// LocalUserDescriptionContains applies the Contains predicate on the "local_user_description" field.
func LocalUserDescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserDescription, v))
}

// LocalUserDescriptionHasPrefix applies the HasPrefix predicate on the "local_user_description" field.
func LocalUserDescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserDescription, v))
}

// LocalUserDescriptionHasSuffix applies the HasSuffix predicate on the "local_user_description" field.
func LocalUserDescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserDescription, v))
}

// LocalUserDescriptionIsNil applies the IsNil predicate on the "local_user_description" field.
func LocalUserDescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserDescription))
}

// LocalUserDescriptionNotNil applies the NotNil predicate on the "local_user_description" field.
func LocalUserDescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserDescription))
}

// LocalUserDescriptionEqualFold applies the EqualFold predicate on the "local_user_description" field.
func LocalUserDescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserDescription, v))
}

// LocalUserDescriptionContainsFold applies the ContainsFold predicate on the "local_user_description" field.
func LocalUserDescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserDescription, v))
}

// LocalUserDisableEQ applies the EQ predicate on the "local_user_disable" field.
func LocalUserDisableEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserDisable, v))
}

// LocalUserDisableNEQ applies the NEQ predicate on the "local_user_disable" field.
func LocalUserDisableNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserDisable, v))
}

// LocalUserDisableIsNil applies the IsNil predicate on the "local_user_disable" field.
func LocalUserDisableIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserDisable))
}

// LocalUserDisableNotNil applies the NotNil predicate on the "local_user_disable" field.
func LocalUserDisableNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserDisable))
}

// LocalUserFullnameEQ applies the EQ predicate on the "local_user_fullname" field.
func LocalUserFullnameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserFullname, v))
}

// LocalUserFullnameNEQ applies the NEQ predicate on the "local_user_fullname" field.
func LocalUserFullnameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserFullname, v))
}

// LocalUserFullnameIn applies the In predicate on the "local_user_fullname" field.
func LocalUserFullnameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserFullname, vs...))
}

// LocalUserFullnameNotIn applies the NotIn predicate on the "local_user_fullname" field.
func LocalUserFullnameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserFullname, vs...))
}

// LocalUserFullnameGT applies the GT predicate on the "local_user_fullname" field.
func LocalUserFullnameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserFullname, v))
}

// LocalUserFullnameGTE applies the GTE predicate on the "local_user_fullname" field.
func LocalUserFullnameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserFullname, v))
}

// LocalUserFullnameLT applies the LT predicate on the "local_user_fullname" field.
func LocalUserFullnameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserFullname, v))
}

// LocalUserFullnameLTE applies the LTE predicate on the "local_user_fullname" field.
func LocalUserFullnameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserFullname, v))
}

// LocalUserFullnameContains applies the Contains predicate on the "local_user_fullname" field.
func LocalUserFullnameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserFullname, v))
}

// LocalUserFullnameHasPrefix applies the HasPrefix predicate on the "local_user_fullname" field.
func LocalUserFullnameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserFullname, v))
}

// LocalUserFullnameHasSuffix applies the HasSuffix predicate on the "local_user_fullname" field.
func LocalUserFullnameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserFullname, v))
}

// LocalUserFullnameIsNil applies the IsNil predicate on the "local_user_fullname" field.
func LocalUserFullnameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserFullname))
}

// LocalUserFullnameNotNil applies the NotNil predicate on the "local_user_fullname" field.
func LocalUserFullnameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserFullname))
}

// LocalUserFullnameEqualFold applies the EqualFold predicate on the "local_user_fullname" field.
func LocalUserFullnameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserFullname, v))
}

// LocalUserFullnameContainsFold applies the ContainsFold predicate on the "local_user_fullname" field.
func LocalUserFullnameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserFullname, v))
}

// LocalUserPasswordEQ applies the EQ predicate on the "local_user_password" field.
func LocalUserPasswordEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordNEQ applies the NEQ predicate on the "local_user_password" field.
func LocalUserPasswordNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPassword, v))
}

// LocalUserPasswordIn applies the In predicate on the "local_user_password" field.
func LocalUserPasswordIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPassword, vs...))
}

// LocalUserPasswordNotIn applies the NotIn predicate on the "local_user_password" field.
func LocalUserPasswordNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPassword, vs...))
}

// LocalUserPasswordGT applies the GT predicate on the "local_user_password" field.
func LocalUserPasswordGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPassword, v))
}

// LocalUserPasswordGTE applies the GTE predicate on the "local_user_password" field.
func LocalUserPasswordGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPassword, v))
}

// LocalUserPasswordLT applies the LT predicate on the "local_user_password" field.
func LocalUserPasswordLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPassword, v))
}

// LocalUserPasswordLTE applies the LTE predicate on the "local_user_password" field.
func LocalUserPasswordLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPassword, v))
}

// LocalUserPasswordContains applies the Contains predicate on the "local_user_password" field.
func LocalUserPasswordContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPassword, v))
}

// LocalUserPasswordHasPrefix applies the HasPrefix predicate on the "local_user_password" field.
func LocalUserPasswordHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPassword, v))
}

// LocalUserPasswordHasSuffix applies the HasSuffix predicate on the "local_user_password" field.
func LocalUserPasswordHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPassword, v))
}

// LocalUserPasswordIsNil applies the IsNil predicate on the "local_user_password" field.
func LocalUserPasswordIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPassword))
}

// LocalUserPasswordNotNil applies the NotNil predicate on the "local_user_password" field.
func LocalUserPasswordNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPassword))
}

// LocalUserPasswordEqualFold applies the EqualFold predicate on the "local_user_password" field.
func LocalUserPasswordEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPassword, v))
}

// LocalUserPasswordContainsFold applies the ContainsFold predicate on the "local_user_password" field.
func LocalUserPasswordContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPassword, v))
}

// LocalUserPasswordChangeNotAllowedEQ applies the EQ predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeNotAllowedNEQ applies the NEQ predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordChangeNotAllowed, v))
}

// LocalUserPasswordChangeNotAllowedIsNil applies the IsNil predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordChangeNotAllowed))
}

// LocalUserPasswordChangeNotAllowedNotNil applies the NotNil predicate on the "local_user_password_change_not_allowed" field.
func LocalUserPasswordChangeNotAllowedNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordChangeNotAllowed))
}

// LocalUserPasswordChangeRequiredEQ applies the EQ predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordChangeRequiredNEQ applies the NEQ predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordChangeRequired, v))
}

// LocalUserPasswordChangeRequiredIsNil applies the IsNil predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordChangeRequired))
}

// LocalUserPasswordChangeRequiredNotNil applies the NotNil predicate on the "local_user_password_change_required" field.
func LocalUserPasswordChangeRequiredNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordChangeRequired))
}

// LocalUserPasswordNeverExpiresEQ applies the EQ predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalUserPasswordNeverExpiresNEQ applies the NEQ predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordNeverExpires, v))
}

// LocalUserPasswordNeverExpiresIsNil applies the IsNil predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordNeverExpires))
}

// LocalUserPasswordNeverExpiresNotNil applies the NotNil predicate on the "local_user_password_never_expires" field.
func LocalUserPasswordNeverExpiresNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordNeverExpires))
}

// LocalUserAppendEQ applies the EQ predicate on the "local_user_append" field.
func LocalUserAppendEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserAppend, v))
}

// LocalUserAppendNEQ applies the NEQ predicate on the "local_user_append" field.
func LocalUserAppendNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserAppend, v))
}

// LocalUserAppendIsNil applies the IsNil predicate on the "local_user_append" field.
func LocalUserAppendIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserAppend))
}

// LocalUserAppendNotNil applies the NotNil predicate on the "local_user_append" field.
func LocalUserAppendNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserAppend))
}

// LocalUserCreateHomeEQ applies the EQ predicate on the "local_user_create_home" field.
func LocalUserCreateHomeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserCreateHome, v))
}

// LocalUserCreateHomeNEQ applies the NEQ predicate on the "local_user_create_home" field.
func LocalUserCreateHomeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserCreateHome, v))
}

// LocalUserCreateHomeIsNil applies the IsNil predicate on the "local_user_create_home" field.
func LocalUserCreateHomeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserCreateHome))
}

// LocalUserCreateHomeNotNil applies the NotNil predicate on the "local_user_create_home" field.
func LocalUserCreateHomeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserCreateHome))
}

// LocalUserExpiresEQ applies the EQ predicate on the "local_user_expires" field.
func LocalUserExpiresEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserExpires, v))
}

// LocalUserExpiresNEQ applies the NEQ predicate on the "local_user_expires" field.
func LocalUserExpiresNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserExpires, v))
}

// LocalUserExpiresIn applies the In predicate on the "local_user_expires" field.
func LocalUserExpiresIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserExpires, vs...))
}

// LocalUserExpiresNotIn applies the NotIn predicate on the "local_user_expires" field.
func LocalUserExpiresNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserExpires, vs...))
}

// LocalUserExpiresGT applies the GT predicate on the "local_user_expires" field.
func LocalUserExpiresGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserExpires, v))
}

// LocalUserExpiresGTE applies the GTE predicate on the "local_user_expires" field.
func LocalUserExpiresGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserExpires, v))
}

// LocalUserExpiresLT applies the LT predicate on the "local_user_expires" field.
func LocalUserExpiresLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserExpires, v))
}

// LocalUserExpiresLTE applies the LTE predicate on the "local_user_expires" field.
func LocalUserExpiresLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserExpires, v))
}

// LocalUserExpiresContains applies the Contains predicate on the "local_user_expires" field.
func LocalUserExpiresContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserExpires, v))
}

// LocalUserExpiresHasPrefix applies the HasPrefix predicate on the "local_user_expires" field.
func LocalUserExpiresHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserExpires, v))
}

// LocalUserExpiresHasSuffix applies the HasSuffix predicate on the "local_user_expires" field.
func LocalUserExpiresHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserExpires, v))
}

// LocalUserExpiresIsNil applies the IsNil predicate on the "local_user_expires" field.
func LocalUserExpiresIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserExpires))
}

// LocalUserExpiresNotNil applies the NotNil predicate on the "local_user_expires" field.
func LocalUserExpiresNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserExpires))
}

// LocalUserExpiresEqualFold applies the EqualFold predicate on the "local_user_expires" field.
func LocalUserExpiresEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserExpires, v))
}

// LocalUserExpiresContainsFold applies the ContainsFold predicate on the "local_user_expires" field.
func LocalUserExpiresContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserExpires, v))
}

// LocalUserForceEQ applies the EQ predicate on the "local_user_force" field.
func LocalUserForceEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserForce, v))
}

// LocalUserForceNEQ applies the NEQ predicate on the "local_user_force" field.
func LocalUserForceNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserForce, v))
}

// LocalUserForceIsNil applies the IsNil predicate on the "local_user_force" field.
func LocalUserForceIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserForce))
}

// LocalUserForceNotNil applies the NotNil predicate on the "local_user_force" field.
func LocalUserForceNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserForce))
}

// LocalUserGenerateSSHKeyEQ applies the EQ predicate on the "local_user_generate_ssh_key" field.
func LocalUserGenerateSSHKeyEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGenerateSSHKey, v))
}

// LocalUserGenerateSSHKeyNEQ applies the NEQ predicate on the "local_user_generate_ssh_key" field.
func LocalUserGenerateSSHKeyNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserGenerateSSHKey, v))
}

// LocalUserGenerateSSHKeyIsNil applies the IsNil predicate on the "local_user_generate_ssh_key" field.
func LocalUserGenerateSSHKeyIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserGenerateSSHKey))
}

// LocalUserGenerateSSHKeyNotNil applies the NotNil predicate on the "local_user_generate_ssh_key" field.
func LocalUserGenerateSSHKeyNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserGenerateSSHKey))
}

// LocalUserGroupEQ applies the EQ predicate on the "local_user_group" field.
func LocalUserGroupEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGroup, v))
}

// LocalUserGroupNEQ applies the NEQ predicate on the "local_user_group" field.
func LocalUserGroupNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserGroup, v))
}

// LocalUserGroupIn applies the In predicate on the "local_user_group" field.
func LocalUserGroupIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserGroup, vs...))
}

// LocalUserGroupNotIn applies the NotIn predicate on the "local_user_group" field.
func LocalUserGroupNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserGroup, vs...))
}

// LocalUserGroupGT applies the GT predicate on the "local_user_group" field.
func LocalUserGroupGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserGroup, v))
}

// LocalUserGroupGTE applies the GTE predicate on the "local_user_group" field.
func LocalUserGroupGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserGroup, v))
}

// LocalUserGroupLT applies the LT predicate on the "local_user_group" field.
func LocalUserGroupLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserGroup, v))
}

// LocalUserGroupLTE applies the LTE predicate on the "local_user_group" field.
func LocalUserGroupLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserGroup, v))
}

// LocalUserGroupContains applies the Contains predicate on the "local_user_group" field.
func LocalUserGroupContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserGroup, v))
}

// LocalUserGroupHasPrefix applies the HasPrefix predicate on the "local_user_group" field.
func LocalUserGroupHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserGroup, v))
}

// LocalUserGroupHasSuffix applies the HasSuffix predicate on the "local_user_group" field.
func LocalUserGroupHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserGroup, v))
}

// LocalUserGroupIsNil applies the IsNil predicate on the "local_user_group" field.
func LocalUserGroupIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserGroup))
}

// LocalUserGroupNotNil applies the NotNil predicate on the "local_user_group" field.
func LocalUserGroupNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserGroup))
}

// LocalUserGroupEqualFold applies the EqualFold predicate on the "local_user_group" field.
func LocalUserGroupEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserGroup, v))
}

// LocalUserGroupContainsFold applies the ContainsFold predicate on the "local_user_group" field.
func LocalUserGroupContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserGroup, v))
}

// LocalUserGroupsEQ applies the EQ predicate on the "local_user_groups" field.
func LocalUserGroupsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserGroups, v))
}

// LocalUserGroupsNEQ applies the NEQ predicate on the "local_user_groups" field.
func LocalUserGroupsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserGroups, v))
}

// LocalUserGroupsIn applies the In predicate on the "local_user_groups" field.
func LocalUserGroupsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserGroups, vs...))
}

// LocalUserGroupsNotIn applies the NotIn predicate on the "local_user_groups" field.
func LocalUserGroupsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserGroups, vs...))
}

// LocalUserGroupsGT applies the GT predicate on the "local_user_groups" field.
func LocalUserGroupsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserGroups, v))
}

// LocalUserGroupsGTE applies the GTE predicate on the "local_user_groups" field.
func LocalUserGroupsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserGroups, v))
}

// LocalUserGroupsLT applies the LT predicate on the "local_user_groups" field.
func LocalUserGroupsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserGroups, v))
}

// LocalUserGroupsLTE applies the LTE predicate on the "local_user_groups" field.
func LocalUserGroupsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserGroups, v))
}

// LocalUserGroupsContains applies the Contains predicate on the "local_user_groups" field.
func LocalUserGroupsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserGroups, v))
}

// LocalUserGroupsHasPrefix applies the HasPrefix predicate on the "local_user_groups" field.
func LocalUserGroupsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserGroups, v))
}

// LocalUserGroupsHasSuffix applies the HasSuffix predicate on the "local_user_groups" field.
func LocalUserGroupsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserGroups, v))
}

// LocalUserGroupsIsNil applies the IsNil predicate on the "local_user_groups" field.
func LocalUserGroupsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserGroups))
}

// LocalUserGroupsNotNil applies the NotNil predicate on the "local_user_groups" field.
func LocalUserGroupsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserGroups))
}

// LocalUserGroupsEqualFold applies the EqualFold predicate on the "local_user_groups" field.
func LocalUserGroupsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserGroups, v))
}

// LocalUserGroupsContainsFold applies the ContainsFold predicate on the "local_user_groups" field.
func LocalUserGroupsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserGroups, v))
}

// LocalUserHomeEQ applies the EQ predicate on the "local_user_home" field.
func LocalUserHomeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserHome, v))
}

// LocalUserHomeNEQ applies the NEQ predicate on the "local_user_home" field.
func LocalUserHomeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserHome, v))
}

// LocalUserHomeIn applies the In predicate on the "local_user_home" field.
func LocalUserHomeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserHome, vs...))
}

// LocalUserHomeNotIn applies the NotIn predicate on the "local_user_home" field.
func LocalUserHomeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserHome, vs...))
}

// LocalUserHomeGT applies the GT predicate on the "local_user_home" field.
func LocalUserHomeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserHome, v))
}

// LocalUserHomeGTE applies the GTE predicate on the "local_user_home" field.
func LocalUserHomeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserHome, v))
}

// LocalUserHomeLT applies the LT predicate on the "local_user_home" field.
func LocalUserHomeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserHome, v))
}

// LocalUserHomeLTE applies the LTE predicate on the "local_user_home" field.
func LocalUserHomeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserHome, v))
}

// LocalUserHomeContains applies the Contains predicate on the "local_user_home" field.
func LocalUserHomeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserHome, v))
}

// LocalUserHomeHasPrefix applies the HasPrefix predicate on the "local_user_home" field.
func LocalUserHomeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserHome, v))
}

// LocalUserHomeHasSuffix applies the HasSuffix predicate on the "local_user_home" field.
func LocalUserHomeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserHome, v))
}

// LocalUserHomeIsNil applies the IsNil predicate on the "local_user_home" field.
func LocalUserHomeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserHome))
}

// LocalUserHomeNotNil applies the NotNil predicate on the "local_user_home" field.
func LocalUserHomeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserHome))
}

// LocalUserHomeEqualFold applies the EqualFold predicate on the "local_user_home" field.
func LocalUserHomeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserHome, v))
}

// LocalUserHomeContainsFold applies the ContainsFold predicate on the "local_user_home" field.
func LocalUserHomeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserHome, v))
}

// LocalUserMoveHomeEQ applies the EQ predicate on the "local_user_move_home" field.
func LocalUserMoveHomeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserMoveHome, v))
}

// LocalUserMoveHomeNEQ applies the NEQ predicate on the "local_user_move_home" field.
func LocalUserMoveHomeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserMoveHome, v))
}

// LocalUserMoveHomeIsNil applies the IsNil predicate on the "local_user_move_home" field.
func LocalUserMoveHomeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserMoveHome))
}

// LocalUserMoveHomeNotNil applies the NotNil predicate on the "local_user_move_home" field.
func LocalUserMoveHomeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserMoveHome))
}

// LocalUserNonuniqueEQ applies the EQ predicate on the "local_user_nonunique" field.
func LocalUserNonuniqueEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserNonunique, v))
}

// LocalUserNonuniqueNEQ applies the NEQ predicate on the "local_user_nonunique" field.
func LocalUserNonuniqueNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserNonunique, v))
}

// LocalUserNonuniqueIsNil applies the IsNil predicate on the "local_user_nonunique" field.
func LocalUserNonuniqueIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserNonunique))
}

// LocalUserNonuniqueNotNil applies the NotNil predicate on the "local_user_nonunique" field.
func LocalUserNonuniqueNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserNonunique))
}

// LocalUserPasswordExpireAccountDisableEQ applies the EQ predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableNEQ applies the NEQ predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableIn applies the In predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPasswordExpireAccountDisable, vs...))
}

// LocalUserPasswordExpireAccountDisableNotIn applies the NotIn predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPasswordExpireAccountDisable, vs...))
}

// LocalUserPasswordExpireAccountDisableGT applies the GT predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableGTE applies the GTE predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableLT applies the LT predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableLTE applies the LTE predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableContains applies the Contains predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableHasPrefix applies the HasPrefix predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableHasSuffix applies the HasSuffix predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableIsNil applies the IsNil predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordExpireAccountDisable))
}

// LocalUserPasswordExpireAccountDisableNotNil applies the NotNil predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordExpireAccountDisable))
}

// LocalUserPasswordExpireAccountDisableEqualFold applies the EqualFold predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireAccountDisableContainsFold applies the ContainsFold predicate on the "local_user_password_expire_account_disable" field.
func LocalUserPasswordExpireAccountDisableContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPasswordExpireAccountDisable, v))
}

// LocalUserPasswordExpireMaxEQ applies the EQ predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxNEQ applies the NEQ predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxIn applies the In predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPasswordExpireMax, vs...))
}

// LocalUserPasswordExpireMaxNotIn applies the NotIn predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPasswordExpireMax, vs...))
}

// LocalUserPasswordExpireMaxGT applies the GT predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxGTE applies the GTE predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxLT applies the LT predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxLTE applies the LTE predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxContains applies the Contains predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxHasPrefix applies the HasPrefix predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxHasSuffix applies the HasSuffix predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxIsNil applies the IsNil predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordExpireMax))
}

// LocalUserPasswordExpireMaxNotNil applies the NotNil predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordExpireMax))
}

// LocalUserPasswordExpireMaxEqualFold applies the EqualFold predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMaxContainsFold applies the ContainsFold predicate on the "local_user_password_expire_max" field.
func LocalUserPasswordExpireMaxContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPasswordExpireMax, v))
}

// LocalUserPasswordExpireMinEQ applies the EQ predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinNEQ applies the NEQ predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinIn applies the In predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPasswordExpireMin, vs...))
}

// LocalUserPasswordExpireMinNotIn applies the NotIn predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPasswordExpireMin, vs...))
}

// LocalUserPasswordExpireMinGT applies the GT predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinGTE applies the GTE predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinLT applies the LT predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinLTE applies the LTE predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinContains applies the Contains predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinHasPrefix applies the HasPrefix predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinHasSuffix applies the HasSuffix predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinIsNil applies the IsNil predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordExpireMin))
}

// LocalUserPasswordExpireMinNotNil applies the NotNil predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordExpireMin))
}

// LocalUserPasswordExpireMinEqualFold applies the EqualFold predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireMinContainsFold applies the ContainsFold predicate on the "local_user_password_expire_min" field.
func LocalUserPasswordExpireMinContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPasswordExpireMin, v))
}

// LocalUserPasswordExpireWarnEQ applies the EQ predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnNEQ applies the NEQ predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnIn applies the In predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserPasswordExpireWarn, vs...))
}

// LocalUserPasswordExpireWarnNotIn applies the NotIn predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserPasswordExpireWarn, vs...))
}

// LocalUserPasswordExpireWarnGT applies the GT predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnGTE applies the GTE predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnLT applies the LT predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnLTE applies the LTE predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnContains applies the Contains predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnHasPrefix applies the HasPrefix predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnHasSuffix applies the HasSuffix predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnIsNil applies the IsNil predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordExpireWarn))
}

// LocalUserPasswordExpireWarnNotNil applies the NotNil predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordExpireWarn))
}

// LocalUserPasswordExpireWarnEqualFold applies the EqualFold predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordExpireWarnContainsFold applies the ContainsFold predicate on the "local_user_password_expire_warn" field.
func LocalUserPasswordExpireWarnContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserPasswordExpireWarn, v))
}

// LocalUserPasswordLockEQ applies the EQ predicate on the "local_user_password_lock" field.
func LocalUserPasswordLockEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserPasswordLock, v))
}

// LocalUserPasswordLockNEQ applies the NEQ predicate on the "local_user_password_lock" field.
func LocalUserPasswordLockNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserPasswordLock, v))
}

// LocalUserPasswordLockIsNil applies the IsNil predicate on the "local_user_password_lock" field.
func LocalUserPasswordLockIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserPasswordLock))
}

// LocalUserPasswordLockNotNil applies the NotNil predicate on the "local_user_password_lock" field.
func LocalUserPasswordLockNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserPasswordLock))
}

// LocalUserSeuserEQ applies the EQ predicate on the "local_user_seuser" field.
func LocalUserSeuserEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSeuser, v))
}

// LocalUserSeuserNEQ applies the NEQ predicate on the "local_user_seuser" field.
func LocalUserSeuserNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSeuser, v))
}

// LocalUserSeuserIn applies the In predicate on the "local_user_seuser" field.
func LocalUserSeuserIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSeuser, vs...))
}

// LocalUserSeuserNotIn applies the NotIn predicate on the "local_user_seuser" field.
func LocalUserSeuserNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSeuser, vs...))
}

// LocalUserSeuserGT applies the GT predicate on the "local_user_seuser" field.
func LocalUserSeuserGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSeuser, v))
}

// LocalUserSeuserGTE applies the GTE predicate on the "local_user_seuser" field.
func LocalUserSeuserGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSeuser, v))
}

// LocalUserSeuserLT applies the LT predicate on the "local_user_seuser" field.
func LocalUserSeuserLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSeuser, v))
}

// LocalUserSeuserLTE applies the LTE predicate on the "local_user_seuser" field.
func LocalUserSeuserLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSeuser, v))
}

// LocalUserSeuserContains applies the Contains predicate on the "local_user_seuser" field.
func LocalUserSeuserContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSeuser, v))
}

// LocalUserSeuserHasPrefix applies the HasPrefix predicate on the "local_user_seuser" field.
func LocalUserSeuserHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSeuser, v))
}

// LocalUserSeuserHasSuffix applies the HasSuffix predicate on the "local_user_seuser" field.
func LocalUserSeuserHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSeuser, v))
}

// LocalUserSeuserIsNil applies the IsNil predicate on the "local_user_seuser" field.
func LocalUserSeuserIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSeuser))
}

// LocalUserSeuserNotNil applies the NotNil predicate on the "local_user_seuser" field.
func LocalUserSeuserNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSeuser))
}

// LocalUserSeuserEqualFold applies the EqualFold predicate on the "local_user_seuser" field.
func LocalUserSeuserEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSeuser, v))
}

// LocalUserSeuserContainsFold applies the ContainsFold predicate on the "local_user_seuser" field.
func LocalUserSeuserContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSeuser, v))
}

// LocalUserShellEQ applies the EQ predicate on the "local_user_shell" field.
func LocalUserShellEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserShell, v))
}

// LocalUserShellNEQ applies the NEQ predicate on the "local_user_shell" field.
func LocalUserShellNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserShell, v))
}

// LocalUserShellIn applies the In predicate on the "local_user_shell" field.
func LocalUserShellIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserShell, vs...))
}

// LocalUserShellNotIn applies the NotIn predicate on the "local_user_shell" field.
func LocalUserShellNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserShell, vs...))
}

// LocalUserShellGT applies the GT predicate on the "local_user_shell" field.
func LocalUserShellGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserShell, v))
}

// LocalUserShellGTE applies the GTE predicate on the "local_user_shell" field.
func LocalUserShellGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserShell, v))
}

// LocalUserShellLT applies the LT predicate on the "local_user_shell" field.
func LocalUserShellLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserShell, v))
}

// LocalUserShellLTE applies the LTE predicate on the "local_user_shell" field.
func LocalUserShellLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserShell, v))
}

// LocalUserShellContains applies the Contains predicate on the "local_user_shell" field.
func LocalUserShellContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserShell, v))
}

// LocalUserShellHasPrefix applies the HasPrefix predicate on the "local_user_shell" field.
func LocalUserShellHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserShell, v))
}

// LocalUserShellHasSuffix applies the HasSuffix predicate on the "local_user_shell" field.
func LocalUserShellHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserShell, v))
}

// LocalUserShellIsNil applies the IsNil predicate on the "local_user_shell" field.
func LocalUserShellIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserShell))
}

// LocalUserShellNotNil applies the NotNil predicate on the "local_user_shell" field.
func LocalUserShellNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserShell))
}

// LocalUserShellEqualFold applies the EqualFold predicate on the "local_user_shell" field.
func LocalUserShellEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserShell, v))
}

// LocalUserShellContainsFold applies the ContainsFold predicate on the "local_user_shell" field.
func LocalUserShellContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserShell, v))
}

// LocalUserSkeletonEQ applies the EQ predicate on the "local_user_skeleton" field.
func LocalUserSkeletonEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonNEQ applies the NEQ predicate on the "local_user_skeleton" field.
func LocalUserSkeletonNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonIn applies the In predicate on the "local_user_skeleton" field.
func LocalUserSkeletonIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSkeleton, vs...))
}

// LocalUserSkeletonNotIn applies the NotIn predicate on the "local_user_skeleton" field.
func LocalUserSkeletonNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSkeleton, vs...))
}

// LocalUserSkeletonGT applies the GT predicate on the "local_user_skeleton" field.
func LocalUserSkeletonGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonGTE applies the GTE predicate on the "local_user_skeleton" field.
func LocalUserSkeletonGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonLT applies the LT predicate on the "local_user_skeleton" field.
func LocalUserSkeletonLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonLTE applies the LTE predicate on the "local_user_skeleton" field.
func LocalUserSkeletonLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonContains applies the Contains predicate on the "local_user_skeleton" field.
func LocalUserSkeletonContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonHasPrefix applies the HasPrefix predicate on the "local_user_skeleton" field.
func LocalUserSkeletonHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonHasSuffix applies the HasSuffix predicate on the "local_user_skeleton" field.
func LocalUserSkeletonHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonIsNil applies the IsNil predicate on the "local_user_skeleton" field.
func LocalUserSkeletonIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSkeleton))
}

// LocalUserSkeletonNotNil applies the NotNil predicate on the "local_user_skeleton" field.
func LocalUserSkeletonNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSkeleton))
}

// LocalUserSkeletonEqualFold applies the EqualFold predicate on the "local_user_skeleton" field.
func LocalUserSkeletonEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSkeleton, v))
}

// LocalUserSkeletonContainsFold applies the ContainsFold predicate on the "local_user_skeleton" field.
func LocalUserSkeletonContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSkeleton, v))
}

// LocalUserSystemEQ applies the EQ predicate on the "local_user_system" field.
func LocalUserSystemEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSystem, v))
}

// LocalUserSystemNEQ applies the NEQ predicate on the "local_user_system" field.
func LocalUserSystemNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSystem, v))
}

// LocalUserSystemIsNil applies the IsNil predicate on the "local_user_system" field.
func LocalUserSystemIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSystem))
}

// LocalUserSystemNotNil applies the NotNil predicate on the "local_user_system" field.
func LocalUserSystemNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSystem))
}

// LocalUserIDEQ applies the EQ predicate on the "local_user_id" field.
func LocalUserIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserID, v))
}

// LocalUserIDNEQ applies the NEQ predicate on the "local_user_id" field.
func LocalUserIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserID, v))
}

// LocalUserIDIn applies the In predicate on the "local_user_id" field.
func LocalUserIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserID, vs...))
}

// LocalUserIDNotIn applies the NotIn predicate on the "local_user_id" field.
func LocalUserIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserID, vs...))
}

// LocalUserIDGT applies the GT predicate on the "local_user_id" field.
func LocalUserIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserID, v))
}

// LocalUserIDGTE applies the GTE predicate on the "local_user_id" field.
func LocalUserIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserID, v))
}

// LocalUserIDLT applies the LT predicate on the "local_user_id" field.
func LocalUserIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserID, v))
}

// LocalUserIDLTE applies the LTE predicate on the "local_user_id" field.
func LocalUserIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserID, v))
}

// LocalUserIDContains applies the Contains predicate on the "local_user_id" field.
func LocalUserIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserID, v))
}

// LocalUserIDHasPrefix applies the HasPrefix predicate on the "local_user_id" field.
func LocalUserIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserID, v))
}

// LocalUserIDHasSuffix applies the HasSuffix predicate on the "local_user_id" field.
func LocalUserIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserID, v))
}

// LocalUserIDIsNil applies the IsNil predicate on the "local_user_id" field.
func LocalUserIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserID))
}

// LocalUserIDNotNil applies the NotNil predicate on the "local_user_id" field.
func LocalUserIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserID))
}

// LocalUserIDEqualFold applies the EqualFold predicate on the "local_user_id" field.
func LocalUserIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserID, v))
}

// LocalUserIDContainsFold applies the ContainsFold predicate on the "local_user_id" field.
func LocalUserIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserID, v))
}

// LocalUserIDMaxEQ applies the EQ predicate on the "local_user_id_max" field.
func LocalUserIDMaxEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxNEQ applies the NEQ predicate on the "local_user_id_max" field.
func LocalUserIDMaxNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxIn applies the In predicate on the "local_user_id_max" field.
func LocalUserIDMaxIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserIDMax, vs...))
}

// LocalUserIDMaxNotIn applies the NotIn predicate on the "local_user_id_max" field.
func LocalUserIDMaxNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserIDMax, vs...))
}

// LocalUserIDMaxGT applies the GT predicate on the "local_user_id_max" field.
func LocalUserIDMaxGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxGTE applies the GTE predicate on the "local_user_id_max" field.
func LocalUserIDMaxGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxLT applies the LT predicate on the "local_user_id_max" field.
func LocalUserIDMaxLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxLTE applies the LTE predicate on the "local_user_id_max" field.
func LocalUserIDMaxLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxContains applies the Contains predicate on the "local_user_id_max" field.
func LocalUserIDMaxContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxHasPrefix applies the HasPrefix predicate on the "local_user_id_max" field.
func LocalUserIDMaxHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxHasSuffix applies the HasSuffix predicate on the "local_user_id_max" field.
func LocalUserIDMaxHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxIsNil applies the IsNil predicate on the "local_user_id_max" field.
func LocalUserIDMaxIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserIDMax))
}

// LocalUserIDMaxNotNil applies the NotNil predicate on the "local_user_id_max" field.
func LocalUserIDMaxNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserIDMax))
}

// LocalUserIDMaxEqualFold applies the EqualFold predicate on the "local_user_id_max" field.
func LocalUserIDMaxEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserIDMax, v))
}

// LocalUserIDMaxContainsFold applies the ContainsFold predicate on the "local_user_id_max" field.
func LocalUserIDMaxContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserIDMax, v))
}

// LocalUserIDMinEQ applies the EQ predicate on the "local_user_id_min" field.
func LocalUserIDMinEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserIDMin, v))
}

// LocalUserIDMinNEQ applies the NEQ predicate on the "local_user_id_min" field.
func LocalUserIDMinNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserIDMin, v))
}

// LocalUserIDMinIn applies the In predicate on the "local_user_id_min" field.
func LocalUserIDMinIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserIDMin, vs...))
}

// LocalUserIDMinNotIn applies the NotIn predicate on the "local_user_id_min" field.
func LocalUserIDMinNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserIDMin, vs...))
}

// LocalUserIDMinGT applies the GT predicate on the "local_user_id_min" field.
func LocalUserIDMinGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserIDMin, v))
}

// LocalUserIDMinGTE applies the GTE predicate on the "local_user_id_min" field.
func LocalUserIDMinGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserIDMin, v))
}

// LocalUserIDMinLT applies the LT predicate on the "local_user_id_min" field.
func LocalUserIDMinLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserIDMin, v))
}

// LocalUserIDMinLTE applies the LTE predicate on the "local_user_id_min" field.
func LocalUserIDMinLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserIDMin, v))
}

// LocalUserIDMinContains applies the Contains predicate on the "local_user_id_min" field.
func LocalUserIDMinContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserIDMin, v))
}

// LocalUserIDMinHasPrefix applies the HasPrefix predicate on the "local_user_id_min" field.
func LocalUserIDMinHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserIDMin, v))
}

// LocalUserIDMinHasSuffix applies the HasSuffix predicate on the "local_user_id_min" field.
func LocalUserIDMinHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserIDMin, v))
}

// LocalUserIDMinIsNil applies the IsNil predicate on the "local_user_id_min" field.
func LocalUserIDMinIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserIDMin))
}

// LocalUserIDMinNotNil applies the NotNil predicate on the "local_user_id_min" field.
func LocalUserIDMinNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserIDMin))
}

// LocalUserIDMinEqualFold applies the EqualFold predicate on the "local_user_id_min" field.
func LocalUserIDMinEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserIDMin, v))
}

// LocalUserIDMinContainsFold applies the ContainsFold predicate on the "local_user_id_min" field.
func LocalUserIDMinContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserIDMin, v))
}

// LocalUserSSHKeyBitsEQ applies the EQ predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsNEQ applies the NEQ predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsIn applies the In predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSSHKeyBits, vs...))
}

// LocalUserSSHKeyBitsNotIn applies the NotIn predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSSHKeyBits, vs...))
}

// LocalUserSSHKeyBitsGT applies the GT predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsGTE applies the GTE predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsLT applies the LT predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsLTE applies the LTE predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsContains applies the Contains predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsHasPrefix applies the HasPrefix predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsHasSuffix applies the HasSuffix predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsIsNil applies the IsNil predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSSHKeyBits))
}

// LocalUserSSHKeyBitsNotNil applies the NotNil predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSSHKeyBits))
}

// LocalUserSSHKeyBitsEqualFold applies the EqualFold predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyBitsContainsFold applies the ContainsFold predicate on the "local_user_ssh_key_bits" field.
func LocalUserSSHKeyBitsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSSHKeyBits, v))
}

// LocalUserSSHKeyCommentEQ applies the EQ predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentNEQ applies the NEQ predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentIn applies the In predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSSHKeyComment, vs...))
}

// LocalUserSSHKeyCommentNotIn applies the NotIn predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSSHKeyComment, vs...))
}

// LocalUserSSHKeyCommentGT applies the GT predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentGTE applies the GTE predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentLT applies the LT predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentLTE applies the LTE predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentContains applies the Contains predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentHasPrefix applies the HasPrefix predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentHasSuffix applies the HasSuffix predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentIsNil applies the IsNil predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSSHKeyComment))
}

// LocalUserSSHKeyCommentNotNil applies the NotNil predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSSHKeyComment))
}

// LocalUserSSHKeyCommentEqualFold applies the EqualFold predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyCommentContainsFold applies the ContainsFold predicate on the "local_user_ssh_key_comment" field.
func LocalUserSSHKeyCommentContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSSHKeyComment, v))
}

// LocalUserSSHKeyFileEQ applies the EQ predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileNEQ applies the NEQ predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileIn applies the In predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSSHKeyFile, vs...))
}

// LocalUserSSHKeyFileNotIn applies the NotIn predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSSHKeyFile, vs...))
}

// LocalUserSSHKeyFileGT applies the GT predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileGTE applies the GTE predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileLT applies the LT predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileLTE applies the LTE predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileContains applies the Contains predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileHasPrefix applies the HasPrefix predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileHasSuffix applies the HasSuffix predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileIsNil applies the IsNil predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSSHKeyFile))
}

// LocalUserSSHKeyFileNotNil applies the NotNil predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSSHKeyFile))
}

// LocalUserSSHKeyFileEqualFold applies the EqualFold predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyFileContainsFold applies the ContainsFold predicate on the "local_user_ssh_key_file" field.
func LocalUserSSHKeyFileContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSSHKeyFile, v))
}

// LocalUserSSHKeyPassphraseEQ applies the EQ predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseNEQ applies the NEQ predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseIn applies the In predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSSHKeyPassphrase, vs...))
}

// LocalUserSSHKeyPassphraseNotIn applies the NotIn predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSSHKeyPassphrase, vs...))
}

// LocalUserSSHKeyPassphraseGT applies the GT predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseGTE applies the GTE predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseLT applies the LT predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseLTE applies the LTE predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseContains applies the Contains predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseHasPrefix applies the HasPrefix predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseHasSuffix applies the HasSuffix predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseIsNil applies the IsNil predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSSHKeyPassphrase))
}

// LocalUserSSHKeyPassphraseNotNil applies the NotNil predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSSHKeyPassphrase))
}

// LocalUserSSHKeyPassphraseEqualFold applies the EqualFold predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyPassphraseContainsFold applies the ContainsFold predicate on the "local_user_ssh_key_passphrase" field.
func LocalUserSSHKeyPassphraseContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSSHKeyPassphrase, v))
}

// LocalUserSSHKeyTypeEQ applies the EQ predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeNEQ applies the NEQ predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeIn applies the In predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserSSHKeyType, vs...))
}

// LocalUserSSHKeyTypeNotIn applies the NotIn predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserSSHKeyType, vs...))
}

// LocalUserSSHKeyTypeGT applies the GT predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeGTE applies the GTE predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeLT applies the LT predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeLTE applies the LTE predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeContains applies the Contains predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeHasPrefix applies the HasPrefix predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeHasSuffix applies the HasSuffix predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeIsNil applies the IsNil predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserSSHKeyType))
}

// LocalUserSSHKeyTypeNotNil applies the NotNil predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserSSHKeyType))
}

// LocalUserSSHKeyTypeEqualFold applies the EqualFold predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserSSHKeyType, v))
}

// LocalUserSSHKeyTypeContainsFold applies the ContainsFold predicate on the "local_user_ssh_key_type" field.
func LocalUserSSHKeyTypeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserSSHKeyType, v))
}

// LocalUserUmaskEQ applies the EQ predicate on the "local_user_umask" field.
func LocalUserUmaskEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalUserUmask, v))
}

// LocalUserUmaskNEQ applies the NEQ predicate on the "local_user_umask" field.
func LocalUserUmaskNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalUserUmask, v))
}

// LocalUserUmaskIn applies the In predicate on the "local_user_umask" field.
func LocalUserUmaskIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalUserUmask, vs...))
}

// LocalUserUmaskNotIn applies the NotIn predicate on the "local_user_umask" field.
func LocalUserUmaskNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalUserUmask, vs...))
}

// LocalUserUmaskGT applies the GT predicate on the "local_user_umask" field.
func LocalUserUmaskGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalUserUmask, v))
}

// LocalUserUmaskGTE applies the GTE predicate on the "local_user_umask" field.
func LocalUserUmaskGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalUserUmask, v))
}

// LocalUserUmaskLT applies the LT predicate on the "local_user_umask" field.
func LocalUserUmaskLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalUserUmask, v))
}

// LocalUserUmaskLTE applies the LTE predicate on the "local_user_umask" field.
func LocalUserUmaskLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalUserUmask, v))
}

// LocalUserUmaskContains applies the Contains predicate on the "local_user_umask" field.
func LocalUserUmaskContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalUserUmask, v))
}

// LocalUserUmaskHasPrefix applies the HasPrefix predicate on the "local_user_umask" field.
func LocalUserUmaskHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalUserUmask, v))
}

// LocalUserUmaskHasSuffix applies the HasSuffix predicate on the "local_user_umask" field.
func LocalUserUmaskHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalUserUmask, v))
}

// LocalUserUmaskIsNil applies the IsNil predicate on the "local_user_umask" field.
func LocalUserUmaskIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalUserUmask))
}

// LocalUserUmaskNotNil applies the NotNil predicate on the "local_user_umask" field.
func LocalUserUmaskNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalUserUmask))
}

// LocalUserUmaskEqualFold applies the EqualFold predicate on the "local_user_umask" field.
func LocalUserUmaskEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalUserUmask, v))
}

// LocalUserUmaskContainsFold applies the ContainsFold predicate on the "local_user_umask" field.
func LocalUserUmaskContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalUserUmask, v))
}

// LocalGroupIDEQ applies the EQ predicate on the "local_group_id" field.
func LocalGroupIDEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupID, v))
}

// LocalGroupIDNEQ applies the NEQ predicate on the "local_group_id" field.
func LocalGroupIDNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupID, v))
}

// LocalGroupIDIn applies the In predicate on the "local_group_id" field.
func LocalGroupIDIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupID, vs...))
}

// LocalGroupIDNotIn applies the NotIn predicate on the "local_group_id" field.
func LocalGroupIDNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupID, vs...))
}

// LocalGroupIDGT applies the GT predicate on the "local_group_id" field.
func LocalGroupIDGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupID, v))
}

// LocalGroupIDGTE applies the GTE predicate on the "local_group_id" field.
func LocalGroupIDGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupID, v))
}

// LocalGroupIDLT applies the LT predicate on the "local_group_id" field.
func LocalGroupIDLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupID, v))
}

// LocalGroupIDLTE applies the LTE predicate on the "local_group_id" field.
func LocalGroupIDLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupID, v))
}

// LocalGroupIDContains applies the Contains predicate on the "local_group_id" field.
func LocalGroupIDContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupID, v))
}

// LocalGroupIDHasPrefix applies the HasPrefix predicate on the "local_group_id" field.
func LocalGroupIDHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupID, v))
}

// LocalGroupIDHasSuffix applies the HasSuffix predicate on the "local_group_id" field.
func LocalGroupIDHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupID, v))
}

// LocalGroupIDIsNil applies the IsNil predicate on the "local_group_id" field.
func LocalGroupIDIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupID))
}

// LocalGroupIDNotNil applies the NotNil predicate on the "local_group_id" field.
func LocalGroupIDNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupID))
}

// LocalGroupIDEqualFold applies the EqualFold predicate on the "local_group_id" field.
func LocalGroupIDEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupID, v))
}

// LocalGroupIDContainsFold applies the ContainsFold predicate on the "local_group_id" field.
func LocalGroupIDContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupID, v))
}

// LocalGroupNameEQ applies the EQ predicate on the "local_group_name" field.
func LocalGroupNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupName, v))
}

// LocalGroupNameNEQ applies the NEQ predicate on the "local_group_name" field.
func LocalGroupNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupName, v))
}

// LocalGroupNameIn applies the In predicate on the "local_group_name" field.
func LocalGroupNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupName, vs...))
}

// LocalGroupNameNotIn applies the NotIn predicate on the "local_group_name" field.
func LocalGroupNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupName, vs...))
}

// LocalGroupNameGT applies the GT predicate on the "local_group_name" field.
func LocalGroupNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupName, v))
}

// LocalGroupNameGTE applies the GTE predicate on the "local_group_name" field.
func LocalGroupNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupName, v))
}

// LocalGroupNameLT applies the LT predicate on the "local_group_name" field.
func LocalGroupNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupName, v))
}

// LocalGroupNameLTE applies the LTE predicate on the "local_group_name" field.
func LocalGroupNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupName, v))
}

// LocalGroupNameContains applies the Contains predicate on the "local_group_name" field.
func LocalGroupNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupName, v))
}

// LocalGroupNameHasPrefix applies the HasPrefix predicate on the "local_group_name" field.
func LocalGroupNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupName, v))
}

// LocalGroupNameHasSuffix applies the HasSuffix predicate on the "local_group_name" field.
func LocalGroupNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupName, v))
}

// LocalGroupNameIsNil applies the IsNil predicate on the "local_group_name" field.
func LocalGroupNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupName))
}

// LocalGroupNameNotNil applies the NotNil predicate on the "local_group_name" field.
func LocalGroupNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupName))
}

// LocalGroupNameEqualFold applies the EqualFold predicate on the "local_group_name" field.
func LocalGroupNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupName, v))
}

// LocalGroupNameContainsFold applies the ContainsFold predicate on the "local_group_name" field.
func LocalGroupNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupName, v))
}

// LocalGroupDescriptionEQ applies the EQ predicate on the "local_group_description" field.
func LocalGroupDescriptionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionNEQ applies the NEQ predicate on the "local_group_description" field.
func LocalGroupDescriptionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionIn applies the In predicate on the "local_group_description" field.
func LocalGroupDescriptionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupDescription, vs...))
}

// LocalGroupDescriptionNotIn applies the NotIn predicate on the "local_group_description" field.
func LocalGroupDescriptionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupDescription, vs...))
}

// LocalGroupDescriptionGT applies the GT predicate on the "local_group_description" field.
func LocalGroupDescriptionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionGTE applies the GTE predicate on the "local_group_description" field.
func LocalGroupDescriptionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionLT applies the LT predicate on the "local_group_description" field.
func LocalGroupDescriptionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionLTE applies the LTE predicate on the "local_group_description" field.
func LocalGroupDescriptionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionContains applies the Contains predicate on the "local_group_description" field.
func LocalGroupDescriptionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionHasPrefix applies the HasPrefix predicate on the "local_group_description" field.
func LocalGroupDescriptionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionHasSuffix applies the HasSuffix predicate on the "local_group_description" field.
func LocalGroupDescriptionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionIsNil applies the IsNil predicate on the "local_group_description" field.
func LocalGroupDescriptionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupDescription))
}

// LocalGroupDescriptionNotNil applies the NotNil predicate on the "local_group_description" field.
func LocalGroupDescriptionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupDescription))
}

// LocalGroupDescriptionEqualFold applies the EqualFold predicate on the "local_group_description" field.
func LocalGroupDescriptionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupDescription, v))
}

// LocalGroupDescriptionContainsFold applies the ContainsFold predicate on the "local_group_description" field.
func LocalGroupDescriptionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupDescription, v))
}

// LocalGroupSystemEQ applies the EQ predicate on the "local_group_system" field.
func LocalGroupSystemEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupSystem, v))
}

// LocalGroupSystemNEQ applies the NEQ predicate on the "local_group_system" field.
func LocalGroupSystemNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupSystem, v))
}

// LocalGroupSystemIsNil applies the IsNil predicate on the "local_group_system" field.
func LocalGroupSystemIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupSystem))
}

// LocalGroupSystemNotNil applies the NotNil predicate on the "local_group_system" field.
func LocalGroupSystemNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupSystem))
}

// LocalGroupForceEQ applies the EQ predicate on the "local_group_force" field.
func LocalGroupForceEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupForce, v))
}

// LocalGroupForceNEQ applies the NEQ predicate on the "local_group_force" field.
func LocalGroupForceNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupForce, v))
}

// LocalGroupForceIsNil applies the IsNil predicate on the "local_group_force" field.
func LocalGroupForceIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupForce))
}

// LocalGroupForceNotNil applies the NotNil predicate on the "local_group_force" field.
func LocalGroupForceNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupForce))
}

// LocalGroupMembersEQ applies the EQ predicate on the "local_group_members" field.
func LocalGroupMembersEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersNEQ applies the NEQ predicate on the "local_group_members" field.
func LocalGroupMembersNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembers, v))
}

// LocalGroupMembersIn applies the In predicate on the "local_group_members" field.
func LocalGroupMembersIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembers, vs...))
}

// LocalGroupMembersNotIn applies the NotIn predicate on the "local_group_members" field.
func LocalGroupMembersNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembers, vs...))
}

// LocalGroupMembersGT applies the GT predicate on the "local_group_members" field.
func LocalGroupMembersGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembers, v))
}

// LocalGroupMembersGTE applies the GTE predicate on the "local_group_members" field.
func LocalGroupMembersGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembers, v))
}

// LocalGroupMembersLT applies the LT predicate on the "local_group_members" field.
func LocalGroupMembersLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembers, v))
}

// LocalGroupMembersLTE applies the LTE predicate on the "local_group_members" field.
func LocalGroupMembersLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembers, v))
}

// LocalGroupMembersContains applies the Contains predicate on the "local_group_members" field.
func LocalGroupMembersContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembers, v))
}

// LocalGroupMembersHasPrefix applies the HasPrefix predicate on the "local_group_members" field.
func LocalGroupMembersHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembers, v))
}

// LocalGroupMembersHasSuffix applies the HasSuffix predicate on the "local_group_members" field.
func LocalGroupMembersHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembers, v))
}

// LocalGroupMembersIsNil applies the IsNil predicate on the "local_group_members" field.
func LocalGroupMembersIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembers))
}

// LocalGroupMembersNotNil applies the NotNil predicate on the "local_group_members" field.
func LocalGroupMembersNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembers))
}

// LocalGroupMembersEqualFold applies the EqualFold predicate on the "local_group_members" field.
func LocalGroupMembersEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembers, v))
}

// LocalGroupMembersContainsFold applies the ContainsFold predicate on the "local_group_members" field.
func LocalGroupMembersContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembers, v))
}

// LocalGroupMembersToIncludeEQ applies the EQ predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeNEQ applies the NEQ predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeIn applies the In predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembersToInclude, vs...))
}

// LocalGroupMembersToIncludeNotIn applies the NotIn predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembersToInclude, vs...))
}

// LocalGroupMembersToIncludeGT applies the GT predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeGTE applies the GTE predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeLT applies the LT predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeLTE applies the LTE predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeContains applies the Contains predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeHasPrefix applies the HasPrefix predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeHasSuffix applies the HasSuffix predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeIsNil applies the IsNil predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembersToInclude))
}

// LocalGroupMembersToIncludeNotNil applies the NotNil predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembersToInclude))
}

// LocalGroupMembersToIncludeEqualFold applies the EqualFold predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToIncludeContainsFold applies the ContainsFold predicate on the "local_group_members_to_include" field.
func LocalGroupMembersToIncludeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembersToInclude, v))
}

// LocalGroupMembersToExcludeEQ applies the EQ predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeNEQ applies the NEQ predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeIn applies the In predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldLocalGroupMembersToExclude, vs...))
}

// LocalGroupMembersToExcludeNotIn applies the NotIn predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldLocalGroupMembersToExclude, vs...))
}

// LocalGroupMembersToExcludeGT applies the GT predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeGTE applies the GTE predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeLT applies the LT predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeLTE applies the LTE predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeContains applies the Contains predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeHasPrefix applies the HasPrefix predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeHasSuffix applies the HasSuffix predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeIsNil applies the IsNil predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldLocalGroupMembersToExclude))
}

// LocalGroupMembersToExcludeNotNil applies the NotNil predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldLocalGroupMembersToExclude))
}

// LocalGroupMembersToExcludeEqualFold applies the EqualFold predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldLocalGroupMembersToExclude, v))
}

// LocalGroupMembersToExcludeContainsFold applies the ContainsFold predicate on the "local_group_members_to_exclude" field.
func LocalGroupMembersToExcludeContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldLocalGroupMembersToExclude, v))
}

// MsiProductidEQ applies the EQ predicate on the "msi_productid" field.
func MsiProductidEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiProductid, v))
}

// MsiProductidNEQ applies the NEQ predicate on the "msi_productid" field.
func MsiProductidNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiProductid, v))
}

// MsiProductidIn applies the In predicate on the "msi_productid" field.
func MsiProductidIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiProductid, vs...))
}

// MsiProductidNotIn applies the NotIn predicate on the "msi_productid" field.
func MsiProductidNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiProductid, vs...))
}

// MsiProductidGT applies the GT predicate on the "msi_productid" field.
func MsiProductidGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMsiProductid, v))
}

// MsiProductidGTE applies the GTE predicate on the "msi_productid" field.
func MsiProductidGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMsiProductid, v))
}

// MsiProductidLT applies the LT predicate on the "msi_productid" field.
func MsiProductidLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMsiProductid, v))
}

// MsiProductidLTE applies the LTE predicate on the "msi_productid" field.
func MsiProductidLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMsiProductid, v))
}

// MsiProductidContains applies the Contains predicate on the "msi_productid" field.
func MsiProductidContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMsiProductid, v))
}

// MsiProductidHasPrefix applies the HasPrefix predicate on the "msi_productid" field.
func MsiProductidHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMsiProductid, v))
}

// MsiProductidHasSuffix applies the HasSuffix predicate on the "msi_productid" field.
func MsiProductidHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMsiProductid, v))
}

// MsiProductidIsNil applies the IsNil predicate on the "msi_productid" field.
func MsiProductidIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiProductid))
}

// MsiProductidNotNil applies the NotNil predicate on the "msi_productid" field.
func MsiProductidNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiProductid))
}

// MsiProductidEqualFold applies the EqualFold predicate on the "msi_productid" field.
func MsiProductidEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMsiProductid, v))
}

// MsiProductidContainsFold applies the ContainsFold predicate on the "msi_productid" field.
func MsiProductidContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMsiProductid, v))
}

// MsiPathEQ applies the EQ predicate on the "msi_path" field.
func MsiPathEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiPath, v))
}

// MsiPathNEQ applies the NEQ predicate on the "msi_path" field.
func MsiPathNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiPath, v))
}

// MsiPathIn applies the In predicate on the "msi_path" field.
func MsiPathIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiPath, vs...))
}

// MsiPathNotIn applies the NotIn predicate on the "msi_path" field.
func MsiPathNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiPath, vs...))
}

// MsiPathGT applies the GT predicate on the "msi_path" field.
func MsiPathGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMsiPath, v))
}

// MsiPathGTE applies the GTE predicate on the "msi_path" field.
func MsiPathGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMsiPath, v))
}

// MsiPathLT applies the LT predicate on the "msi_path" field.
func MsiPathLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMsiPath, v))
}

// MsiPathLTE applies the LTE predicate on the "msi_path" field.
func MsiPathLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMsiPath, v))
}

// MsiPathContains applies the Contains predicate on the "msi_path" field.
func MsiPathContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMsiPath, v))
}

// MsiPathHasPrefix applies the HasPrefix predicate on the "msi_path" field.
func MsiPathHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMsiPath, v))
}

// MsiPathHasSuffix applies the HasSuffix predicate on the "msi_path" field.
func MsiPathHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMsiPath, v))
}

// MsiPathIsNil applies the IsNil predicate on the "msi_path" field.
func MsiPathIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiPath))
}

// MsiPathNotNil applies the NotNil predicate on the "msi_path" field.
func MsiPathNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiPath))
}

// MsiPathEqualFold applies the EqualFold predicate on the "msi_path" field.
func MsiPathEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMsiPath, v))
}

// MsiPathContainsFold applies the ContainsFold predicate on the "msi_path" field.
func MsiPathContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMsiPath, v))
}

// MsiArgumentsEQ applies the EQ predicate on the "msi_arguments" field.
func MsiArgumentsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiArguments, v))
}

// MsiArgumentsNEQ applies the NEQ predicate on the "msi_arguments" field.
func MsiArgumentsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiArguments, v))
}

// MsiArgumentsIn applies the In predicate on the "msi_arguments" field.
func MsiArgumentsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiArguments, vs...))
}

// MsiArgumentsNotIn applies the NotIn predicate on the "msi_arguments" field.
func MsiArgumentsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiArguments, vs...))
}

// MsiArgumentsGT applies the GT predicate on the "msi_arguments" field.
func MsiArgumentsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMsiArguments, v))
}

// MsiArgumentsGTE applies the GTE predicate on the "msi_arguments" field.
func MsiArgumentsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMsiArguments, v))
}

// MsiArgumentsLT applies the LT predicate on the "msi_arguments" field.
func MsiArgumentsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMsiArguments, v))
}

// MsiArgumentsLTE applies the LTE predicate on the "msi_arguments" field.
func MsiArgumentsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMsiArguments, v))
}

// MsiArgumentsContains applies the Contains predicate on the "msi_arguments" field.
func MsiArgumentsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMsiArguments, v))
}

// MsiArgumentsHasPrefix applies the HasPrefix predicate on the "msi_arguments" field.
func MsiArgumentsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMsiArguments, v))
}

// MsiArgumentsHasSuffix applies the HasSuffix predicate on the "msi_arguments" field.
func MsiArgumentsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMsiArguments, v))
}

// MsiArgumentsIsNil applies the IsNil predicate on the "msi_arguments" field.
func MsiArgumentsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiArguments))
}

// MsiArgumentsNotNil applies the NotNil predicate on the "msi_arguments" field.
func MsiArgumentsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiArguments))
}

// MsiArgumentsEqualFold applies the EqualFold predicate on the "msi_arguments" field.
func MsiArgumentsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMsiArguments, v))
}

// MsiArgumentsContainsFold applies the ContainsFold predicate on the "msi_arguments" field.
func MsiArgumentsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMsiArguments, v))
}

// MsiFileHashEQ applies the EQ predicate on the "msi_file_hash" field.
func MsiFileHashEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiFileHash, v))
}

// MsiFileHashNEQ applies the NEQ predicate on the "msi_file_hash" field.
func MsiFileHashNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiFileHash, v))
}

// MsiFileHashIn applies the In predicate on the "msi_file_hash" field.
func MsiFileHashIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiFileHash, vs...))
}

// MsiFileHashNotIn applies the NotIn predicate on the "msi_file_hash" field.
func MsiFileHashNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiFileHash, vs...))
}

// MsiFileHashGT applies the GT predicate on the "msi_file_hash" field.
func MsiFileHashGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMsiFileHash, v))
}

// MsiFileHashGTE applies the GTE predicate on the "msi_file_hash" field.
func MsiFileHashGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMsiFileHash, v))
}

// MsiFileHashLT applies the LT predicate on the "msi_file_hash" field.
func MsiFileHashLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMsiFileHash, v))
}

// MsiFileHashLTE applies the LTE predicate on the "msi_file_hash" field.
func MsiFileHashLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMsiFileHash, v))
}

// MsiFileHashContains applies the Contains predicate on the "msi_file_hash" field.
func MsiFileHashContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMsiFileHash, v))
}

// MsiFileHashHasPrefix applies the HasPrefix predicate on the "msi_file_hash" field.
func MsiFileHashHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMsiFileHash, v))
}

// MsiFileHashHasSuffix applies the HasSuffix predicate on the "msi_file_hash" field.
func MsiFileHashHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMsiFileHash, v))
}

// MsiFileHashIsNil applies the IsNil predicate on the "msi_file_hash" field.
func MsiFileHashIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiFileHash))
}

// MsiFileHashNotNil applies the NotNil predicate on the "msi_file_hash" field.
func MsiFileHashNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiFileHash))
}

// MsiFileHashEqualFold applies the EqualFold predicate on the "msi_file_hash" field.
func MsiFileHashEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMsiFileHash, v))
}

// MsiFileHashContainsFold applies the ContainsFold predicate on the "msi_file_hash" field.
func MsiFileHashContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMsiFileHash, v))
}

// MsiFileHashAlgEQ applies the EQ predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgEQ(v MsiFileHashAlg) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiFileHashAlg, v))
}

// MsiFileHashAlgNEQ applies the NEQ predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgNEQ(v MsiFileHashAlg) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiFileHashAlg, v))
}

// MsiFileHashAlgIn applies the In predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgIn(vs ...MsiFileHashAlg) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiFileHashAlg, vs...))
}

// MsiFileHashAlgNotIn applies the NotIn predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgNotIn(vs ...MsiFileHashAlg) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiFileHashAlg, vs...))
}

// MsiFileHashAlgIsNil applies the IsNil predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiFileHashAlg))
}

// MsiFileHashAlgNotNil applies the NotNil predicate on the "msi_file_hash_alg" field.
func MsiFileHashAlgNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiFileHashAlg))
}

// MsiLogPathEQ applies the EQ predicate on the "msi_log_path" field.
func MsiLogPathEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldMsiLogPath, v))
}

// MsiLogPathNEQ applies the NEQ predicate on the "msi_log_path" field.
func MsiLogPathNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldMsiLogPath, v))
}

// MsiLogPathIn applies the In predicate on the "msi_log_path" field.
func MsiLogPathIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldMsiLogPath, vs...))
}

// MsiLogPathNotIn applies the NotIn predicate on the "msi_log_path" field.
func MsiLogPathNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldMsiLogPath, vs...))
}

// MsiLogPathGT applies the GT predicate on the "msi_log_path" field.
func MsiLogPathGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldMsiLogPath, v))
}

// MsiLogPathGTE applies the GTE predicate on the "msi_log_path" field.
func MsiLogPathGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldMsiLogPath, v))
}

// MsiLogPathLT applies the LT predicate on the "msi_log_path" field.
func MsiLogPathLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldMsiLogPath, v))
}

// MsiLogPathLTE applies the LTE predicate on the "msi_log_path" field.
func MsiLogPathLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldMsiLogPath, v))
}

// MsiLogPathContains applies the Contains predicate on the "msi_log_path" field.
func MsiLogPathContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldMsiLogPath, v))
}

// MsiLogPathHasPrefix applies the HasPrefix predicate on the "msi_log_path" field.
func MsiLogPathHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldMsiLogPath, v))
}

// MsiLogPathHasSuffix applies the HasSuffix predicate on the "msi_log_path" field.
func MsiLogPathHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldMsiLogPath, v))
}

// MsiLogPathIsNil applies the IsNil predicate on the "msi_log_path" field.
func MsiLogPathIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldMsiLogPath))
}

// MsiLogPathNotNil applies the NotNil predicate on the "msi_log_path" field.
func MsiLogPathNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldMsiLogPath))
}

// MsiLogPathEqualFold applies the EqualFold predicate on the "msi_log_path" field.
func MsiLogPathEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldMsiLogPath, v))
}

// MsiLogPathContainsFold applies the ContainsFold predicate on the "msi_log_path" field.
func MsiLogPathContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldMsiLogPath, v))
}

// ScriptEQ applies the EQ predicate on the "script" field.
func ScriptEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScript, v))
}

// ScriptNEQ applies the NEQ predicate on the "script" field.
func ScriptNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldScript, v))
}

// ScriptIn applies the In predicate on the "script" field.
func ScriptIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldScript, vs...))
}

// ScriptNotIn applies the NotIn predicate on the "script" field.
func ScriptNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldScript, vs...))
}

// ScriptGT applies the GT predicate on the "script" field.
func ScriptGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldScript, v))
}

// ScriptGTE applies the GTE predicate on the "script" field.
func ScriptGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldScript, v))
}

// ScriptLT applies the LT predicate on the "script" field.
func ScriptLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldScript, v))
}

// ScriptLTE applies the LTE predicate on the "script" field.
func ScriptLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldScript, v))
}

// ScriptContains applies the Contains predicate on the "script" field.
func ScriptContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldScript, v))
}

// ScriptHasPrefix applies the HasPrefix predicate on the "script" field.
func ScriptHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldScript, v))
}

// ScriptHasSuffix applies the HasSuffix predicate on the "script" field.
func ScriptHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldScript, v))
}

// ScriptIsNil applies the IsNil predicate on the "script" field.
func ScriptIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldScript))
}

// ScriptNotNil applies the NotNil predicate on the "script" field.
func ScriptNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldScript))
}

// ScriptEqualFold applies the EqualFold predicate on the "script" field.
func ScriptEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldScript, v))
}

// ScriptContainsFold applies the ContainsFold predicate on the "script" field.
func ScriptContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldScript, v))
}

// ScriptExecutableEQ applies the EQ predicate on the "script_executable" field.
func ScriptExecutableEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScriptExecutable, v))
}

// ScriptExecutableNEQ applies the NEQ predicate on the "script_executable" field.
func ScriptExecutableNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldScriptExecutable, v))
}

// ScriptExecutableIn applies the In predicate on the "script_executable" field.
func ScriptExecutableIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldScriptExecutable, vs...))
}

// ScriptExecutableNotIn applies the NotIn predicate on the "script_executable" field.
func ScriptExecutableNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldScriptExecutable, vs...))
}

// ScriptExecutableGT applies the GT predicate on the "script_executable" field.
func ScriptExecutableGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldScriptExecutable, v))
}

// ScriptExecutableGTE applies the GTE predicate on the "script_executable" field.
func ScriptExecutableGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldScriptExecutable, v))
}

// ScriptExecutableLT applies the LT predicate on the "script_executable" field.
func ScriptExecutableLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldScriptExecutable, v))
}

// ScriptExecutableLTE applies the LTE predicate on the "script_executable" field.
func ScriptExecutableLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldScriptExecutable, v))
}

// ScriptExecutableContains applies the Contains predicate on the "script_executable" field.
func ScriptExecutableContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldScriptExecutable, v))
}

// ScriptExecutableHasPrefix applies the HasPrefix predicate on the "script_executable" field.
func ScriptExecutableHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldScriptExecutable, v))
}

// ScriptExecutableHasSuffix applies the HasSuffix predicate on the "script_executable" field.
func ScriptExecutableHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldScriptExecutable, v))
}

// ScriptExecutableIsNil applies the IsNil predicate on the "script_executable" field.
func ScriptExecutableIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldScriptExecutable))
}

// ScriptExecutableNotNil applies the NotNil predicate on the "script_executable" field.
func ScriptExecutableNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldScriptExecutable))
}

// ScriptExecutableEqualFold applies the EqualFold predicate on the "script_executable" field.
func ScriptExecutableEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldScriptExecutable, v))
}

// ScriptExecutableContainsFold applies the ContainsFold predicate on the "script_executable" field.
func ScriptExecutableContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldScriptExecutable, v))
}

// ScriptCreatesEQ applies the EQ predicate on the "script_creates" field.
func ScriptCreatesEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScriptCreates, v))
}

// ScriptCreatesNEQ applies the NEQ predicate on the "script_creates" field.
func ScriptCreatesNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldScriptCreates, v))
}

// ScriptCreatesIn applies the In predicate on the "script_creates" field.
func ScriptCreatesIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldScriptCreates, vs...))
}

// ScriptCreatesNotIn applies the NotIn predicate on the "script_creates" field.
func ScriptCreatesNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldScriptCreates, vs...))
}

// ScriptCreatesGT applies the GT predicate on the "script_creates" field.
func ScriptCreatesGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldScriptCreates, v))
}

// ScriptCreatesGTE applies the GTE predicate on the "script_creates" field.
func ScriptCreatesGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldScriptCreates, v))
}

// ScriptCreatesLT applies the LT predicate on the "script_creates" field.
func ScriptCreatesLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldScriptCreates, v))
}

// ScriptCreatesLTE applies the LTE predicate on the "script_creates" field.
func ScriptCreatesLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldScriptCreates, v))
}

// ScriptCreatesContains applies the Contains predicate on the "script_creates" field.
func ScriptCreatesContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldScriptCreates, v))
}

// ScriptCreatesHasPrefix applies the HasPrefix predicate on the "script_creates" field.
func ScriptCreatesHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldScriptCreates, v))
}

// ScriptCreatesHasSuffix applies the HasSuffix predicate on the "script_creates" field.
func ScriptCreatesHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldScriptCreates, v))
}

// ScriptCreatesIsNil applies the IsNil predicate on the "script_creates" field.
func ScriptCreatesIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldScriptCreates))
}

// ScriptCreatesNotNil applies the NotNil predicate on the "script_creates" field.
func ScriptCreatesNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldScriptCreates))
}

// ScriptCreatesEqualFold applies the EqualFold predicate on the "script_creates" field.
func ScriptCreatesEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldScriptCreates, v))
}

// ScriptCreatesContainsFold applies the ContainsFold predicate on the "script_creates" field.
func ScriptCreatesContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldScriptCreates, v))
}

// ScriptRunEQ applies the EQ predicate on the "script_run" field.
func ScriptRunEQ(v ScriptRun) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldScriptRun, v))
}

// ScriptRunNEQ applies the NEQ predicate on the "script_run" field.
func ScriptRunNEQ(v ScriptRun) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldScriptRun, v))
}

// ScriptRunIn applies the In predicate on the "script_run" field.
func ScriptRunIn(vs ...ScriptRun) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldScriptRun, vs...))
}

// ScriptRunNotIn applies the NotIn predicate on the "script_run" field.
func ScriptRunNotIn(vs ...ScriptRun) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldScriptRun, vs...))
}

// ScriptRunIsNil applies the IsNil predicate on the "script_run" field.
func ScriptRunIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldScriptRun))
}

// ScriptRunNotNil applies the NotNil predicate on the "script_run" field.
func ScriptRunNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldScriptRun))
}

// AgentTypeEQ applies the EQ predicate on the "agent_type" field.
func AgentTypeEQ(v AgentType) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAgentType, v))
}

// AgentTypeNEQ applies the NEQ predicate on the "agent_type" field.
func AgentTypeNEQ(v AgentType) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAgentType, v))
}

// AgentTypeIn applies the In predicate on the "agent_type" field.
func AgentTypeIn(vs ...AgentType) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAgentType, vs...))
}

// AgentTypeNotIn applies the NotIn predicate on the "agent_type" field.
func AgentTypeNotIn(vs ...AgentType) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAgentType, vs...))
}

// AgentTypeIsNil applies the IsNil predicate on the "agent_type" field.
func AgentTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAgentType))
}

// AgentTypeNotNil applies the NotNil predicate on the "agent_type" field.
func AgentTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAgentType))
}

// WhenEQ applies the EQ predicate on the "when" field.
func WhenEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldWhen, v))
}

// WhenNEQ applies the NEQ predicate on the "when" field.
func WhenNEQ(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldWhen, v))
}

// WhenIn applies the In predicate on the "when" field.
func WhenIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldWhen, vs...))
}

// WhenNotIn applies the NotIn predicate on the "when" field.
func WhenNotIn(vs ...time.Time) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldWhen, vs...))
}

// WhenGT applies the GT predicate on the "when" field.
func WhenGT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldWhen, v))
}

// WhenGTE applies the GTE predicate on the "when" field.
func WhenGTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldWhen, v))
}

// WhenLT applies the LT predicate on the "when" field.
func WhenLT(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldWhen, v))
}

// WhenLTE applies the LTE predicate on the "when" field.
func WhenLTE(v time.Time) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldWhen, v))
}

// WhenIsNil applies the IsNil predicate on the "when" field.
func WhenIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldWhen))
}

// WhenNotNil applies the NotNil predicate on the "when" field.
func WhenNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldWhen))
}

// BrewUpdateEQ applies the EQ predicate on the "brew_update" field.
func BrewUpdateEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpdate, v))
}

// BrewUpdateNEQ applies the NEQ predicate on the "brew_update" field.
func BrewUpdateNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBrewUpdate, v))
}

// BrewUpdateIsNil applies the IsNil predicate on the "brew_update" field.
func BrewUpdateIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBrewUpdate))
}

// BrewUpdateNotNil applies the NotNil predicate on the "brew_update" field.
func BrewUpdateNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBrewUpdate))
}

// BrewUpgradeAllEQ applies the EQ predicate on the "brew_upgrade_all" field.
func BrewUpgradeAllEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpgradeAll, v))
}

// BrewUpgradeAllNEQ applies the NEQ predicate on the "brew_upgrade_all" field.
func BrewUpgradeAllNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBrewUpgradeAll, v))
}

// BrewUpgradeAllIsNil applies the IsNil predicate on the "brew_upgrade_all" field.
func BrewUpgradeAllIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBrewUpgradeAll))
}

// BrewUpgradeAllNotNil applies the NotNil predicate on the "brew_upgrade_all" field.
func BrewUpgradeAllNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBrewUpgradeAll))
}

// BrewUpgradeOptionsEQ applies the EQ predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsNEQ applies the NEQ predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsIn applies the In predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldBrewUpgradeOptions, vs...))
}

// BrewUpgradeOptionsNotIn applies the NotIn predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldBrewUpgradeOptions, vs...))
}

// BrewUpgradeOptionsGT applies the GT predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsGTE applies the GTE predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsLT applies the LT predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsLTE applies the LTE predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsContains applies the Contains predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsHasPrefix applies the HasPrefix predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsHasSuffix applies the HasSuffix predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsIsNil applies the IsNil predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBrewUpgradeOptions))
}

// BrewUpgradeOptionsNotNil applies the NotNil predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBrewUpgradeOptions))
}

// BrewUpgradeOptionsEqualFold applies the EqualFold predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldBrewUpgradeOptions, v))
}

// BrewUpgradeOptionsContainsFold applies the ContainsFold predicate on the "brew_upgrade_options" field.
func BrewUpgradeOptionsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldBrewUpgradeOptions, v))
}

// BrewInstallOptionsEQ applies the EQ predicate on the "brew_install_options" field.
func BrewInstallOptionsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsNEQ applies the NEQ predicate on the "brew_install_options" field.
func BrewInstallOptionsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsIn applies the In predicate on the "brew_install_options" field.
func BrewInstallOptionsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldBrewInstallOptions, vs...))
}

// BrewInstallOptionsNotIn applies the NotIn predicate on the "brew_install_options" field.
func BrewInstallOptionsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldBrewInstallOptions, vs...))
}

// BrewInstallOptionsGT applies the GT predicate on the "brew_install_options" field.
func BrewInstallOptionsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsGTE applies the GTE predicate on the "brew_install_options" field.
func BrewInstallOptionsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsLT applies the LT predicate on the "brew_install_options" field.
func BrewInstallOptionsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsLTE applies the LTE predicate on the "brew_install_options" field.
func BrewInstallOptionsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsContains applies the Contains predicate on the "brew_install_options" field.
func BrewInstallOptionsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsHasPrefix applies the HasPrefix predicate on the "brew_install_options" field.
func BrewInstallOptionsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsHasSuffix applies the HasSuffix predicate on the "brew_install_options" field.
func BrewInstallOptionsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsIsNil applies the IsNil predicate on the "brew_install_options" field.
func BrewInstallOptionsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBrewInstallOptions))
}

// BrewInstallOptionsNotNil applies the NotNil predicate on the "brew_install_options" field.
func BrewInstallOptionsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBrewInstallOptions))
}

// BrewInstallOptionsEqualFold applies the EqualFold predicate on the "brew_install_options" field.
func BrewInstallOptionsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldBrewInstallOptions, v))
}

// BrewInstallOptionsContainsFold applies the ContainsFold predicate on the "brew_install_options" field.
func BrewInstallOptionsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldBrewInstallOptions, v))
}

// BrewGreedyEQ applies the EQ predicate on the "brew_greedy" field.
func BrewGreedyEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldBrewGreedy, v))
}

// BrewGreedyNEQ applies the NEQ predicate on the "brew_greedy" field.
func BrewGreedyNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldBrewGreedy, v))
}

// BrewGreedyIsNil applies the IsNil predicate on the "brew_greedy" field.
func BrewGreedyIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldBrewGreedy))
}

// BrewGreedyNotNil applies the NotNil predicate on the "brew_greedy" field.
func BrewGreedyNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldBrewGreedy))
}

// PackageVersionEQ applies the EQ predicate on the "package_version" field.
func PackageVersionEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldPackageVersion, v))
}

// PackageVersionNEQ applies the NEQ predicate on the "package_version" field.
func PackageVersionNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldPackageVersion, v))
}

// PackageVersionIn applies the In predicate on the "package_version" field.
func PackageVersionIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldPackageVersion, vs...))
}

// PackageVersionNotIn applies the NotIn predicate on the "package_version" field.
func PackageVersionNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldPackageVersion, vs...))
}

// PackageVersionGT applies the GT predicate on the "package_version" field.
func PackageVersionGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldPackageVersion, v))
}

// PackageVersionGTE applies the GTE predicate on the "package_version" field.
func PackageVersionGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldPackageVersion, v))
}

// PackageVersionLT applies the LT predicate on the "package_version" field.
func PackageVersionLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldPackageVersion, v))
}

// PackageVersionLTE applies the LTE predicate on the "package_version" field.
func PackageVersionLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldPackageVersion, v))
}

// PackageVersionContains applies the Contains predicate on the "package_version" field.
func PackageVersionContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldPackageVersion, v))
}

// PackageVersionHasPrefix applies the HasPrefix predicate on the "package_version" field.
func PackageVersionHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldPackageVersion, v))
}

// PackageVersionHasSuffix applies the HasSuffix predicate on the "package_version" field.
func PackageVersionHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldPackageVersion, v))
}

// PackageVersionIsNil applies the IsNil predicate on the "package_version" field.
func PackageVersionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldPackageVersion))
}

// PackageVersionNotNil applies the NotNil predicate on the "package_version" field.
func PackageVersionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldPackageVersion))
}

// PackageVersionEqualFold applies the EqualFold predicate on the "package_version" field.
func PackageVersionEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldPackageVersion, v))
}

// PackageVersionContainsFold applies the ContainsFold predicate on the "package_version" field.
func PackageVersionContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldPackageVersion, v))
}

// AptAllowDowngradeEQ applies the EQ predicate on the "apt_allow_downgrade" field.
func AptAllowDowngradeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptAllowDowngrade, v))
}

// AptAllowDowngradeNEQ applies the NEQ predicate on the "apt_allow_downgrade" field.
func AptAllowDowngradeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptAllowDowngrade, v))
}

// AptAllowDowngradeIsNil applies the IsNil predicate on the "apt_allow_downgrade" field.
func AptAllowDowngradeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptAllowDowngrade))
}

// AptAllowDowngradeNotNil applies the NotNil predicate on the "apt_allow_downgrade" field.
func AptAllowDowngradeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptAllowDowngrade))
}

// AptDebEQ applies the EQ predicate on the "apt_deb" field.
func AptDebEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptDeb, v))
}

// AptDebNEQ applies the NEQ predicate on the "apt_deb" field.
func AptDebNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptDeb, v))
}

// AptDebIn applies the In predicate on the "apt_deb" field.
func AptDebIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAptDeb, vs...))
}

// AptDebNotIn applies the NotIn predicate on the "apt_deb" field.
func AptDebNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAptDeb, vs...))
}

// AptDebGT applies the GT predicate on the "apt_deb" field.
func AptDebGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAptDeb, v))
}

// AptDebGTE applies the GTE predicate on the "apt_deb" field.
func AptDebGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAptDeb, v))
}

// AptDebLT applies the LT predicate on the "apt_deb" field.
func AptDebLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAptDeb, v))
}

// AptDebLTE applies the LTE predicate on the "apt_deb" field.
func AptDebLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAptDeb, v))
}

// AptDebContains applies the Contains predicate on the "apt_deb" field.
func AptDebContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAptDeb, v))
}

// AptDebHasPrefix applies the HasPrefix predicate on the "apt_deb" field.
func AptDebHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAptDeb, v))
}

// AptDebHasSuffix applies the HasSuffix predicate on the "apt_deb" field.
func AptDebHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAptDeb, v))
}

// AptDebIsNil applies the IsNil predicate on the "apt_deb" field.
func AptDebIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptDeb))
}

// AptDebNotNil applies the NotNil predicate on the "apt_deb" field.
func AptDebNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptDeb))
}

// AptDebEqualFold applies the EqualFold predicate on the "apt_deb" field.
func AptDebEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAptDeb, v))
}

// AptDebContainsFold applies the ContainsFold predicate on the "apt_deb" field.
func AptDebContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAptDeb, v))
}

// AptDpkgOptionsEQ applies the EQ predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsNEQ applies the NEQ predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsIn applies the In predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAptDpkgOptions, vs...))
}

// AptDpkgOptionsNotIn applies the NotIn predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAptDpkgOptions, vs...))
}

// AptDpkgOptionsGT applies the GT predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsGTE applies the GTE predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsLT applies the LT predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsLTE applies the LTE predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsContains applies the Contains predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsHasPrefix applies the HasPrefix predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsHasSuffix applies the HasSuffix predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsIsNil applies the IsNil predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptDpkgOptions))
}

// AptDpkgOptionsNotNil applies the NotNil predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptDpkgOptions))
}

// AptDpkgOptionsEqualFold applies the EqualFold predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAptDpkgOptions, v))
}

// AptDpkgOptionsContainsFold applies the ContainsFold predicate on the "apt_dpkg_options" field.
func AptDpkgOptionsContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAptDpkgOptions, v))
}

// AptFailOnAutoremoveEQ applies the EQ predicate on the "apt_fail_on_autoremove" field.
func AptFailOnAutoremoveEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptFailOnAutoremove, v))
}

// AptFailOnAutoremoveNEQ applies the NEQ predicate on the "apt_fail_on_autoremove" field.
func AptFailOnAutoremoveNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptFailOnAutoremove, v))
}

// AptFailOnAutoremoveIsNil applies the IsNil predicate on the "apt_fail_on_autoremove" field.
func AptFailOnAutoremoveIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptFailOnAutoremove))
}

// AptFailOnAutoremoveNotNil applies the NotNil predicate on the "apt_fail_on_autoremove" field.
func AptFailOnAutoremoveNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptFailOnAutoremove))
}

// AptForceEQ applies the EQ predicate on the "apt_force" field.
func AptForceEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptForce, v))
}

// AptForceNEQ applies the NEQ predicate on the "apt_force" field.
func AptForceNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptForce, v))
}

// AptForceIsNil applies the IsNil predicate on the "apt_force" field.
func AptForceIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptForce))
}

// AptForceNotNil applies the NotNil predicate on the "apt_force" field.
func AptForceNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptForce))
}

// AptInstallRecommendsEQ applies the EQ predicate on the "apt_install_recommends" field.
func AptInstallRecommendsEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptInstallRecommends, v))
}

// AptInstallRecommendsNEQ applies the NEQ predicate on the "apt_install_recommends" field.
func AptInstallRecommendsNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptInstallRecommends, v))
}

// AptInstallRecommendsIsNil applies the IsNil predicate on the "apt_install_recommends" field.
func AptInstallRecommendsIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptInstallRecommends))
}

// AptInstallRecommendsNotNil applies the NotNil predicate on the "apt_install_recommends" field.
func AptInstallRecommendsNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptInstallRecommends))
}

// AptNameEQ applies the EQ predicate on the "apt_name" field.
func AptNameEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptName, v))
}

// AptNameNEQ applies the NEQ predicate on the "apt_name" field.
func AptNameNEQ(v string) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptName, v))
}

// AptNameIn applies the In predicate on the "apt_name" field.
func AptNameIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAptName, vs...))
}

// AptNameNotIn applies the NotIn predicate on the "apt_name" field.
func AptNameNotIn(vs ...string) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAptName, vs...))
}

// AptNameGT applies the GT predicate on the "apt_name" field.
func AptNameGT(v string) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldAptName, v))
}

// AptNameGTE applies the GTE predicate on the "apt_name" field.
func AptNameGTE(v string) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldAptName, v))
}

// AptNameLT applies the LT predicate on the "apt_name" field.
func AptNameLT(v string) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldAptName, v))
}

// AptNameLTE applies the LTE predicate on the "apt_name" field.
func AptNameLTE(v string) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldAptName, v))
}

// AptNameContains applies the Contains predicate on the "apt_name" field.
func AptNameContains(v string) predicate.Task {
	return predicate.Task(sql.FieldContains(FieldAptName, v))
}

// AptNameHasPrefix applies the HasPrefix predicate on the "apt_name" field.
func AptNameHasPrefix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasPrefix(FieldAptName, v))
}

// AptNameHasSuffix applies the HasSuffix predicate on the "apt_name" field.
func AptNameHasSuffix(v string) predicate.Task {
	return predicate.Task(sql.FieldHasSuffix(FieldAptName, v))
}

// AptNameIsNil applies the IsNil predicate on the "apt_name" field.
func AptNameIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptName))
}

// AptNameNotNil applies the NotNil predicate on the "apt_name" field.
func AptNameNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptName))
}

// AptNameEqualFold applies the EqualFold predicate on the "apt_name" field.
func AptNameEqualFold(v string) predicate.Task {
	return predicate.Task(sql.FieldEqualFold(FieldAptName, v))
}

// AptNameContainsFold applies the ContainsFold predicate on the "apt_name" field.
func AptNameContainsFold(v string) predicate.Task {
	return predicate.Task(sql.FieldContainsFold(FieldAptName, v))
}

// AptOnlyUpgradeEQ applies the EQ predicate on the "apt_only_upgrade" field.
func AptOnlyUpgradeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptOnlyUpgrade, v))
}

// AptOnlyUpgradeNEQ applies the NEQ predicate on the "apt_only_upgrade" field.
func AptOnlyUpgradeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptOnlyUpgrade, v))
}

// AptOnlyUpgradeIsNil applies the IsNil predicate on the "apt_only_upgrade" field.
func AptOnlyUpgradeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptOnlyUpgrade))
}

// AptOnlyUpgradeNotNil applies the NotNil predicate on the "apt_only_upgrade" field.
func AptOnlyUpgradeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptOnlyUpgrade))
}

// AptPurgeEQ applies the EQ predicate on the "apt_purge" field.
func AptPurgeEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptPurge, v))
}

// AptPurgeNEQ applies the NEQ predicate on the "apt_purge" field.
func AptPurgeNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptPurge, v))
}

// AptPurgeIsNil applies the IsNil predicate on the "apt_purge" field.
func AptPurgeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptPurge))
}

// AptPurgeNotNil applies the NotNil predicate on the "apt_purge" field.
func AptPurgeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptPurge))
}

// AptUpdateCacheEQ applies the EQ predicate on the "apt_update_cache" field.
func AptUpdateCacheEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptUpdateCache, v))
}

// AptUpdateCacheNEQ applies the NEQ predicate on the "apt_update_cache" field.
func AptUpdateCacheNEQ(v bool) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptUpdateCache, v))
}

// AptUpdateCacheIsNil applies the IsNil predicate on the "apt_update_cache" field.
func AptUpdateCacheIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptUpdateCache))
}

// AptUpdateCacheNotNil applies the NotNil predicate on the "apt_update_cache" field.
func AptUpdateCacheNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptUpdateCache))
}

// AptUpgradeTypeEQ applies the EQ predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeEQ(v AptUpgradeType) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldAptUpgradeType, v))
}

// AptUpgradeTypeNEQ applies the NEQ predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeNEQ(v AptUpgradeType) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldAptUpgradeType, v))
}

// AptUpgradeTypeIn applies the In predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeIn(vs ...AptUpgradeType) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldAptUpgradeType, vs...))
}

// AptUpgradeTypeNotIn applies the NotIn predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeNotIn(vs ...AptUpgradeType) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldAptUpgradeType, vs...))
}

// AptUpgradeTypeIsNil applies the IsNil predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldAptUpgradeType))
}

// AptUpgradeTypeNotNil applies the NotNil predicate on the "apt_upgrade_type" field.
func AptUpgradeTypeNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldAptUpgradeType))
}

// VersionEQ applies the EQ predicate on the "version" field.
func VersionEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldEQ(FieldVersion, v))
}

// VersionNEQ applies the NEQ predicate on the "version" field.
func VersionNEQ(v int) predicate.Task {
	return predicate.Task(sql.FieldNEQ(FieldVersion, v))
}

// VersionIn applies the In predicate on the "version" field.
func VersionIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldIn(FieldVersion, vs...))
}

// VersionNotIn applies the NotIn predicate on the "version" field.
func VersionNotIn(vs ...int) predicate.Task {
	return predicate.Task(sql.FieldNotIn(FieldVersion, vs...))
}

// VersionGT applies the GT predicate on the "version" field.
func VersionGT(v int) predicate.Task {
	return predicate.Task(sql.FieldGT(FieldVersion, v))
}

// VersionGTE applies the GTE predicate on the "version" field.
func VersionGTE(v int) predicate.Task {
	return predicate.Task(sql.FieldGTE(FieldVersion, v))
}

// VersionLT applies the LT predicate on the "version" field.
func VersionLT(v int) predicate.Task {
	return predicate.Task(sql.FieldLT(FieldVersion, v))
}

// VersionLTE applies the LTE predicate on the "version" field.
func VersionLTE(v int) predicate.Task {
	return predicate.Task(sql.FieldLTE(FieldVersion, v))
}

// VersionIsNil applies the IsNil predicate on the "version" field.
func VersionIsNil() predicate.Task {
	return predicate.Task(sql.FieldIsNull(FieldVersion))
}

// VersionNotNil applies the NotNil predicate on the "version" field.
func VersionNotNil() predicate.Task {
	return predicate.Task(sql.FieldNotNull(FieldVersion))
}

// HasTags applies the HasEdge predicate on the "tags" edge.
func HasTags() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasTagsWith applies the HasEdge predicate on the "tags" edge with a given conditions (other predicates).
func HasTagsWith(preds ...predicate.Tag) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newTagsStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// HasProfile applies the HasEdge predicate on the "profile" edge.
func HasProfile() predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasProfileWith applies the HasEdge predicate on the "profile" edge with a given conditions (other predicates).
func HasProfileWith(preds ...predicate.Profile) predicate.Task {
	return predicate.Task(func(s *sql.Selector) {
		step := newProfileStep()
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.AndPredicates(predicates...))
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Task) predicate.Task {
	return predicate.Task(sql.OrPredicates(predicates...))
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Task) predicate.Task {
	return predicate.Task(sql.NotPredicates(p))
}
