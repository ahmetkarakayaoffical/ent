// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldPackageName holds the string denoting the package_name field in the database.
	FieldPackageName = "package_name"
	// FieldRegistryKey holds the string denoting the registry_key field in the database.
	FieldRegistryKey = "registry_key"
	// FieldRegistryKeyValueName holds the string denoting the registry_key_value_name field in the database.
	FieldRegistryKeyValueName = "registry_key_value_name"
	// FieldRegistryKeyValueType holds the string denoting the registry_key_value_type field in the database.
	FieldRegistryKeyValueType = "registry_key_value_type"
	// FieldRegistryKeyValueData holds the string denoting the registry_key_value_data field in the database.
	FieldRegistryKeyValueData = "registry_key_value_data"
	// FieldRegistryHex holds the string denoting the registry_hex field in the database.
	FieldRegistryHex = "registry_hex"
	// FieldRegistryForce holds the string denoting the registry_force field in the database.
	FieldRegistryForce = "registry_force"
	// FieldWhen holds the string denoting the when field in the database.
	FieldWhen = "when"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "task_tags"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "tasks"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldPackageID,
	FieldPackageName,
	FieldRegistryKey,
	FieldRegistryKeyValueName,
	FieldRegistryKeyValueType,
	FieldRegistryKeyValueData,
	FieldRegistryHex,
	FieldRegistryForce,
	FieldWhen,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPackageID holds the default value on creation for the "package_id" field.
	DefaultPackageID string
	// DefaultPackageName holds the default value on creation for the "package_name" field.
	DefaultPackageName string
	// DefaultRegistryKey holds the default value on creation for the "registry_key" field.
	DefaultRegistryKey string
	// DefaultRegistryKeyValueName holds the default value on creation for the "registry_key_value_name" field.
	DefaultRegistryKeyValueName string
	// DefaultRegistryKeyValueData holds the default value on creation for the "registry_key_value_data" field.
	DefaultRegistryKeyValueData string
	// DefaultRegistryHex holds the default value on creation for the "registry_hex" field.
	DefaultRegistryHex bool
	// DefaultRegistryForce holds the default value on creation for the "registry_force" field.
	DefaultRegistryForce bool
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWingetInstall                 Type = "winget_install"
	TypeWingetUpdate                  Type = "winget_update"
	TypeWingetDelete                  Type = "winget_delete"
	TypeAddRegistryKey                Type = "add_registry_key"
	TypeUpdateRegistryKeyDefaultValue Type = "update_registry_key_default_value"
	TypeAddRegistryKeyValue           Type = "add_registry_key_value"
	TypeRemoveRegistryKey             Type = "remove_registry_key"
	TypeRemoveRegistryKeyValue        Type = "remove_registry_key_value"
	TypeEnvironment                   Type = "environment"
	TypePackage                       Type = "package"
	TypeRemoteFile                    Type = "remote_file"
	TypeLocalUser                     Type = "local_user"
	TypeLocalGroup                    Type = "local_group"
	TypeExecuteCommand                Type = "execute_command"
	TypeReboot                        Type = "reboot"
	TypePoweroff                      Type = "poweroff"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWingetInstall, TypeWingetUpdate, TypeWingetDelete, TypeAddRegistryKey, TypeUpdateRegistryKeyDefaultValue, TypeAddRegistryKeyValue, TypeRemoveRegistryKey, TypeRemoveRegistryKeyValue, TypeEnvironment, TypePackage, TypeRemoteFile, TypeLocalUser, TypeLocalGroup, TypeExecuteCommand, TypeReboot, TypePoweroff:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for type field: %q", _type)
	}
}

// RegistryKeyValueType defines the type for the "registry_key_value_type" enum field.
type RegistryKeyValueType string

// RegistryKeyValueType values.
const (
	RegistryKeyValueTypeString       RegistryKeyValueType = "String"
	RegistryKeyValueTypeBinary       RegistryKeyValueType = "Binary"
	RegistryKeyValueTypeDWord        RegistryKeyValueType = "DWord"
	RegistryKeyValueTypeQWord        RegistryKeyValueType = "QWord"
	RegistryKeyValueTypeMultiString  RegistryKeyValueType = "MultiString"
	RegistryKeyValueTypeExpandString RegistryKeyValueType = "ExpandString"
)

func (rkvt RegistryKeyValueType) String() string {
	return string(rkvt)
}

// RegistryKeyValueTypeValidator is a validator for the "registry_key_value_type" field enum values. It is called by the builders before save.
func RegistryKeyValueTypeValidator(rkvt RegistryKeyValueType) error {
	switch rkvt {
	case RegistryKeyValueTypeString, RegistryKeyValueTypeBinary, RegistryKeyValueTypeDWord, RegistryKeyValueTypeQWord, RegistryKeyValueTypeMultiString, RegistryKeyValueTypeExpandString:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for registry_key_value_type field: %q", rkvt)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByPackageName orders the results by the package_name field.
func ByPackageName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageName, opts...).ToFunc()
}

// ByRegistryKey orders the results by the registry_key field.
func ByRegistryKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKey, opts...).ToFunc()
}

// ByRegistryKeyValueName orders the results by the registry_key_value_name field.
func ByRegistryKeyValueName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueName, opts...).ToFunc()
}

// ByRegistryKeyValueType orders the results by the registry_key_value_type field.
func ByRegistryKeyValueType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueType, opts...).ToFunc()
}

// ByRegistryKeyValueData orders the results by the registry_key_value_data field.
func ByRegistryKeyValueData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueData, opts...).ToFunc()
}

// ByRegistryHex orders the results by the registry_hex field.
func ByRegistryHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryHex, opts...).ToFunc()
}

// ByRegistryForce orders the results by the registry_force field.
func ByRegistryForce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryForce, opts...).ToFunc()
}

// ByWhen orders the results by the when field.
func ByWhen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhen, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
