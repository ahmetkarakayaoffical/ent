// Code generated by ent, DO NOT EDIT.

package task

import (
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
)

const (
	// Label holds the string label denoting the task type in the database.
	Label = "task"
	// FieldID holds the string denoting the id field in the database.
	FieldID = "id"
	// FieldName holds the string denoting the name field in the database.
	FieldName = "name"
	// FieldType holds the string denoting the type field in the database.
	FieldType = "type"
	// FieldPackageID holds the string denoting the package_id field in the database.
	FieldPackageID = "package_id"
	// FieldPackageName holds the string denoting the package_name field in the database.
	FieldPackageName = "package_name"
	// FieldRegistryKey holds the string denoting the registry_key field in the database.
	FieldRegistryKey = "registry_key"
	// FieldRegistryKeyValueName holds the string denoting the registry_key_value_name field in the database.
	FieldRegistryKeyValueName = "registry_key_value_name"
	// FieldRegistryKeyValueType holds the string denoting the registry_key_value_type field in the database.
	FieldRegistryKeyValueType = "registry_key_value_type"
	// FieldRegistryKeyValueData holds the string denoting the registry_key_value_data field in the database.
	FieldRegistryKeyValueData = "registry_key_value_data"
	// FieldRegistryHex holds the string denoting the registry_hex field in the database.
	FieldRegistryHex = "registry_hex"
	// FieldRegistryForce holds the string denoting the registry_force field in the database.
	FieldRegistryForce = "registry_force"
	// FieldLocalUserUsername holds the string denoting the local_user_username field in the database.
	FieldLocalUserUsername = "local_user_username"
	// FieldLocalUserDescription holds the string denoting the local_user_description field in the database.
	FieldLocalUserDescription = "local_user_description"
	// FieldLocalUserDisable holds the string denoting the local_user_disable field in the database.
	FieldLocalUserDisable = "local_user_disable"
	// FieldLocalUserFullname holds the string denoting the local_user_fullname field in the database.
	FieldLocalUserFullname = "local_user_fullname"
	// FieldLocalUserPassword holds the string denoting the local_user_password field in the database.
	FieldLocalUserPassword = "local_user_password"
	// FieldLocalUserPasswordChangeNotAllowed holds the string denoting the local_user_password_change_not_allowed field in the database.
	FieldLocalUserPasswordChangeNotAllowed = "local_user_password_change_not_allowed"
	// FieldLocalUserPasswordChangeRequired holds the string denoting the local_user_password_change_required field in the database.
	FieldLocalUserPasswordChangeRequired = "local_user_password_change_required"
	// FieldLocalUserPasswordNeverExpires holds the string denoting the local_user_password_never_expires field in the database.
	FieldLocalUserPasswordNeverExpires = "local_user_password_never_expires"
	// FieldLocalUserAppend holds the string denoting the local_user_append field in the database.
	FieldLocalUserAppend = "local_user_append"
	// FieldLocalUserCreateHome holds the string denoting the local_user_create_home field in the database.
	FieldLocalUserCreateHome = "local_user_create_home"
	// FieldLocalUserExpires holds the string denoting the local_user_expires field in the database.
	FieldLocalUserExpires = "local_user_expires"
	// FieldLocalUserForce holds the string denoting the local_user_force field in the database.
	FieldLocalUserForce = "local_user_force"
	// FieldLocalUserGenerateSSHKey holds the string denoting the local_user_generate_ssh_key field in the database.
	FieldLocalUserGenerateSSHKey = "local_user_generate_ssh_key"
	// FieldLocalUserGroup holds the string denoting the local_user_group field in the database.
	FieldLocalUserGroup = "local_user_group"
	// FieldLocalUserGroups holds the string denoting the local_user_groups field in the database.
	FieldLocalUserGroups = "local_user_groups"
	// FieldLocalUserHome holds the string denoting the local_user_home field in the database.
	FieldLocalUserHome = "local_user_home"
	// FieldLocalUserMoveHome holds the string denoting the local_user_move_home field in the database.
	FieldLocalUserMoveHome = "local_user_move_home"
	// FieldLocalUserNonunique holds the string denoting the local_user_nonunique field in the database.
	FieldLocalUserNonunique = "local_user_nonunique"
	// FieldLocalUserPasswordExpireAccountDisable holds the string denoting the local_user_password_expire_account_disable field in the database.
	FieldLocalUserPasswordExpireAccountDisable = "local_user_password_expire_account_disable"
	// FieldLocalUserPasswordExpireMax holds the string denoting the local_user_password_expire_max field in the database.
	FieldLocalUserPasswordExpireMax = "local_user_password_expire_max"
	// FieldLocalUserPasswordExpireMin holds the string denoting the local_user_password_expire_min field in the database.
	FieldLocalUserPasswordExpireMin = "local_user_password_expire_min"
	// FieldLocalUserPasswordExpireWarn holds the string denoting the local_user_password_expire_warn field in the database.
	FieldLocalUserPasswordExpireWarn = "local_user_password_expire_warn"
	// FieldLocalUserPasswordLock holds the string denoting the local_user_password_lock field in the database.
	FieldLocalUserPasswordLock = "local_user_password_lock"
	// FieldLocalUserSeuser holds the string denoting the local_user_seuser field in the database.
	FieldLocalUserSeuser = "local_user_seuser"
	// FieldLocalUserShell holds the string denoting the local_user_shell field in the database.
	FieldLocalUserShell = "local_user_shell"
	// FieldLocalUserSkeleton holds the string denoting the local_user_skeleton field in the database.
	FieldLocalUserSkeleton = "local_user_skeleton"
	// FieldLocalUserSystem holds the string denoting the local_user_system field in the database.
	FieldLocalUserSystem = "local_user_system"
	// FieldLocalUserID holds the string denoting the local_user_id field in the database.
	FieldLocalUserID = "local_user_id"
	// FieldLocalUserIDMax holds the string denoting the local_user_id_max field in the database.
	FieldLocalUserIDMax = "local_user_id_max"
	// FieldLocalUserIDMin holds the string denoting the local_user_id_min field in the database.
	FieldLocalUserIDMin = "local_user_id_min"
	// FieldLocalUserSSHKeyBits holds the string denoting the local_user_ssh_key_bits field in the database.
	FieldLocalUserSSHKeyBits = "local_user_ssh_key_bits"
	// FieldLocalUserSSHKeyComment holds the string denoting the local_user_ssh_key_comment field in the database.
	FieldLocalUserSSHKeyComment = "local_user_ssh_key_comment"
	// FieldLocalUserSSHKeyFile holds the string denoting the local_user_ssh_key_file field in the database.
	FieldLocalUserSSHKeyFile = "local_user_ssh_key_file"
	// FieldLocalUserSSHKeyPassphrase holds the string denoting the local_user_ssh_key_passphrase field in the database.
	FieldLocalUserSSHKeyPassphrase = "local_user_ssh_key_passphrase"
	// FieldLocalUserSSHKeyType holds the string denoting the local_user_ssh_key_type field in the database.
	FieldLocalUserSSHKeyType = "local_user_ssh_key_type"
	// FieldLocalUserUmask holds the string denoting the local_user_umask field in the database.
	FieldLocalUserUmask = "local_user_umask"
	// FieldLocalGroupID holds the string denoting the local_group_id field in the database.
	FieldLocalGroupID = "local_group_id"
	// FieldLocalGroupName holds the string denoting the local_group_name field in the database.
	FieldLocalGroupName = "local_group_name"
	// FieldLocalGroupDescription holds the string denoting the local_group_description field in the database.
	FieldLocalGroupDescription = "local_group_description"
	// FieldLocalGroupSystem holds the string denoting the local_group_system field in the database.
	FieldLocalGroupSystem = "local_group_system"
	// FieldLocalGroupForce holds the string denoting the local_group_force field in the database.
	FieldLocalGroupForce = "local_group_force"
	// FieldLocalGroupMembers holds the string denoting the local_group_members field in the database.
	FieldLocalGroupMembers = "local_group_members"
	// FieldLocalGroupMembersToInclude holds the string denoting the local_group_members_to_include field in the database.
	FieldLocalGroupMembersToInclude = "local_group_members_to_include"
	// FieldLocalGroupMembersToExclude holds the string denoting the local_group_members_to_exclude field in the database.
	FieldLocalGroupMembersToExclude = "local_group_members_to_exclude"
	// FieldMsiProductid holds the string denoting the msi_productid field in the database.
	FieldMsiProductid = "msi_productid"
	// FieldMsiPath holds the string denoting the msi_path field in the database.
	FieldMsiPath = "msi_path"
	// FieldMsiArguments holds the string denoting the msi_arguments field in the database.
	FieldMsiArguments = "msi_arguments"
	// FieldMsiFileHash holds the string denoting the msi_file_hash field in the database.
	FieldMsiFileHash = "msi_file_hash"
	// FieldMsiFileHashAlg holds the string denoting the msi_file_hash_alg field in the database.
	FieldMsiFileHashAlg = "msi_file_hash_alg"
	// FieldMsiLogPath holds the string denoting the msi_log_path field in the database.
	FieldMsiLogPath = "msi_log_path"
	// FieldScript holds the string denoting the script field in the database.
	FieldScript = "script"
	// FieldScriptExecutable holds the string denoting the script_executable field in the database.
	FieldScriptExecutable = "script_executable"
	// FieldScriptRun holds the string denoting the script_run field in the database.
	FieldScriptRun = "script_run"
	// FieldAgentType holds the string denoting the agent_type field in the database.
	FieldAgentType = "agent_type"
	// FieldWhen holds the string denoting the when field in the database.
	FieldWhen = "when"
	// EdgeTags holds the string denoting the tags edge name in mutations.
	EdgeTags = "tags"
	// EdgeProfile holds the string denoting the profile edge name in mutations.
	EdgeProfile = "profile"
	// Table holds the table name of the task in the database.
	Table = "tasks"
	// TagsTable is the table that holds the tags relation/edge.
	TagsTable = "tags"
	// TagsInverseTable is the table name for the Tag entity.
	// It exists in this package in order to avoid circular dependency with the "tag" package.
	TagsInverseTable = "tags"
	// TagsColumn is the table column denoting the tags relation/edge.
	TagsColumn = "task_tags"
	// ProfileTable is the table that holds the profile relation/edge.
	ProfileTable = "tasks"
	// ProfileInverseTable is the table name for the Profile entity.
	// It exists in this package in order to avoid circular dependency with the "profile" package.
	ProfileInverseTable = "profiles"
	// ProfileColumn is the table column denoting the profile relation/edge.
	ProfileColumn = "profile_tasks"
)

// Columns holds all SQL columns for task fields.
var Columns = []string{
	FieldID,
	FieldName,
	FieldType,
	FieldPackageID,
	FieldPackageName,
	FieldRegistryKey,
	FieldRegistryKeyValueName,
	FieldRegistryKeyValueType,
	FieldRegistryKeyValueData,
	FieldRegistryHex,
	FieldRegistryForce,
	FieldLocalUserUsername,
	FieldLocalUserDescription,
	FieldLocalUserDisable,
	FieldLocalUserFullname,
	FieldLocalUserPassword,
	FieldLocalUserPasswordChangeNotAllowed,
	FieldLocalUserPasswordChangeRequired,
	FieldLocalUserPasswordNeverExpires,
	FieldLocalUserAppend,
	FieldLocalUserCreateHome,
	FieldLocalUserExpires,
	FieldLocalUserForce,
	FieldLocalUserGenerateSSHKey,
	FieldLocalUserGroup,
	FieldLocalUserGroups,
	FieldLocalUserHome,
	FieldLocalUserMoveHome,
	FieldLocalUserNonunique,
	FieldLocalUserPasswordExpireAccountDisable,
	FieldLocalUserPasswordExpireMax,
	FieldLocalUserPasswordExpireMin,
	FieldLocalUserPasswordExpireWarn,
	FieldLocalUserPasswordLock,
	FieldLocalUserSeuser,
	FieldLocalUserShell,
	FieldLocalUserSkeleton,
	FieldLocalUserSystem,
	FieldLocalUserID,
	FieldLocalUserIDMax,
	FieldLocalUserIDMin,
	FieldLocalUserSSHKeyBits,
	FieldLocalUserSSHKeyComment,
	FieldLocalUserSSHKeyFile,
	FieldLocalUserSSHKeyPassphrase,
	FieldLocalUserSSHKeyType,
	FieldLocalUserUmask,
	FieldLocalGroupID,
	FieldLocalGroupName,
	FieldLocalGroupDescription,
	FieldLocalGroupSystem,
	FieldLocalGroupForce,
	FieldLocalGroupMembers,
	FieldLocalGroupMembersToInclude,
	FieldLocalGroupMembersToExclude,
	FieldMsiProductid,
	FieldMsiPath,
	FieldMsiArguments,
	FieldMsiFileHash,
	FieldMsiFileHashAlg,
	FieldMsiLogPath,
	FieldScript,
	FieldScriptExecutable,
	FieldScriptRun,
	FieldAgentType,
	FieldWhen,
}

// ForeignKeys holds the SQL foreign-keys that are owned by the "tasks"
// table and are not defined as standalone fields in the schema.
var ForeignKeys = []string{
	"profile_tasks",
}

// ValidColumn reports if the column name is valid (part of the table columns).
func ValidColumn(column string) bool {
	for i := range Columns {
		if column == Columns[i] {
			return true
		}
	}
	for i := range ForeignKeys {
		if column == ForeignKeys[i] {
			return true
		}
	}
	return false
}

var (
	// NameValidator is a validator for the "name" field. It is called by the builders before save.
	NameValidator func(string) error
	// DefaultPackageID holds the default value on creation for the "package_id" field.
	DefaultPackageID string
	// DefaultPackageName holds the default value on creation for the "package_name" field.
	DefaultPackageName string
	// DefaultRegistryKey holds the default value on creation for the "registry_key" field.
	DefaultRegistryKey string
	// DefaultRegistryKeyValueName holds the default value on creation for the "registry_key_value_name" field.
	DefaultRegistryKeyValueName string
	// DefaultRegistryKeyValueData holds the default value on creation for the "registry_key_value_data" field.
	DefaultRegistryKeyValueData string
	// DefaultRegistryHex holds the default value on creation for the "registry_hex" field.
	DefaultRegistryHex bool
	// DefaultRegistryForce holds the default value on creation for the "registry_force" field.
	DefaultRegistryForce bool
	// DefaultLocalUserUsername holds the default value on creation for the "local_user_username" field.
	DefaultLocalUserUsername string
	// DefaultLocalUserDescription holds the default value on creation for the "local_user_description" field.
	DefaultLocalUserDescription string
	// DefaultLocalUserDisable holds the default value on creation for the "local_user_disable" field.
	DefaultLocalUserDisable bool
	// DefaultLocalUserFullname holds the default value on creation for the "local_user_fullname" field.
	DefaultLocalUserFullname string
	// DefaultLocalUserPassword holds the default value on creation for the "local_user_password" field.
	DefaultLocalUserPassword string
	// DefaultLocalUserPasswordChangeNotAllowed holds the default value on creation for the "local_user_password_change_not_allowed" field.
	DefaultLocalUserPasswordChangeNotAllowed bool
	// DefaultLocalUserPasswordChangeRequired holds the default value on creation for the "local_user_password_change_required" field.
	DefaultLocalUserPasswordChangeRequired bool
	// DefaultLocalUserPasswordNeverExpires holds the default value on creation for the "local_user_password_never_expires" field.
	DefaultLocalUserPasswordNeverExpires bool
	// DefaultLocalUserAppend holds the default value on creation for the "local_user_append" field.
	DefaultLocalUserAppend bool
	// DefaultLocalUserCreateHome holds the default value on creation for the "local_user_create_home" field.
	DefaultLocalUserCreateHome bool
	// DefaultLocalUserForce holds the default value on creation for the "local_user_force" field.
	DefaultLocalUserForce bool
	// DefaultLocalUserGenerateSSHKey holds the default value on creation for the "local_user_generate_ssh_key" field.
	DefaultLocalUserGenerateSSHKey bool
	// DefaultLocalUserMoveHome holds the default value on creation for the "local_user_move_home" field.
	DefaultLocalUserMoveHome bool
	// DefaultLocalUserNonunique holds the default value on creation for the "local_user_nonunique" field.
	DefaultLocalUserNonunique bool
	// DefaultLocalUserPasswordLock holds the default value on creation for the "local_user_password_lock" field.
	DefaultLocalUserPasswordLock bool
	// DefaultLocalUserSystem holds the default value on creation for the "local_user_system" field.
	DefaultLocalUserSystem bool
	// DefaultLocalUserSSHKeyType holds the default value on creation for the "local_user_ssh_key_type" field.
	DefaultLocalUserSSHKeyType string
	// DefaultLocalGroupID holds the default value on creation for the "local_group_id" field.
	DefaultLocalGroupID string
	// DefaultLocalGroupName holds the default value on creation for the "local_group_name" field.
	DefaultLocalGroupName string
	// DefaultLocalGroupDescription holds the default value on creation for the "local_group_description" field.
	DefaultLocalGroupDescription string
	// DefaultLocalGroupSystem holds the default value on creation for the "local_group_system" field.
	DefaultLocalGroupSystem bool
	// DefaultLocalGroupForce holds the default value on creation for the "local_group_force" field.
	DefaultLocalGroupForce bool
	// DefaultLocalGroupMembers holds the default value on creation for the "local_group_members" field.
	DefaultLocalGroupMembers string
	// DefaultLocalGroupMembersToInclude holds the default value on creation for the "local_group_members_to_include" field.
	DefaultLocalGroupMembersToInclude string
	// DefaultLocalGroupMembersToExclude holds the default value on creation for the "local_group_members_to_exclude" field.
	DefaultLocalGroupMembersToExclude string
	// DefaultMsiProductid holds the default value on creation for the "msi_productid" field.
	DefaultMsiProductid string
	// DefaultMsiPath holds the default value on creation for the "msi_path" field.
	DefaultMsiPath string
	// DefaultMsiArguments holds the default value on creation for the "msi_arguments" field.
	DefaultMsiArguments string
	// DefaultMsiFileHash holds the default value on creation for the "msi_file_hash" field.
	DefaultMsiFileHash string
	// DefaultMsiLogPath holds the default value on creation for the "msi_log_path" field.
	DefaultMsiLogPath string
	// DefaultScript holds the default value on creation for the "script" field.
	DefaultScript string
	// DefaultScriptExecutable holds the default value on creation for the "script_executable" field.
	DefaultScriptExecutable string
)

// Type defines the type for the "type" enum field.
type Type string

// Type values.
const (
	TypeWingetInstall                 Type = "winget_install"
	TypeWingetUpdate                  Type = "winget_update"
	TypeWingetDelete                  Type = "winget_delete"
	TypeAddRegistryKey                Type = "add_registry_key"
	TypeUpdateRegistryKeyDefaultValue Type = "update_registry_key_default_value"
	TypeAddRegistryKeyValue           Type = "add_registry_key_value"
	TypeRemoveRegistryKey             Type = "remove_registry_key"
	TypeRemoveRegistryKeyValue        Type = "remove_registry_key_value"
	TypeAddLocalUser                  Type = "add_local_user"
	TypeRemoveLocalUser               Type = "remove_local_user"
	TypeAddLinuxLocalUser             Type = "add_linux_local_user"
	TypeModifyLinuxLocalUser          Type = "modify_linux_local_user"
	TypeRemoveLinuxLocalUser          Type = "remove_linux_local_user"
	TypeAddMacosLocalUser             Type = "add_macos_local_user"
	TypeRemoveMacosLocalUser          Type = "remove_macos_local_user"
	TypeAddLocalGroup                 Type = "add_local_group"
	TypeRemoveLocalGroup              Type = "remove_local_group"
	TypeAddUnixLocalGroup             Type = "add_unix_local_group"
	TypeRemoveUnixLocalGroup          Type = "remove_unix_local_group"
	TypeAddUsersToLocalGroup          Type = "add_users_to_local_group"
	TypeRemoveUsersFromLocalGroup     Type = "remove_users_from_local_group"
	TypeMsiInstall                    Type = "msi_install"
	TypeMsiUninstall                  Type = "msi_uninstall"
	TypePowershellScript              Type = "powershell_script"
	TypeUnixScript                    Type = "unix_script"
)

func (_type Type) String() string {
	return string(_type)
}

// TypeValidator is a validator for the "type" field enum values. It is called by the builders before save.
func TypeValidator(_type Type) error {
	switch _type {
	case TypeWingetInstall, TypeWingetUpdate, TypeWingetDelete, TypeAddRegistryKey, TypeUpdateRegistryKeyDefaultValue, TypeAddRegistryKeyValue, TypeRemoveRegistryKey, TypeRemoveRegistryKeyValue, TypeAddLocalUser, TypeRemoveLocalUser, TypeAddLinuxLocalUser, TypeModifyLinuxLocalUser, TypeRemoveLinuxLocalUser, TypeAddMacosLocalUser, TypeRemoveMacosLocalUser, TypeAddLocalGroup, TypeRemoveLocalGroup, TypeAddUnixLocalGroup, TypeRemoveUnixLocalGroup, TypeAddUsersToLocalGroup, TypeRemoveUsersFromLocalGroup, TypeMsiInstall, TypeMsiUninstall, TypePowershellScript, TypeUnixScript:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for type field: %q", _type)
	}
}

// RegistryKeyValueType defines the type for the "registry_key_value_type" enum field.
type RegistryKeyValueType string

// RegistryKeyValueType values.
const (
	RegistryKeyValueTypeString       RegistryKeyValueType = "String"
	RegistryKeyValueTypeBinary       RegistryKeyValueType = "Binary"
	RegistryKeyValueTypeDWord        RegistryKeyValueType = "DWord"
	RegistryKeyValueTypeQWord        RegistryKeyValueType = "QWord"
	RegistryKeyValueTypeMultiString  RegistryKeyValueType = "MultiString"
	RegistryKeyValueTypeExpandString RegistryKeyValueType = "ExpandString"
)

func (rkvt RegistryKeyValueType) String() string {
	return string(rkvt)
}

// RegistryKeyValueTypeValidator is a validator for the "registry_key_value_type" field enum values. It is called by the builders before save.
func RegistryKeyValueTypeValidator(rkvt RegistryKeyValueType) error {
	switch rkvt {
	case RegistryKeyValueTypeString, RegistryKeyValueTypeBinary, RegistryKeyValueTypeDWord, RegistryKeyValueTypeQWord, RegistryKeyValueTypeMultiString, RegistryKeyValueTypeExpandString:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for registry_key_value_type field: %q", rkvt)
	}
}

// MsiFileHashAlg defines the type for the "msi_file_hash_alg" enum field.
type MsiFileHashAlg string

// MsiFileHashAlg values.
const (
	MsiFileHashAlgMD5       MsiFileHashAlg = "MD5"
	MsiFileHashAlgRIPEMD160 MsiFileHashAlg = "RIPEMD160"
	MsiFileHashAlgSHA1      MsiFileHashAlg = "SHA1"
	MsiFileHashAlgSHA256    MsiFileHashAlg = "SHA256"
	MsiFileHashAlgSHA384    MsiFileHashAlg = "SHA384"
	MsiFileHashAlgSHA512    MsiFileHashAlg = "SHA512"
)

func (mfha MsiFileHashAlg) String() string {
	return string(mfha)
}

// MsiFileHashAlgValidator is a validator for the "msi_file_hash_alg" field enum values. It is called by the builders before save.
func MsiFileHashAlgValidator(mfha MsiFileHashAlg) error {
	switch mfha {
	case MsiFileHashAlgMD5, MsiFileHashAlgRIPEMD160, MsiFileHashAlgSHA1, MsiFileHashAlgSHA256, MsiFileHashAlgSHA384, MsiFileHashAlgSHA512:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for msi_file_hash_alg field: %q", mfha)
	}
}

// ScriptRun defines the type for the "script_run" enum field.
type ScriptRun string

// ScriptRun values.
const (
	ScriptRunOnce   ScriptRun = "once"
	ScriptRunAlways ScriptRun = "always"
)

func (sr ScriptRun) String() string {
	return string(sr)
}

// ScriptRunValidator is a validator for the "script_run" field enum values. It is called by the builders before save.
func ScriptRunValidator(sr ScriptRun) error {
	switch sr {
	case ScriptRunOnce, ScriptRunAlways:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for script_run field: %q", sr)
	}
}

// AgentType defines the type for the "agent_type" enum field.
type AgentType string

// AgentTypeWindows is the default value of the AgentType enum.
const DefaultAgentType = AgentTypeWindows

// AgentType values.
const (
	AgentTypeWindows AgentType = "windows"
	AgentTypeLinux   AgentType = "linux"
	AgentTypeMacos   AgentType = "macos"
)

func (at AgentType) String() string {
	return string(at)
}

// AgentTypeValidator is a validator for the "agent_type" field enum values. It is called by the builders before save.
func AgentTypeValidator(at AgentType) error {
	switch at {
	case AgentTypeWindows, AgentTypeLinux, AgentTypeMacos:
		return nil
	default:
		return fmt.Errorf("task: invalid enum value for agent_type field: %q", at)
	}
}

// OrderOption defines the ordering options for the Task queries.
type OrderOption func(*sql.Selector)

// ByID orders the results by the id field.
func ByID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldID, opts...).ToFunc()
}

// ByName orders the results by the name field.
func ByName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldName, opts...).ToFunc()
}

// ByType orders the results by the type field.
func ByType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldType, opts...).ToFunc()
}

// ByPackageID orders the results by the package_id field.
func ByPackageID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageID, opts...).ToFunc()
}

// ByPackageName orders the results by the package_name field.
func ByPackageName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldPackageName, opts...).ToFunc()
}

// ByRegistryKey orders the results by the registry_key field.
func ByRegistryKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKey, opts...).ToFunc()
}

// ByRegistryKeyValueName orders the results by the registry_key_value_name field.
func ByRegistryKeyValueName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueName, opts...).ToFunc()
}

// ByRegistryKeyValueType orders the results by the registry_key_value_type field.
func ByRegistryKeyValueType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueType, opts...).ToFunc()
}

// ByRegistryKeyValueData orders the results by the registry_key_value_data field.
func ByRegistryKeyValueData(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryKeyValueData, opts...).ToFunc()
}

// ByRegistryHex orders the results by the registry_hex field.
func ByRegistryHex(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryHex, opts...).ToFunc()
}

// ByRegistryForce orders the results by the registry_force field.
func ByRegistryForce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldRegistryForce, opts...).ToFunc()
}

// ByLocalUserUsername orders the results by the local_user_username field.
func ByLocalUserUsername(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserUsername, opts...).ToFunc()
}

// ByLocalUserDescription orders the results by the local_user_description field.
func ByLocalUserDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserDescription, opts...).ToFunc()
}

// ByLocalUserDisable orders the results by the local_user_disable field.
func ByLocalUserDisable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserDisable, opts...).ToFunc()
}

// ByLocalUserFullname orders the results by the local_user_fullname field.
func ByLocalUserFullname(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserFullname, opts...).ToFunc()
}

// ByLocalUserPassword orders the results by the local_user_password field.
func ByLocalUserPassword(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPassword, opts...).ToFunc()
}

// ByLocalUserPasswordChangeNotAllowed orders the results by the local_user_password_change_not_allowed field.
func ByLocalUserPasswordChangeNotAllowed(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordChangeNotAllowed, opts...).ToFunc()
}

// ByLocalUserPasswordChangeRequired orders the results by the local_user_password_change_required field.
func ByLocalUserPasswordChangeRequired(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordChangeRequired, opts...).ToFunc()
}

// ByLocalUserPasswordNeverExpires orders the results by the local_user_password_never_expires field.
func ByLocalUserPasswordNeverExpires(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordNeverExpires, opts...).ToFunc()
}

// ByLocalUserAppend orders the results by the local_user_append field.
func ByLocalUserAppend(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserAppend, opts...).ToFunc()
}

// ByLocalUserCreateHome orders the results by the local_user_create_home field.
func ByLocalUserCreateHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserCreateHome, opts...).ToFunc()
}

// ByLocalUserExpires orders the results by the local_user_expires field.
func ByLocalUserExpires(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserExpires, opts...).ToFunc()
}

// ByLocalUserForce orders the results by the local_user_force field.
func ByLocalUserForce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserForce, opts...).ToFunc()
}

// ByLocalUserGenerateSSHKey orders the results by the local_user_generate_ssh_key field.
func ByLocalUserGenerateSSHKey(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserGenerateSSHKey, opts...).ToFunc()
}

// ByLocalUserGroup orders the results by the local_user_group field.
func ByLocalUserGroup(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserGroup, opts...).ToFunc()
}

// ByLocalUserGroups orders the results by the local_user_groups field.
func ByLocalUserGroups(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserGroups, opts...).ToFunc()
}

// ByLocalUserHome orders the results by the local_user_home field.
func ByLocalUserHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserHome, opts...).ToFunc()
}

// ByLocalUserMoveHome orders the results by the local_user_move_home field.
func ByLocalUserMoveHome(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserMoveHome, opts...).ToFunc()
}

// ByLocalUserNonunique orders the results by the local_user_nonunique field.
func ByLocalUserNonunique(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserNonunique, opts...).ToFunc()
}

// ByLocalUserPasswordExpireAccountDisable orders the results by the local_user_password_expire_account_disable field.
func ByLocalUserPasswordExpireAccountDisable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordExpireAccountDisable, opts...).ToFunc()
}

// ByLocalUserPasswordExpireMax orders the results by the local_user_password_expire_max field.
func ByLocalUserPasswordExpireMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordExpireMax, opts...).ToFunc()
}

// ByLocalUserPasswordExpireMin orders the results by the local_user_password_expire_min field.
func ByLocalUserPasswordExpireMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordExpireMin, opts...).ToFunc()
}

// ByLocalUserPasswordExpireWarn orders the results by the local_user_password_expire_warn field.
func ByLocalUserPasswordExpireWarn(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordExpireWarn, opts...).ToFunc()
}

// ByLocalUserPasswordLock orders the results by the local_user_password_lock field.
func ByLocalUserPasswordLock(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserPasswordLock, opts...).ToFunc()
}

// ByLocalUserSeuser orders the results by the local_user_seuser field.
func ByLocalUserSeuser(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSeuser, opts...).ToFunc()
}

// ByLocalUserShell orders the results by the local_user_shell field.
func ByLocalUserShell(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserShell, opts...).ToFunc()
}

// ByLocalUserSkeleton orders the results by the local_user_skeleton field.
func ByLocalUserSkeleton(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSkeleton, opts...).ToFunc()
}

// ByLocalUserSystem orders the results by the local_user_system field.
func ByLocalUserSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSystem, opts...).ToFunc()
}

// ByLocalUserID orders the results by the local_user_id field.
func ByLocalUserID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserID, opts...).ToFunc()
}

// ByLocalUserIDMax orders the results by the local_user_id_max field.
func ByLocalUserIDMax(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserIDMax, opts...).ToFunc()
}

// ByLocalUserIDMin orders the results by the local_user_id_min field.
func ByLocalUserIDMin(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserIDMin, opts...).ToFunc()
}

// ByLocalUserSSHKeyBits orders the results by the local_user_ssh_key_bits field.
func ByLocalUserSSHKeyBits(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSSHKeyBits, opts...).ToFunc()
}

// ByLocalUserSSHKeyComment orders the results by the local_user_ssh_key_comment field.
func ByLocalUserSSHKeyComment(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSSHKeyComment, opts...).ToFunc()
}

// ByLocalUserSSHKeyFile orders the results by the local_user_ssh_key_file field.
func ByLocalUserSSHKeyFile(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSSHKeyFile, opts...).ToFunc()
}

// ByLocalUserSSHKeyPassphrase orders the results by the local_user_ssh_key_passphrase field.
func ByLocalUserSSHKeyPassphrase(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSSHKeyPassphrase, opts...).ToFunc()
}

// ByLocalUserSSHKeyType orders the results by the local_user_ssh_key_type field.
func ByLocalUserSSHKeyType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserSSHKeyType, opts...).ToFunc()
}

// ByLocalUserUmask orders the results by the local_user_umask field.
func ByLocalUserUmask(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalUserUmask, opts...).ToFunc()
}

// ByLocalGroupID orders the results by the local_group_id field.
func ByLocalGroupID(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupID, opts...).ToFunc()
}

// ByLocalGroupName orders the results by the local_group_name field.
func ByLocalGroupName(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupName, opts...).ToFunc()
}

// ByLocalGroupDescription orders the results by the local_group_description field.
func ByLocalGroupDescription(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupDescription, opts...).ToFunc()
}

// ByLocalGroupSystem orders the results by the local_group_system field.
func ByLocalGroupSystem(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupSystem, opts...).ToFunc()
}

// ByLocalGroupForce orders the results by the local_group_force field.
func ByLocalGroupForce(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupForce, opts...).ToFunc()
}

// ByLocalGroupMembers orders the results by the local_group_members field.
func ByLocalGroupMembers(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupMembers, opts...).ToFunc()
}

// ByLocalGroupMembersToInclude orders the results by the local_group_members_to_include field.
func ByLocalGroupMembersToInclude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupMembersToInclude, opts...).ToFunc()
}

// ByLocalGroupMembersToExclude orders the results by the local_group_members_to_exclude field.
func ByLocalGroupMembersToExclude(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldLocalGroupMembersToExclude, opts...).ToFunc()
}

// ByMsiProductid orders the results by the msi_productid field.
func ByMsiProductid(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiProductid, opts...).ToFunc()
}

// ByMsiPath orders the results by the msi_path field.
func ByMsiPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiPath, opts...).ToFunc()
}

// ByMsiArguments orders the results by the msi_arguments field.
func ByMsiArguments(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiArguments, opts...).ToFunc()
}

// ByMsiFileHash orders the results by the msi_file_hash field.
func ByMsiFileHash(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiFileHash, opts...).ToFunc()
}

// ByMsiFileHashAlg orders the results by the msi_file_hash_alg field.
func ByMsiFileHashAlg(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiFileHashAlg, opts...).ToFunc()
}

// ByMsiLogPath orders the results by the msi_log_path field.
func ByMsiLogPath(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldMsiLogPath, opts...).ToFunc()
}

// ByScript orders the results by the script field.
func ByScript(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScript, opts...).ToFunc()
}

// ByScriptExecutable orders the results by the script_executable field.
func ByScriptExecutable(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptExecutable, opts...).ToFunc()
}

// ByScriptRun orders the results by the script_run field.
func ByScriptRun(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldScriptRun, opts...).ToFunc()
}

// ByAgentType orders the results by the agent_type field.
func ByAgentType(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldAgentType, opts...).ToFunc()
}

// ByWhen orders the results by the when field.
func ByWhen(opts ...sql.OrderTermOption) OrderOption {
	return sql.OrderByField(FieldWhen, opts...).ToFunc()
}

// ByTagsCount orders the results by tags count.
func ByTagsCount(opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborsCount(s, newTagsStep(), opts...)
	}
}

// ByTags orders the results by tags terms.
func ByTags(term sql.OrderTerm, terms ...sql.OrderTerm) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newTagsStep(), append([]sql.OrderTerm{term}, terms...)...)
	}
}

// ByProfileField orders the results by profile field.
func ByProfileField(field string, opts ...sql.OrderTermOption) OrderOption {
	return func(s *sql.Selector) {
		sqlgraph.OrderByNeighborTerms(s, newProfileStep(), sql.OrderByField(field, opts...))
	}
}
func newTagsStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(TagsInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.O2M, false, TagsTable, TagsColumn),
	)
}
func newProfileStep() *sqlgraph.Step {
	return sqlgraph.NewStep(
		sqlgraph.From(Table, FieldID),
		sqlgraph.To(ProfileInverseTable, FieldID),
		sqlgraph.Edge(sqlgraph.M2O, true, ProfileTable, ProfileColumn),
	)
}
