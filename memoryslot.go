// Code generated by ent, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/memoryslot"
)

// MemorySlot is the model entity for the MemorySlot schema.
type MemorySlot struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Slot holds the value of the "slot" field.
	Slot string `json:"slot,omitempty"`
	// Size holds the value of the "size" field.
	Size string `json:"size,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// SerialNumber holds the value of the "serial_number" field.
	SerialNumber string `json:"serial_number,omitempty"`
	// PartNumber holds the value of the "part_number" field.
	PartNumber string `json:"part_number,omitempty"`
	// Speed holds the value of the "speed" field.
	Speed string `json:"speed,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the MemorySlotQuery when eager-loading is set.
	Edges             MemorySlotEdges `json:"edges"`
	agent_memoryslots *string
	selectValues      sql.SelectValues
}

// MemorySlotEdges holds the relations/edges for other nodes in the graph.
type MemorySlotEdges struct {
	// Owner holds the value of the owner edge.
	Owner *Agent `json:"owner,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// OwnerOrErr returns the Owner value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e MemorySlotEdges) OwnerOrErr() (*Agent, error) {
	if e.Owner != nil {
		return e.Owner, nil
	} else if e.loadedTypes[0] {
		return nil, &NotFoundError{label: agent.Label}
	}
	return nil, &NotLoadedError{edge: "owner"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*MemorySlot) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case memoryslot.FieldID:
			values[i] = new(sql.NullInt64)
		case memoryslot.FieldSlot, memoryslot.FieldSize, memoryslot.FieldType, memoryslot.FieldSerialNumber, memoryslot.FieldPartNumber, memoryslot.FieldSpeed:
			values[i] = new(sql.NullString)
		case memoryslot.ForeignKeys[0]: // agent_memoryslots
			values[i] = new(sql.NullString)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the MemorySlot fields.
func (ms *MemorySlot) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case memoryslot.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			ms.ID = int(value.Int64)
		case memoryslot.FieldSlot:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field slot", values[i])
			} else if value.Valid {
				ms.Slot = value.String
			}
		case memoryslot.FieldSize:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field size", values[i])
			} else if value.Valid {
				ms.Size = value.String
			}
		case memoryslot.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				ms.Type = value.String
			}
		case memoryslot.FieldSerialNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field serial_number", values[i])
			} else if value.Valid {
				ms.SerialNumber = value.String
			}
		case memoryslot.FieldPartNumber:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field part_number", values[i])
			} else if value.Valid {
				ms.PartNumber = value.String
			}
		case memoryslot.FieldSpeed:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field speed", values[i])
			} else if value.Valid {
				ms.Speed = value.String
			}
		case memoryslot.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field agent_memoryslots", values[i])
			} else if value.Valid {
				ms.agent_memoryslots = new(string)
				*ms.agent_memoryslots = value.String
			}
		default:
			ms.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the MemorySlot.
// This includes values selected through modifiers, order, etc.
func (ms *MemorySlot) Value(name string) (ent.Value, error) {
	return ms.selectValues.Get(name)
}

// QueryOwner queries the "owner" edge of the MemorySlot entity.
func (ms *MemorySlot) QueryOwner() *AgentQuery {
	return NewMemorySlotClient(ms.config).QueryOwner(ms)
}

// Update returns a builder for updating this MemorySlot.
// Note that you need to call MemorySlot.Unwrap() before calling this method if this MemorySlot
// was returned from a transaction, and the transaction was committed or rolled back.
func (ms *MemorySlot) Update() *MemorySlotUpdateOne {
	return NewMemorySlotClient(ms.config).UpdateOne(ms)
}

// Unwrap unwraps the MemorySlot entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (ms *MemorySlot) Unwrap() *MemorySlot {
	_tx, ok := ms.config.driver.(*txDriver)
	if !ok {
		panic("ent: MemorySlot is not a transactional entity")
	}
	ms.config.driver = _tx.drv
	return ms
}

// String implements the fmt.Stringer.
func (ms *MemorySlot) String() string {
	var builder strings.Builder
	builder.WriteString("MemorySlot(")
	builder.WriteString(fmt.Sprintf("id=%v, ", ms.ID))
	builder.WriteString("slot=")
	builder.WriteString(ms.Slot)
	builder.WriteString(", ")
	builder.WriteString("size=")
	builder.WriteString(ms.Size)
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(ms.Type)
	builder.WriteString(", ")
	builder.WriteString("serial_number=")
	builder.WriteString(ms.SerialNumber)
	builder.WriteString(", ")
	builder.WriteString("part_number=")
	builder.WriteString(ms.PartNumber)
	builder.WriteString(", ")
	builder.WriteString("speed=")
	builder.WriteString(ms.Speed)
	builder.WriteByte(')')
	return builder.String()
}

// MemorySlots is a parsable slice of MemorySlot.
type MemorySlots []*MemorySlot
