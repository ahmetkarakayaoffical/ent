// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/profile"
	"github.com/open-uem/ent/tag"
	"github.com/open-uem/ent/task"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(t task.Type) *TaskUpdate {
	tu.mutation.SetType(t)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(t *task.Type) *TaskUpdate {
	if t != nil {
		tu.SetType(*t)
	}
	return tu
}

// SetPackageID sets the "package_id" field.
func (tu *TaskUpdate) SetPackageID(s string) *TaskUpdate {
	tu.mutation.SetPackageID(s)
	return tu
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePackageID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPackageID(*s)
	}
	return tu
}

// ClearPackageID clears the value of the "package_id" field.
func (tu *TaskUpdate) ClearPackageID() *TaskUpdate {
	tu.mutation.ClearPackageID()
	return tu
}

// SetPackageName sets the "package_name" field.
func (tu *TaskUpdate) SetPackageName(s string) *TaskUpdate {
	tu.mutation.SetPackageName(s)
	return tu
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePackageName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetPackageName(*s)
	}
	return tu
}

// ClearPackageName clears the value of the "package_name" field.
func (tu *TaskUpdate) ClearPackageName() *TaskUpdate {
	tu.mutation.ClearPackageName()
	return tu
}

// SetPackageLatest sets the "package_latest" field.
func (tu *TaskUpdate) SetPackageLatest(b bool) *TaskUpdate {
	tu.mutation.SetPackageLatest(b)
	return tu
}

// SetNillablePackageLatest sets the "package_latest" field if the given value is not nil.
func (tu *TaskUpdate) SetNillablePackageLatest(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetPackageLatest(*b)
	}
	return tu
}

// ClearPackageLatest clears the value of the "package_latest" field.
func (tu *TaskUpdate) ClearPackageLatest() *TaskUpdate {
	tu.mutation.ClearPackageLatest()
	return tu
}

// SetRegistryKey sets the "registry_key" field.
func (tu *TaskUpdate) SetRegistryKey(s string) *TaskUpdate {
	tu.mutation.SetRegistryKey(s)
	return tu
}

// SetNillableRegistryKey sets the "registry_key" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryKey(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRegistryKey(*s)
	}
	return tu
}

// ClearRegistryKey clears the value of the "registry_key" field.
func (tu *TaskUpdate) ClearRegistryKey() *TaskUpdate {
	tu.mutation.ClearRegistryKey()
	return tu
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (tu *TaskUpdate) SetRegistryKeyValueName(s string) *TaskUpdate {
	tu.mutation.SetRegistryKeyValueName(s)
	return tu
}

// SetNillableRegistryKeyValueName sets the "registry_key_value_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryKeyValueName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRegistryKeyValueName(*s)
	}
	return tu
}

// ClearRegistryKeyValueName clears the value of the "registry_key_value_name" field.
func (tu *TaskUpdate) ClearRegistryKeyValueName() *TaskUpdate {
	tu.mutation.ClearRegistryKeyValueName()
	return tu
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (tu *TaskUpdate) SetRegistryKeyValueType(tkvt task.RegistryKeyValueType) *TaskUpdate {
	tu.mutation.SetRegistryKeyValueType(tkvt)
	return tu
}

// SetNillableRegistryKeyValueType sets the "registry_key_value_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryKeyValueType(tkvt *task.RegistryKeyValueType) *TaskUpdate {
	if tkvt != nil {
		tu.SetRegistryKeyValueType(*tkvt)
	}
	return tu
}

// ClearRegistryKeyValueType clears the value of the "registry_key_value_type" field.
func (tu *TaskUpdate) ClearRegistryKeyValueType() *TaskUpdate {
	tu.mutation.ClearRegistryKeyValueType()
	return tu
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (tu *TaskUpdate) SetRegistryKeyValueData(s string) *TaskUpdate {
	tu.mutation.SetRegistryKeyValueData(s)
	return tu
}

// SetNillableRegistryKeyValueData sets the "registry_key_value_data" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryKeyValueData(s *string) *TaskUpdate {
	if s != nil {
		tu.SetRegistryKeyValueData(*s)
	}
	return tu
}

// ClearRegistryKeyValueData clears the value of the "registry_key_value_data" field.
func (tu *TaskUpdate) ClearRegistryKeyValueData() *TaskUpdate {
	tu.mutation.ClearRegistryKeyValueData()
	return tu
}

// SetRegistryHex sets the "registry_hex" field.
func (tu *TaskUpdate) SetRegistryHex(b bool) *TaskUpdate {
	tu.mutation.SetRegistryHex(b)
	return tu
}

// SetNillableRegistryHex sets the "registry_hex" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryHex(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetRegistryHex(*b)
	}
	return tu
}

// ClearRegistryHex clears the value of the "registry_hex" field.
func (tu *TaskUpdate) ClearRegistryHex() *TaskUpdate {
	tu.mutation.ClearRegistryHex()
	return tu
}

// SetRegistryForce sets the "registry_force" field.
func (tu *TaskUpdate) SetRegistryForce(b bool) *TaskUpdate {
	tu.mutation.SetRegistryForce(b)
	return tu
}

// SetNillableRegistryForce sets the "registry_force" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableRegistryForce(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetRegistryForce(*b)
	}
	return tu
}

// ClearRegistryForce clears the value of the "registry_force" field.
func (tu *TaskUpdate) ClearRegistryForce() *TaskUpdate {
	tu.mutation.ClearRegistryForce()
	return tu
}

// SetLocalUserUsername sets the "local_user_username" field.
func (tu *TaskUpdate) SetLocalUserUsername(s string) *TaskUpdate {
	tu.mutation.SetLocalUserUsername(s)
	return tu
}

// SetNillableLocalUserUsername sets the "local_user_username" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserUsername(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserUsername(*s)
	}
	return tu
}

// ClearLocalUserUsername clears the value of the "local_user_username" field.
func (tu *TaskUpdate) ClearLocalUserUsername() *TaskUpdate {
	tu.mutation.ClearLocalUserUsername()
	return tu
}

// SetLocalUserDescription sets the "local_user_description" field.
func (tu *TaskUpdate) SetLocalUserDescription(s string) *TaskUpdate {
	tu.mutation.SetLocalUserDescription(s)
	return tu
}

// SetNillableLocalUserDescription sets the "local_user_description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserDescription(*s)
	}
	return tu
}

// ClearLocalUserDescription clears the value of the "local_user_description" field.
func (tu *TaskUpdate) ClearLocalUserDescription() *TaskUpdate {
	tu.mutation.ClearLocalUserDescription()
	return tu
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (tu *TaskUpdate) SetLocalUserDisable(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserDisable(b)
	return tu
}

// SetNillableLocalUserDisable sets the "local_user_disable" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserDisable(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserDisable(*b)
	}
	return tu
}

// ClearLocalUserDisable clears the value of the "local_user_disable" field.
func (tu *TaskUpdate) ClearLocalUserDisable() *TaskUpdate {
	tu.mutation.ClearLocalUserDisable()
	return tu
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (tu *TaskUpdate) SetLocalUserFullname(s string) *TaskUpdate {
	tu.mutation.SetLocalUserFullname(s)
	return tu
}

// SetNillableLocalUserFullname sets the "local_user_fullname" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserFullname(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserFullname(*s)
	}
	return tu
}

// ClearLocalUserFullname clears the value of the "local_user_fullname" field.
func (tu *TaskUpdate) ClearLocalUserFullname() *TaskUpdate {
	tu.mutation.ClearLocalUserFullname()
	return tu
}

// SetLocalUserPassword sets the "local_user_password" field.
func (tu *TaskUpdate) SetLocalUserPassword(s string) *TaskUpdate {
	tu.mutation.SetLocalUserPassword(s)
	return tu
}

// SetNillableLocalUserPassword sets the "local_user_password" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPassword(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserPassword(*s)
	}
	return tu
}

// ClearLocalUserPassword clears the value of the "local_user_password" field.
func (tu *TaskUpdate) ClearLocalUserPassword() *TaskUpdate {
	tu.mutation.ClearLocalUserPassword()
	return tu
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (tu *TaskUpdate) SetLocalUserPasswordChangeNotAllowed(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordChangeNotAllowed(b)
	return tu
}

// SetNillableLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordChangeNotAllowed(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserPasswordChangeNotAllowed(*b)
	}
	return tu
}

// ClearLocalUserPasswordChangeNotAllowed clears the value of the "local_user_password_change_not_allowed" field.
func (tu *TaskUpdate) ClearLocalUserPasswordChangeNotAllowed() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordChangeNotAllowed()
	return tu
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (tu *TaskUpdate) SetLocalUserPasswordChangeRequired(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordChangeRequired(b)
	return tu
}

// SetNillableLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordChangeRequired(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserPasswordChangeRequired(*b)
	}
	return tu
}

// ClearLocalUserPasswordChangeRequired clears the value of the "local_user_password_change_required" field.
func (tu *TaskUpdate) ClearLocalUserPasswordChangeRequired() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordChangeRequired()
	return tu
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (tu *TaskUpdate) SetLocalUserPasswordNeverExpires(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordNeverExpires(b)
	return tu
}

// SetNillableLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordNeverExpires(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserPasswordNeverExpires(*b)
	}
	return tu
}

// ClearLocalUserPasswordNeverExpires clears the value of the "local_user_password_never_expires" field.
func (tu *TaskUpdate) ClearLocalUserPasswordNeverExpires() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordNeverExpires()
	return tu
}

// SetLocalUserAppend sets the "local_user_append" field.
func (tu *TaskUpdate) SetLocalUserAppend(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserAppend(b)
	return tu
}

// SetNillableLocalUserAppend sets the "local_user_append" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserAppend(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserAppend(*b)
	}
	return tu
}

// ClearLocalUserAppend clears the value of the "local_user_append" field.
func (tu *TaskUpdate) ClearLocalUserAppend() *TaskUpdate {
	tu.mutation.ClearLocalUserAppend()
	return tu
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (tu *TaskUpdate) SetLocalUserCreateHome(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserCreateHome(b)
	return tu
}

// SetNillableLocalUserCreateHome sets the "local_user_create_home" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserCreateHome(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserCreateHome(*b)
	}
	return tu
}

// ClearLocalUserCreateHome clears the value of the "local_user_create_home" field.
func (tu *TaskUpdate) ClearLocalUserCreateHome() *TaskUpdate {
	tu.mutation.ClearLocalUserCreateHome()
	return tu
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (tu *TaskUpdate) SetLocalUserExpires(s string) *TaskUpdate {
	tu.mutation.SetLocalUserExpires(s)
	return tu
}

// SetNillableLocalUserExpires sets the "local_user_expires" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserExpires(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserExpires(*s)
	}
	return tu
}

// ClearLocalUserExpires clears the value of the "local_user_expires" field.
func (tu *TaskUpdate) ClearLocalUserExpires() *TaskUpdate {
	tu.mutation.ClearLocalUserExpires()
	return tu
}

// SetLocalUserForce sets the "local_user_force" field.
func (tu *TaskUpdate) SetLocalUserForce(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserForce(b)
	return tu
}

// SetNillableLocalUserForce sets the "local_user_force" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserForce(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserForce(*b)
	}
	return tu
}

// ClearLocalUserForce clears the value of the "local_user_force" field.
func (tu *TaskUpdate) ClearLocalUserForce() *TaskUpdate {
	tu.mutation.ClearLocalUserForce()
	return tu
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (tu *TaskUpdate) SetLocalUserGenerateSSHKey(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserGenerateSSHKey(b)
	return tu
}

// SetNillableLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserGenerateSSHKey(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserGenerateSSHKey(*b)
	}
	return tu
}

// ClearLocalUserGenerateSSHKey clears the value of the "local_user_generate_ssh_key" field.
func (tu *TaskUpdate) ClearLocalUserGenerateSSHKey() *TaskUpdate {
	tu.mutation.ClearLocalUserGenerateSSHKey()
	return tu
}

// SetLocalUserGroup sets the "local_user_group" field.
func (tu *TaskUpdate) SetLocalUserGroup(s string) *TaskUpdate {
	tu.mutation.SetLocalUserGroup(s)
	return tu
}

// SetNillableLocalUserGroup sets the "local_user_group" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserGroup(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserGroup(*s)
	}
	return tu
}

// ClearLocalUserGroup clears the value of the "local_user_group" field.
func (tu *TaskUpdate) ClearLocalUserGroup() *TaskUpdate {
	tu.mutation.ClearLocalUserGroup()
	return tu
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (tu *TaskUpdate) SetLocalUserGroups(s string) *TaskUpdate {
	tu.mutation.SetLocalUserGroups(s)
	return tu
}

// SetNillableLocalUserGroups sets the "local_user_groups" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserGroups(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserGroups(*s)
	}
	return tu
}

// ClearLocalUserGroups clears the value of the "local_user_groups" field.
func (tu *TaskUpdate) ClearLocalUserGroups() *TaskUpdate {
	tu.mutation.ClearLocalUserGroups()
	return tu
}

// SetLocalUserHome sets the "local_user_home" field.
func (tu *TaskUpdate) SetLocalUserHome(s string) *TaskUpdate {
	tu.mutation.SetLocalUserHome(s)
	return tu
}

// SetNillableLocalUserHome sets the "local_user_home" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserHome(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserHome(*s)
	}
	return tu
}

// ClearLocalUserHome clears the value of the "local_user_home" field.
func (tu *TaskUpdate) ClearLocalUserHome() *TaskUpdate {
	tu.mutation.ClearLocalUserHome()
	return tu
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (tu *TaskUpdate) SetLocalUserMoveHome(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserMoveHome(b)
	return tu
}

// SetNillableLocalUserMoveHome sets the "local_user_move_home" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserMoveHome(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserMoveHome(*b)
	}
	return tu
}

// ClearLocalUserMoveHome clears the value of the "local_user_move_home" field.
func (tu *TaskUpdate) ClearLocalUserMoveHome() *TaskUpdate {
	tu.mutation.ClearLocalUserMoveHome()
	return tu
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (tu *TaskUpdate) SetLocalUserNonunique(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserNonunique(b)
	return tu
}

// SetNillableLocalUserNonunique sets the "local_user_nonunique" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserNonunique(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserNonunique(*b)
	}
	return tu
}

// ClearLocalUserNonunique clears the value of the "local_user_nonunique" field.
func (tu *TaskUpdate) ClearLocalUserNonunique() *TaskUpdate {
	tu.mutation.ClearLocalUserNonunique()
	return tu
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (tu *TaskUpdate) SetLocalUserPasswordExpireAccountDisable(s string) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordExpireAccountDisable(s)
	return tu
}

// SetNillableLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordExpireAccountDisable(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserPasswordExpireAccountDisable(*s)
	}
	return tu
}

// ClearLocalUserPasswordExpireAccountDisable clears the value of the "local_user_password_expire_account_disable" field.
func (tu *TaskUpdate) ClearLocalUserPasswordExpireAccountDisable() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordExpireAccountDisable()
	return tu
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (tu *TaskUpdate) SetLocalUserPasswordExpireMax(s string) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordExpireMax(s)
	return tu
}

// SetNillableLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordExpireMax(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserPasswordExpireMax(*s)
	}
	return tu
}

// ClearLocalUserPasswordExpireMax clears the value of the "local_user_password_expire_max" field.
func (tu *TaskUpdate) ClearLocalUserPasswordExpireMax() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordExpireMax()
	return tu
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (tu *TaskUpdate) SetLocalUserPasswordExpireMin(s string) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordExpireMin(s)
	return tu
}

// SetNillableLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordExpireMin(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserPasswordExpireMin(*s)
	}
	return tu
}

// ClearLocalUserPasswordExpireMin clears the value of the "local_user_password_expire_min" field.
func (tu *TaskUpdate) ClearLocalUserPasswordExpireMin() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordExpireMin()
	return tu
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (tu *TaskUpdate) SetLocalUserPasswordExpireWarn(s string) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordExpireWarn(s)
	return tu
}

// SetNillableLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordExpireWarn(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserPasswordExpireWarn(*s)
	}
	return tu
}

// ClearLocalUserPasswordExpireWarn clears the value of the "local_user_password_expire_warn" field.
func (tu *TaskUpdate) ClearLocalUserPasswordExpireWarn() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordExpireWarn()
	return tu
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (tu *TaskUpdate) SetLocalUserPasswordLock(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserPasswordLock(b)
	return tu
}

// SetNillableLocalUserPasswordLock sets the "local_user_password_lock" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserPasswordLock(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserPasswordLock(*b)
	}
	return tu
}

// ClearLocalUserPasswordLock clears the value of the "local_user_password_lock" field.
func (tu *TaskUpdate) ClearLocalUserPasswordLock() *TaskUpdate {
	tu.mutation.ClearLocalUserPasswordLock()
	return tu
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (tu *TaskUpdate) SetLocalUserSeuser(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSeuser(s)
	return tu
}

// SetNillableLocalUserSeuser sets the "local_user_seuser" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSeuser(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSeuser(*s)
	}
	return tu
}

// ClearLocalUserSeuser clears the value of the "local_user_seuser" field.
func (tu *TaskUpdate) ClearLocalUserSeuser() *TaskUpdate {
	tu.mutation.ClearLocalUserSeuser()
	return tu
}

// SetLocalUserShell sets the "local_user_shell" field.
func (tu *TaskUpdate) SetLocalUserShell(s string) *TaskUpdate {
	tu.mutation.SetLocalUserShell(s)
	return tu
}

// SetNillableLocalUserShell sets the "local_user_shell" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserShell(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserShell(*s)
	}
	return tu
}

// ClearLocalUserShell clears the value of the "local_user_shell" field.
func (tu *TaskUpdate) ClearLocalUserShell() *TaskUpdate {
	tu.mutation.ClearLocalUserShell()
	return tu
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (tu *TaskUpdate) SetLocalUserSkeleton(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSkeleton(s)
	return tu
}

// SetNillableLocalUserSkeleton sets the "local_user_skeleton" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSkeleton(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSkeleton(*s)
	}
	return tu
}

// ClearLocalUserSkeleton clears the value of the "local_user_skeleton" field.
func (tu *TaskUpdate) ClearLocalUserSkeleton() *TaskUpdate {
	tu.mutation.ClearLocalUserSkeleton()
	return tu
}

// SetLocalUserSystem sets the "local_user_system" field.
func (tu *TaskUpdate) SetLocalUserSystem(b bool) *TaskUpdate {
	tu.mutation.SetLocalUserSystem(b)
	return tu
}

// SetNillableLocalUserSystem sets the "local_user_system" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSystem(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalUserSystem(*b)
	}
	return tu
}

// ClearLocalUserSystem clears the value of the "local_user_system" field.
func (tu *TaskUpdate) ClearLocalUserSystem() *TaskUpdate {
	tu.mutation.ClearLocalUserSystem()
	return tu
}

// SetLocalUserID sets the "local_user_id" field.
func (tu *TaskUpdate) SetLocalUserID(s string) *TaskUpdate {
	tu.mutation.SetLocalUserID(s)
	return tu
}

// SetNillableLocalUserID sets the "local_user_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserID(*s)
	}
	return tu
}

// ClearLocalUserID clears the value of the "local_user_id" field.
func (tu *TaskUpdate) ClearLocalUserID() *TaskUpdate {
	tu.mutation.ClearLocalUserID()
	return tu
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (tu *TaskUpdate) SetLocalUserIDMax(s string) *TaskUpdate {
	tu.mutation.SetLocalUserIDMax(s)
	return tu
}

// SetNillableLocalUserIDMax sets the "local_user_id_max" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserIDMax(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserIDMax(*s)
	}
	return tu
}

// ClearLocalUserIDMax clears the value of the "local_user_id_max" field.
func (tu *TaskUpdate) ClearLocalUserIDMax() *TaskUpdate {
	tu.mutation.ClearLocalUserIDMax()
	return tu
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (tu *TaskUpdate) SetLocalUserIDMin(s string) *TaskUpdate {
	tu.mutation.SetLocalUserIDMin(s)
	return tu
}

// SetNillableLocalUserIDMin sets the "local_user_id_min" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserIDMin(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserIDMin(*s)
	}
	return tu
}

// ClearLocalUserIDMin clears the value of the "local_user_id_min" field.
func (tu *TaskUpdate) ClearLocalUserIDMin() *TaskUpdate {
	tu.mutation.ClearLocalUserIDMin()
	return tu
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (tu *TaskUpdate) SetLocalUserSSHKeyBits(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSSHKeyBits(s)
	return tu
}

// SetNillableLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSSHKeyBits(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSSHKeyBits(*s)
	}
	return tu
}

// ClearLocalUserSSHKeyBits clears the value of the "local_user_ssh_key_bits" field.
func (tu *TaskUpdate) ClearLocalUserSSHKeyBits() *TaskUpdate {
	tu.mutation.ClearLocalUserSSHKeyBits()
	return tu
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (tu *TaskUpdate) SetLocalUserSSHKeyComment(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSSHKeyComment(s)
	return tu
}

// SetNillableLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSSHKeyComment(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSSHKeyComment(*s)
	}
	return tu
}

// ClearLocalUserSSHKeyComment clears the value of the "local_user_ssh_key_comment" field.
func (tu *TaskUpdate) ClearLocalUserSSHKeyComment() *TaskUpdate {
	tu.mutation.ClearLocalUserSSHKeyComment()
	return tu
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (tu *TaskUpdate) SetLocalUserSSHKeyFile(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSSHKeyFile(s)
	return tu
}

// SetNillableLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSSHKeyFile(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSSHKeyFile(*s)
	}
	return tu
}

// ClearLocalUserSSHKeyFile clears the value of the "local_user_ssh_key_file" field.
func (tu *TaskUpdate) ClearLocalUserSSHKeyFile() *TaskUpdate {
	tu.mutation.ClearLocalUserSSHKeyFile()
	return tu
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (tu *TaskUpdate) SetLocalUserSSHKeyPassphrase(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSSHKeyPassphrase(s)
	return tu
}

// SetNillableLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSSHKeyPassphrase(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSSHKeyPassphrase(*s)
	}
	return tu
}

// ClearLocalUserSSHKeyPassphrase clears the value of the "local_user_ssh_key_passphrase" field.
func (tu *TaskUpdate) ClearLocalUserSSHKeyPassphrase() *TaskUpdate {
	tu.mutation.ClearLocalUserSSHKeyPassphrase()
	return tu
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (tu *TaskUpdate) SetLocalUserSSHKeyType(s string) *TaskUpdate {
	tu.mutation.SetLocalUserSSHKeyType(s)
	return tu
}

// SetNillableLocalUserSSHKeyType sets the "local_user_ssh_key_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserSSHKeyType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserSSHKeyType(*s)
	}
	return tu
}

// ClearLocalUserSSHKeyType clears the value of the "local_user_ssh_key_type" field.
func (tu *TaskUpdate) ClearLocalUserSSHKeyType() *TaskUpdate {
	tu.mutation.ClearLocalUserSSHKeyType()
	return tu
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (tu *TaskUpdate) SetLocalUserUmask(s string) *TaskUpdate {
	tu.mutation.SetLocalUserUmask(s)
	return tu
}

// SetNillableLocalUserUmask sets the "local_user_umask" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalUserUmask(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalUserUmask(*s)
	}
	return tu
}

// ClearLocalUserUmask clears the value of the "local_user_umask" field.
func (tu *TaskUpdate) ClearLocalUserUmask() *TaskUpdate {
	tu.mutation.ClearLocalUserUmask()
	return tu
}

// SetLocalGroupID sets the "local_group_id" field.
func (tu *TaskUpdate) SetLocalGroupID(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupID(s)
	return tu
}

// SetNillableLocalGroupID sets the "local_group_id" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupID(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupID(*s)
	}
	return tu
}

// ClearLocalGroupID clears the value of the "local_group_id" field.
func (tu *TaskUpdate) ClearLocalGroupID() *TaskUpdate {
	tu.mutation.ClearLocalGroupID()
	return tu
}

// SetLocalGroupName sets the "local_group_name" field.
func (tu *TaskUpdate) SetLocalGroupName(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupName(s)
	return tu
}

// SetNillableLocalGroupName sets the "local_group_name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupName(*s)
	}
	return tu
}

// ClearLocalGroupName clears the value of the "local_group_name" field.
func (tu *TaskUpdate) ClearLocalGroupName() *TaskUpdate {
	tu.mutation.ClearLocalGroupName()
	return tu
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (tu *TaskUpdate) SetLocalGroupDescription(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupDescription(s)
	return tu
}

// SetNillableLocalGroupDescription sets the "local_group_description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupDescription(*s)
	}
	return tu
}

// ClearLocalGroupDescription clears the value of the "local_group_description" field.
func (tu *TaskUpdate) ClearLocalGroupDescription() *TaskUpdate {
	tu.mutation.ClearLocalGroupDescription()
	return tu
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (tu *TaskUpdate) SetLocalGroupSystem(b bool) *TaskUpdate {
	tu.mutation.SetLocalGroupSystem(b)
	return tu
}

// SetNillableLocalGroupSystem sets the "local_group_system" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupSystem(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalGroupSystem(*b)
	}
	return tu
}

// ClearLocalGroupSystem clears the value of the "local_group_system" field.
func (tu *TaskUpdate) ClearLocalGroupSystem() *TaskUpdate {
	tu.mutation.ClearLocalGroupSystem()
	return tu
}

// SetLocalGroupForce sets the "local_group_force" field.
func (tu *TaskUpdate) SetLocalGroupForce(b bool) *TaskUpdate {
	tu.mutation.SetLocalGroupForce(b)
	return tu
}

// SetNillableLocalGroupForce sets the "local_group_force" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupForce(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetLocalGroupForce(*b)
	}
	return tu
}

// ClearLocalGroupForce clears the value of the "local_group_force" field.
func (tu *TaskUpdate) ClearLocalGroupForce() *TaskUpdate {
	tu.mutation.ClearLocalGroupForce()
	return tu
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (tu *TaskUpdate) SetLocalGroupMembers(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupMembers(s)
	return tu
}

// SetNillableLocalGroupMembers sets the "local_group_members" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupMembers(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupMembers(*s)
	}
	return tu
}

// ClearLocalGroupMembers clears the value of the "local_group_members" field.
func (tu *TaskUpdate) ClearLocalGroupMembers() *TaskUpdate {
	tu.mutation.ClearLocalGroupMembers()
	return tu
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (tu *TaskUpdate) SetLocalGroupMembersToInclude(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupMembersToInclude(s)
	return tu
}

// SetNillableLocalGroupMembersToInclude sets the "local_group_members_to_include" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupMembersToInclude(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupMembersToInclude(*s)
	}
	return tu
}

// ClearLocalGroupMembersToInclude clears the value of the "local_group_members_to_include" field.
func (tu *TaskUpdate) ClearLocalGroupMembersToInclude() *TaskUpdate {
	tu.mutation.ClearLocalGroupMembersToInclude()
	return tu
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (tu *TaskUpdate) SetLocalGroupMembersToExclude(s string) *TaskUpdate {
	tu.mutation.SetLocalGroupMembersToExclude(s)
	return tu
}

// SetNillableLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableLocalGroupMembersToExclude(s *string) *TaskUpdate {
	if s != nil {
		tu.SetLocalGroupMembersToExclude(*s)
	}
	return tu
}

// ClearLocalGroupMembersToExclude clears the value of the "local_group_members_to_exclude" field.
func (tu *TaskUpdate) ClearLocalGroupMembersToExclude() *TaskUpdate {
	tu.mutation.ClearLocalGroupMembersToExclude()
	return tu
}

// SetMsiProductid sets the "msi_productid" field.
func (tu *TaskUpdate) SetMsiProductid(s string) *TaskUpdate {
	tu.mutation.SetMsiProductid(s)
	return tu
}

// SetNillableMsiProductid sets the "msi_productid" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiProductid(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMsiProductid(*s)
	}
	return tu
}

// ClearMsiProductid clears the value of the "msi_productid" field.
func (tu *TaskUpdate) ClearMsiProductid() *TaskUpdate {
	tu.mutation.ClearMsiProductid()
	return tu
}

// SetMsiPath sets the "msi_path" field.
func (tu *TaskUpdate) SetMsiPath(s string) *TaskUpdate {
	tu.mutation.SetMsiPath(s)
	return tu
}

// SetNillableMsiPath sets the "msi_path" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiPath(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMsiPath(*s)
	}
	return tu
}

// ClearMsiPath clears the value of the "msi_path" field.
func (tu *TaskUpdate) ClearMsiPath() *TaskUpdate {
	tu.mutation.ClearMsiPath()
	return tu
}

// SetMsiArguments sets the "msi_arguments" field.
func (tu *TaskUpdate) SetMsiArguments(s string) *TaskUpdate {
	tu.mutation.SetMsiArguments(s)
	return tu
}

// SetNillableMsiArguments sets the "msi_arguments" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiArguments(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMsiArguments(*s)
	}
	return tu
}

// ClearMsiArguments clears the value of the "msi_arguments" field.
func (tu *TaskUpdate) ClearMsiArguments() *TaskUpdate {
	tu.mutation.ClearMsiArguments()
	return tu
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (tu *TaskUpdate) SetMsiFileHash(s string) *TaskUpdate {
	tu.mutation.SetMsiFileHash(s)
	return tu
}

// SetNillableMsiFileHash sets the "msi_file_hash" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiFileHash(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMsiFileHash(*s)
	}
	return tu
}

// ClearMsiFileHash clears the value of the "msi_file_hash" field.
func (tu *TaskUpdate) ClearMsiFileHash() *TaskUpdate {
	tu.mutation.ClearMsiFileHash()
	return tu
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (tu *TaskUpdate) SetMsiFileHashAlg(tfha task.MsiFileHashAlg) *TaskUpdate {
	tu.mutation.SetMsiFileHashAlg(tfha)
	return tu
}

// SetNillableMsiFileHashAlg sets the "msi_file_hash_alg" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiFileHashAlg(tfha *task.MsiFileHashAlg) *TaskUpdate {
	if tfha != nil {
		tu.SetMsiFileHashAlg(*tfha)
	}
	return tu
}

// ClearMsiFileHashAlg clears the value of the "msi_file_hash_alg" field.
func (tu *TaskUpdate) ClearMsiFileHashAlg() *TaskUpdate {
	tu.mutation.ClearMsiFileHashAlg()
	return tu
}

// SetMsiLogPath sets the "msi_log_path" field.
func (tu *TaskUpdate) SetMsiLogPath(s string) *TaskUpdate {
	tu.mutation.SetMsiLogPath(s)
	return tu
}

// SetNillableMsiLogPath sets the "msi_log_path" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableMsiLogPath(s *string) *TaskUpdate {
	if s != nil {
		tu.SetMsiLogPath(*s)
	}
	return tu
}

// ClearMsiLogPath clears the value of the "msi_log_path" field.
func (tu *TaskUpdate) ClearMsiLogPath() *TaskUpdate {
	tu.mutation.ClearMsiLogPath()
	return tu
}

// SetScript sets the "script" field.
func (tu *TaskUpdate) SetScript(s string) *TaskUpdate {
	tu.mutation.SetScript(s)
	return tu
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableScript(s *string) *TaskUpdate {
	if s != nil {
		tu.SetScript(*s)
	}
	return tu
}

// ClearScript clears the value of the "script" field.
func (tu *TaskUpdate) ClearScript() *TaskUpdate {
	tu.mutation.ClearScript()
	return tu
}

// SetScriptExecutable sets the "script_executable" field.
func (tu *TaskUpdate) SetScriptExecutable(s string) *TaskUpdate {
	tu.mutation.SetScriptExecutable(s)
	return tu
}

// SetNillableScriptExecutable sets the "script_executable" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableScriptExecutable(s *string) *TaskUpdate {
	if s != nil {
		tu.SetScriptExecutable(*s)
	}
	return tu
}

// ClearScriptExecutable clears the value of the "script_executable" field.
func (tu *TaskUpdate) ClearScriptExecutable() *TaskUpdate {
	tu.mutation.ClearScriptExecutable()
	return tu
}

// SetScriptCreates sets the "script_creates" field.
func (tu *TaskUpdate) SetScriptCreates(s string) *TaskUpdate {
	tu.mutation.SetScriptCreates(s)
	return tu
}

// SetNillableScriptCreates sets the "script_creates" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableScriptCreates(s *string) *TaskUpdate {
	if s != nil {
		tu.SetScriptCreates(*s)
	}
	return tu
}

// ClearScriptCreates clears the value of the "script_creates" field.
func (tu *TaskUpdate) ClearScriptCreates() *TaskUpdate {
	tu.mutation.ClearScriptCreates()
	return tu
}

// SetScriptRun sets the "script_run" field.
func (tu *TaskUpdate) SetScriptRun(tr task.ScriptRun) *TaskUpdate {
	tu.mutation.SetScriptRun(tr)
	return tu
}

// SetNillableScriptRun sets the "script_run" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableScriptRun(tr *task.ScriptRun) *TaskUpdate {
	if tr != nil {
		tu.SetScriptRun(*tr)
	}
	return tu
}

// ClearScriptRun clears the value of the "script_run" field.
func (tu *TaskUpdate) ClearScriptRun() *TaskUpdate {
	tu.mutation.ClearScriptRun()
	return tu
}

// SetAgentType sets the "agent_type" field.
func (tu *TaskUpdate) SetAgentType(tt task.AgentType) *TaskUpdate {
	tu.mutation.SetAgentType(tt)
	return tu
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableAgentType(tt *task.AgentType) *TaskUpdate {
	if tt != nil {
		tu.SetAgentType(*tt)
	}
	return tu
}

// ClearAgentType clears the value of the "agent_type" field.
func (tu *TaskUpdate) ClearAgentType() *TaskUpdate {
	tu.mutation.ClearAgentType()
	return tu
}

// SetWhen sets the "when" field.
func (tu *TaskUpdate) SetWhen(t time.Time) *TaskUpdate {
	tu.mutation.SetWhen(t)
	return tu
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableWhen(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetWhen(*t)
	}
	return tu
}

// ClearWhen clears the value of the "when" field.
func (tu *TaskUpdate) ClearWhen() *TaskUpdate {
	tu.mutation.ClearWhen()
	return tu
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tu *TaskUpdate) AddTagIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddTagIDs(ids...)
	return tu
}

// AddTags adds the "tags" edges to the Tag entity.
func (tu *TaskUpdate) AddTags(t ...*Tag) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.AddTagIDs(ids...)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (tu *TaskUpdate) SetProfileID(id int) *TaskUpdate {
	tu.mutation.SetProfileID(id)
	return tu
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableProfileID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetProfileID(*id)
	}
	return tu
}

// SetProfile sets the "profile" edge to the Profile entity.
func (tu *TaskUpdate) SetProfile(p *Profile) *TaskUpdate {
	return tu.SetProfileID(p.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tu *TaskUpdate) ClearTags() *TaskUpdate {
	tu.mutation.ClearTags()
	return tu
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tu *TaskUpdate) RemoveTagIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveTagIDs(ids...)
	return tu
}

// RemoveTags removes "tags" edges to Tag entities.
func (tu *TaskUpdate) RemoveTags(t ...*Tag) *TaskUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tu.RemoveTagIDs(ids...)
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (tu *TaskUpdate) ClearProfile() *TaskUpdate {
	tu.mutation.ClearProfile()
	return tu
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	if v, ok := tu.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.RegistryKeyValueType(); ok {
		if err := task.RegistryKeyValueTypeValidator(v); err != nil {
			return &ValidationError{Name: "registry_key_value_type", err: fmt.Errorf(`ent: validator failed for field "Task.registry_key_value_type": %w`, err)}
		}
	}
	if v, ok := tu.mutation.MsiFileHashAlg(); ok {
		if err := task.MsiFileHashAlgValidator(v); err != nil {
			return &ValidationError{Name: "msi_file_hash_alg", err: fmt.Errorf(`ent: validator failed for field "Task.msi_file_hash_alg": %w`, err)}
		}
	}
	if v, ok := tu.mutation.ScriptRun(); ok {
		if err := task.ScriptRunValidator(v); err != nil {
			return &ValidationError{Name: "script_run", err: fmt.Errorf(`ent: validator failed for field "Task.script_run": %w`, err)}
		}
	}
	if v, ok := tu.mutation.AgentType(); ok {
		if err := task.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Task.agent_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tu *TaskUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdate {
	tu.modifiers = append(tu.modifiers, modifiers...)
	return tu
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tu.mutation.PackageID(); ok {
		_spec.SetField(task.FieldPackageID, field.TypeString, value)
	}
	if tu.mutation.PackageIDCleared() {
		_spec.ClearField(task.FieldPackageID, field.TypeString)
	}
	if value, ok := tu.mutation.PackageName(); ok {
		_spec.SetField(task.FieldPackageName, field.TypeString, value)
	}
	if tu.mutation.PackageNameCleared() {
		_spec.ClearField(task.FieldPackageName, field.TypeString)
	}
	if value, ok := tu.mutation.PackageLatest(); ok {
		_spec.SetField(task.FieldPackageLatest, field.TypeBool, value)
	}
	if tu.mutation.PackageLatestCleared() {
		_spec.ClearField(task.FieldPackageLatest, field.TypeBool)
	}
	if value, ok := tu.mutation.RegistryKey(); ok {
		_spec.SetField(task.FieldRegistryKey, field.TypeString, value)
	}
	if tu.mutation.RegistryKeyCleared() {
		_spec.ClearField(task.FieldRegistryKey, field.TypeString)
	}
	if value, ok := tu.mutation.RegistryKeyValueName(); ok {
		_spec.SetField(task.FieldRegistryKeyValueName, field.TypeString, value)
	}
	if tu.mutation.RegistryKeyValueNameCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueName, field.TypeString)
	}
	if value, ok := tu.mutation.RegistryKeyValueType(); ok {
		_spec.SetField(task.FieldRegistryKeyValueType, field.TypeEnum, value)
	}
	if tu.mutation.RegistryKeyValueTypeCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueType, field.TypeEnum)
	}
	if value, ok := tu.mutation.RegistryKeyValueData(); ok {
		_spec.SetField(task.FieldRegistryKeyValueData, field.TypeString, value)
	}
	if tu.mutation.RegistryKeyValueDataCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueData, field.TypeString)
	}
	if value, ok := tu.mutation.RegistryHex(); ok {
		_spec.SetField(task.FieldRegistryHex, field.TypeBool, value)
	}
	if tu.mutation.RegistryHexCleared() {
		_spec.ClearField(task.FieldRegistryHex, field.TypeBool)
	}
	if value, ok := tu.mutation.RegistryForce(); ok {
		_spec.SetField(task.FieldRegistryForce, field.TypeBool, value)
	}
	if tu.mutation.RegistryForceCleared() {
		_spec.ClearField(task.FieldRegistryForce, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserUsername(); ok {
		_spec.SetField(task.FieldLocalUserUsername, field.TypeString, value)
	}
	if tu.mutation.LocalUserUsernameCleared() {
		_spec.ClearField(task.FieldLocalUserUsername, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserDescription(); ok {
		_spec.SetField(task.FieldLocalUserDescription, field.TypeString, value)
	}
	if tu.mutation.LocalUserDescriptionCleared() {
		_spec.ClearField(task.FieldLocalUserDescription, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserDisable(); ok {
		_spec.SetField(task.FieldLocalUserDisable, field.TypeBool, value)
	}
	if tu.mutation.LocalUserDisableCleared() {
		_spec.ClearField(task.FieldLocalUserDisable, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserFullname(); ok {
		_spec.SetField(task.FieldLocalUserFullname, field.TypeString, value)
	}
	if tu.mutation.LocalUserFullnameCleared() {
		_spec.ClearField(task.FieldLocalUserFullname, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPassword(); ok {
		_spec.SetField(task.FieldLocalUserPassword, field.TypeString, value)
	}
	if tu.mutation.LocalUserPasswordCleared() {
		_spec.ClearField(task.FieldLocalUserPassword, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPasswordChangeNotAllowed(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeNotAllowed, field.TypeBool, value)
	}
	if tu.mutation.LocalUserPasswordChangeNotAllowedCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordChangeNotAllowed, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserPasswordChangeRequired(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeRequired, field.TypeBool, value)
	}
	if tu.mutation.LocalUserPasswordChangeRequiredCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordChangeRequired, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserPasswordNeverExpires(); ok {
		_spec.SetField(task.FieldLocalUserPasswordNeverExpires, field.TypeBool, value)
	}
	if tu.mutation.LocalUserPasswordNeverExpiresCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordNeverExpires, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserAppend(); ok {
		_spec.SetField(task.FieldLocalUserAppend, field.TypeBool, value)
	}
	if tu.mutation.LocalUserAppendCleared() {
		_spec.ClearField(task.FieldLocalUserAppend, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserCreateHome(); ok {
		_spec.SetField(task.FieldLocalUserCreateHome, field.TypeBool, value)
	}
	if tu.mutation.LocalUserCreateHomeCleared() {
		_spec.ClearField(task.FieldLocalUserCreateHome, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserExpires(); ok {
		_spec.SetField(task.FieldLocalUserExpires, field.TypeString, value)
	}
	if tu.mutation.LocalUserExpiresCleared() {
		_spec.ClearField(task.FieldLocalUserExpires, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserForce(); ok {
		_spec.SetField(task.FieldLocalUserForce, field.TypeBool, value)
	}
	if tu.mutation.LocalUserForceCleared() {
		_spec.ClearField(task.FieldLocalUserForce, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserGenerateSSHKey(); ok {
		_spec.SetField(task.FieldLocalUserGenerateSSHKey, field.TypeBool, value)
	}
	if tu.mutation.LocalUserGenerateSSHKeyCleared() {
		_spec.ClearField(task.FieldLocalUserGenerateSSHKey, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserGroup(); ok {
		_spec.SetField(task.FieldLocalUserGroup, field.TypeString, value)
	}
	if tu.mutation.LocalUserGroupCleared() {
		_spec.ClearField(task.FieldLocalUserGroup, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserGroups(); ok {
		_spec.SetField(task.FieldLocalUserGroups, field.TypeString, value)
	}
	if tu.mutation.LocalUserGroupsCleared() {
		_spec.ClearField(task.FieldLocalUserGroups, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserHome(); ok {
		_spec.SetField(task.FieldLocalUserHome, field.TypeString, value)
	}
	if tu.mutation.LocalUserHomeCleared() {
		_spec.ClearField(task.FieldLocalUserHome, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserMoveHome(); ok {
		_spec.SetField(task.FieldLocalUserMoveHome, field.TypeBool, value)
	}
	if tu.mutation.LocalUserMoveHomeCleared() {
		_spec.ClearField(task.FieldLocalUserMoveHome, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserNonunique(); ok {
		_spec.SetField(task.FieldLocalUserNonunique, field.TypeBool, value)
	}
	if tu.mutation.LocalUserNonuniqueCleared() {
		_spec.ClearField(task.FieldLocalUserNonunique, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserPasswordExpireAccountDisable(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireAccountDisable, field.TypeString, value)
	}
	if tu.mutation.LocalUserPasswordExpireAccountDisableCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireAccountDisable, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPasswordExpireMax(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMax, field.TypeString, value)
	}
	if tu.mutation.LocalUserPasswordExpireMaxCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireMax, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPasswordExpireMin(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMin, field.TypeString, value)
	}
	if tu.mutation.LocalUserPasswordExpireMinCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireMin, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPasswordExpireWarn(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireWarn, field.TypeString, value)
	}
	if tu.mutation.LocalUserPasswordExpireWarnCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireWarn, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserPasswordLock(); ok {
		_spec.SetField(task.FieldLocalUserPasswordLock, field.TypeBool, value)
	}
	if tu.mutation.LocalUserPasswordLockCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordLock, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserSeuser(); ok {
		_spec.SetField(task.FieldLocalUserSeuser, field.TypeString, value)
	}
	if tu.mutation.LocalUserSeuserCleared() {
		_spec.ClearField(task.FieldLocalUserSeuser, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserShell(); ok {
		_spec.SetField(task.FieldLocalUserShell, field.TypeString, value)
	}
	if tu.mutation.LocalUserShellCleared() {
		_spec.ClearField(task.FieldLocalUserShell, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSkeleton(); ok {
		_spec.SetField(task.FieldLocalUserSkeleton, field.TypeString, value)
	}
	if tu.mutation.LocalUserSkeletonCleared() {
		_spec.ClearField(task.FieldLocalUserSkeleton, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSystem(); ok {
		_spec.SetField(task.FieldLocalUserSystem, field.TypeBool, value)
	}
	if tu.mutation.LocalUserSystemCleared() {
		_spec.ClearField(task.FieldLocalUserSystem, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalUserID(); ok {
		_spec.SetField(task.FieldLocalUserID, field.TypeString, value)
	}
	if tu.mutation.LocalUserIDCleared() {
		_spec.ClearField(task.FieldLocalUserID, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserIDMax(); ok {
		_spec.SetField(task.FieldLocalUserIDMax, field.TypeString, value)
	}
	if tu.mutation.LocalUserIDMaxCleared() {
		_spec.ClearField(task.FieldLocalUserIDMax, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserIDMin(); ok {
		_spec.SetField(task.FieldLocalUserIDMin, field.TypeString, value)
	}
	if tu.mutation.LocalUserIDMinCleared() {
		_spec.ClearField(task.FieldLocalUserIDMin, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSSHKeyBits(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyBits, field.TypeString, value)
	}
	if tu.mutation.LocalUserSSHKeyBitsCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyBits, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSSHKeyComment(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyComment, field.TypeString, value)
	}
	if tu.mutation.LocalUserSSHKeyCommentCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyComment, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSSHKeyFile(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyFile, field.TypeString, value)
	}
	if tu.mutation.LocalUserSSHKeyFileCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyFile, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSSHKeyPassphrase(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyPassphrase, field.TypeString, value)
	}
	if tu.mutation.LocalUserSSHKeyPassphraseCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyPassphrase, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserSSHKeyType(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyType, field.TypeString, value)
	}
	if tu.mutation.LocalUserSSHKeyTypeCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyType, field.TypeString)
	}
	if value, ok := tu.mutation.LocalUserUmask(); ok {
		_spec.SetField(task.FieldLocalUserUmask, field.TypeString, value)
	}
	if tu.mutation.LocalUserUmaskCleared() {
		_spec.ClearField(task.FieldLocalUserUmask, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupID(); ok {
		_spec.SetField(task.FieldLocalGroupID, field.TypeString, value)
	}
	if tu.mutation.LocalGroupIDCleared() {
		_spec.ClearField(task.FieldLocalGroupID, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupName(); ok {
		_spec.SetField(task.FieldLocalGroupName, field.TypeString, value)
	}
	if tu.mutation.LocalGroupNameCleared() {
		_spec.ClearField(task.FieldLocalGroupName, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupDescription(); ok {
		_spec.SetField(task.FieldLocalGroupDescription, field.TypeString, value)
	}
	if tu.mutation.LocalGroupDescriptionCleared() {
		_spec.ClearField(task.FieldLocalGroupDescription, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupSystem(); ok {
		_spec.SetField(task.FieldLocalGroupSystem, field.TypeBool, value)
	}
	if tu.mutation.LocalGroupSystemCleared() {
		_spec.ClearField(task.FieldLocalGroupSystem, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalGroupForce(); ok {
		_spec.SetField(task.FieldLocalGroupForce, field.TypeBool, value)
	}
	if tu.mutation.LocalGroupForceCleared() {
		_spec.ClearField(task.FieldLocalGroupForce, field.TypeBool)
	}
	if value, ok := tu.mutation.LocalGroupMembers(); ok {
		_spec.SetField(task.FieldLocalGroupMembers, field.TypeString, value)
	}
	if tu.mutation.LocalGroupMembersCleared() {
		_spec.ClearField(task.FieldLocalGroupMembers, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupMembersToInclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToInclude, field.TypeString, value)
	}
	if tu.mutation.LocalGroupMembersToIncludeCleared() {
		_spec.ClearField(task.FieldLocalGroupMembersToInclude, field.TypeString)
	}
	if value, ok := tu.mutation.LocalGroupMembersToExclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToExclude, field.TypeString, value)
	}
	if tu.mutation.LocalGroupMembersToExcludeCleared() {
		_spec.ClearField(task.FieldLocalGroupMembersToExclude, field.TypeString)
	}
	if value, ok := tu.mutation.MsiProductid(); ok {
		_spec.SetField(task.FieldMsiProductid, field.TypeString, value)
	}
	if tu.mutation.MsiProductidCleared() {
		_spec.ClearField(task.FieldMsiProductid, field.TypeString)
	}
	if value, ok := tu.mutation.MsiPath(); ok {
		_spec.SetField(task.FieldMsiPath, field.TypeString, value)
	}
	if tu.mutation.MsiPathCleared() {
		_spec.ClearField(task.FieldMsiPath, field.TypeString)
	}
	if value, ok := tu.mutation.MsiArguments(); ok {
		_spec.SetField(task.FieldMsiArguments, field.TypeString, value)
	}
	if tu.mutation.MsiArgumentsCleared() {
		_spec.ClearField(task.FieldMsiArguments, field.TypeString)
	}
	if value, ok := tu.mutation.MsiFileHash(); ok {
		_spec.SetField(task.FieldMsiFileHash, field.TypeString, value)
	}
	if tu.mutation.MsiFileHashCleared() {
		_spec.ClearField(task.FieldMsiFileHash, field.TypeString)
	}
	if value, ok := tu.mutation.MsiFileHashAlg(); ok {
		_spec.SetField(task.FieldMsiFileHashAlg, field.TypeEnum, value)
	}
	if tu.mutation.MsiFileHashAlgCleared() {
		_spec.ClearField(task.FieldMsiFileHashAlg, field.TypeEnum)
	}
	if value, ok := tu.mutation.MsiLogPath(); ok {
		_spec.SetField(task.FieldMsiLogPath, field.TypeString, value)
	}
	if tu.mutation.MsiLogPathCleared() {
		_spec.ClearField(task.FieldMsiLogPath, field.TypeString)
	}
	if value, ok := tu.mutation.Script(); ok {
		_spec.SetField(task.FieldScript, field.TypeString, value)
	}
	if tu.mutation.ScriptCleared() {
		_spec.ClearField(task.FieldScript, field.TypeString)
	}
	if value, ok := tu.mutation.ScriptExecutable(); ok {
		_spec.SetField(task.FieldScriptExecutable, field.TypeString, value)
	}
	if tu.mutation.ScriptExecutableCleared() {
		_spec.ClearField(task.FieldScriptExecutable, field.TypeString)
	}
	if value, ok := tu.mutation.ScriptCreates(); ok {
		_spec.SetField(task.FieldScriptCreates, field.TypeString, value)
	}
	if tu.mutation.ScriptCreatesCleared() {
		_spec.ClearField(task.FieldScriptCreates, field.TypeString)
	}
	if value, ok := tu.mutation.ScriptRun(); ok {
		_spec.SetField(task.FieldScriptRun, field.TypeEnum, value)
	}
	if tu.mutation.ScriptRunCleared() {
		_spec.ClearField(task.FieldScriptRun, field.TypeEnum)
	}
	if value, ok := tu.mutation.AgentType(); ok {
		_spec.SetField(task.FieldAgentType, field.TypeEnum, value)
	}
	if tu.mutation.AgentTypeCleared() {
		_spec.ClearField(task.FieldAgentType, field.TypeEnum)
	}
	if value, ok := tu.mutation.When(); ok {
		_spec.SetField(task.FieldWhen, field.TypeTime, value)
	}
	if tu.mutation.WhenCleared() {
		_spec.ClearField(task.FieldWhen, field.TypeTime)
	}
	if tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tu.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProfileTable,
			Columns: []string{task.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProfileTable,
			Columns: []string{task.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tu.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *TaskMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(t task.Type) *TaskUpdateOne {
	tuo.mutation.SetType(t)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(t *task.Type) *TaskUpdateOne {
	if t != nil {
		tuo.SetType(*t)
	}
	return tuo
}

// SetPackageID sets the "package_id" field.
func (tuo *TaskUpdateOne) SetPackageID(s string) *TaskUpdateOne {
	tuo.mutation.SetPackageID(s)
	return tuo
}

// SetNillablePackageID sets the "package_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePackageID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPackageID(*s)
	}
	return tuo
}

// ClearPackageID clears the value of the "package_id" field.
func (tuo *TaskUpdateOne) ClearPackageID() *TaskUpdateOne {
	tuo.mutation.ClearPackageID()
	return tuo
}

// SetPackageName sets the "package_name" field.
func (tuo *TaskUpdateOne) SetPackageName(s string) *TaskUpdateOne {
	tuo.mutation.SetPackageName(s)
	return tuo
}

// SetNillablePackageName sets the "package_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePackageName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetPackageName(*s)
	}
	return tuo
}

// ClearPackageName clears the value of the "package_name" field.
func (tuo *TaskUpdateOne) ClearPackageName() *TaskUpdateOne {
	tuo.mutation.ClearPackageName()
	return tuo
}

// SetPackageLatest sets the "package_latest" field.
func (tuo *TaskUpdateOne) SetPackageLatest(b bool) *TaskUpdateOne {
	tuo.mutation.SetPackageLatest(b)
	return tuo
}

// SetNillablePackageLatest sets the "package_latest" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillablePackageLatest(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetPackageLatest(*b)
	}
	return tuo
}

// ClearPackageLatest clears the value of the "package_latest" field.
func (tuo *TaskUpdateOne) ClearPackageLatest() *TaskUpdateOne {
	tuo.mutation.ClearPackageLatest()
	return tuo
}

// SetRegistryKey sets the "registry_key" field.
func (tuo *TaskUpdateOne) SetRegistryKey(s string) *TaskUpdateOne {
	tuo.mutation.SetRegistryKey(s)
	return tuo
}

// SetNillableRegistryKey sets the "registry_key" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryKey(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRegistryKey(*s)
	}
	return tuo
}

// ClearRegistryKey clears the value of the "registry_key" field.
func (tuo *TaskUpdateOne) ClearRegistryKey() *TaskUpdateOne {
	tuo.mutation.ClearRegistryKey()
	return tuo
}

// SetRegistryKeyValueName sets the "registry_key_value_name" field.
func (tuo *TaskUpdateOne) SetRegistryKeyValueName(s string) *TaskUpdateOne {
	tuo.mutation.SetRegistryKeyValueName(s)
	return tuo
}

// SetNillableRegistryKeyValueName sets the "registry_key_value_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryKeyValueName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRegistryKeyValueName(*s)
	}
	return tuo
}

// ClearRegistryKeyValueName clears the value of the "registry_key_value_name" field.
func (tuo *TaskUpdateOne) ClearRegistryKeyValueName() *TaskUpdateOne {
	tuo.mutation.ClearRegistryKeyValueName()
	return tuo
}

// SetRegistryKeyValueType sets the "registry_key_value_type" field.
func (tuo *TaskUpdateOne) SetRegistryKeyValueType(tkvt task.RegistryKeyValueType) *TaskUpdateOne {
	tuo.mutation.SetRegistryKeyValueType(tkvt)
	return tuo
}

// SetNillableRegistryKeyValueType sets the "registry_key_value_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryKeyValueType(tkvt *task.RegistryKeyValueType) *TaskUpdateOne {
	if tkvt != nil {
		tuo.SetRegistryKeyValueType(*tkvt)
	}
	return tuo
}

// ClearRegistryKeyValueType clears the value of the "registry_key_value_type" field.
func (tuo *TaskUpdateOne) ClearRegistryKeyValueType() *TaskUpdateOne {
	tuo.mutation.ClearRegistryKeyValueType()
	return tuo
}

// SetRegistryKeyValueData sets the "registry_key_value_data" field.
func (tuo *TaskUpdateOne) SetRegistryKeyValueData(s string) *TaskUpdateOne {
	tuo.mutation.SetRegistryKeyValueData(s)
	return tuo
}

// SetNillableRegistryKeyValueData sets the "registry_key_value_data" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryKeyValueData(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetRegistryKeyValueData(*s)
	}
	return tuo
}

// ClearRegistryKeyValueData clears the value of the "registry_key_value_data" field.
func (tuo *TaskUpdateOne) ClearRegistryKeyValueData() *TaskUpdateOne {
	tuo.mutation.ClearRegistryKeyValueData()
	return tuo
}

// SetRegistryHex sets the "registry_hex" field.
func (tuo *TaskUpdateOne) SetRegistryHex(b bool) *TaskUpdateOne {
	tuo.mutation.SetRegistryHex(b)
	return tuo
}

// SetNillableRegistryHex sets the "registry_hex" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryHex(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetRegistryHex(*b)
	}
	return tuo
}

// ClearRegistryHex clears the value of the "registry_hex" field.
func (tuo *TaskUpdateOne) ClearRegistryHex() *TaskUpdateOne {
	tuo.mutation.ClearRegistryHex()
	return tuo
}

// SetRegistryForce sets the "registry_force" field.
func (tuo *TaskUpdateOne) SetRegistryForce(b bool) *TaskUpdateOne {
	tuo.mutation.SetRegistryForce(b)
	return tuo
}

// SetNillableRegistryForce sets the "registry_force" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableRegistryForce(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetRegistryForce(*b)
	}
	return tuo
}

// ClearRegistryForce clears the value of the "registry_force" field.
func (tuo *TaskUpdateOne) ClearRegistryForce() *TaskUpdateOne {
	tuo.mutation.ClearRegistryForce()
	return tuo
}

// SetLocalUserUsername sets the "local_user_username" field.
func (tuo *TaskUpdateOne) SetLocalUserUsername(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserUsername(s)
	return tuo
}

// SetNillableLocalUserUsername sets the "local_user_username" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserUsername(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserUsername(*s)
	}
	return tuo
}

// ClearLocalUserUsername clears the value of the "local_user_username" field.
func (tuo *TaskUpdateOne) ClearLocalUserUsername() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserUsername()
	return tuo
}

// SetLocalUserDescription sets the "local_user_description" field.
func (tuo *TaskUpdateOne) SetLocalUserDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserDescription(s)
	return tuo
}

// SetNillableLocalUserDescription sets the "local_user_description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserDescription(*s)
	}
	return tuo
}

// ClearLocalUserDescription clears the value of the "local_user_description" field.
func (tuo *TaskUpdateOne) ClearLocalUserDescription() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserDescription()
	return tuo
}

// SetLocalUserDisable sets the "local_user_disable" field.
func (tuo *TaskUpdateOne) SetLocalUserDisable(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserDisable(b)
	return tuo
}

// SetNillableLocalUserDisable sets the "local_user_disable" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserDisable(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserDisable(*b)
	}
	return tuo
}

// ClearLocalUserDisable clears the value of the "local_user_disable" field.
func (tuo *TaskUpdateOne) ClearLocalUserDisable() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserDisable()
	return tuo
}

// SetLocalUserFullname sets the "local_user_fullname" field.
func (tuo *TaskUpdateOne) SetLocalUserFullname(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserFullname(s)
	return tuo
}

// SetNillableLocalUserFullname sets the "local_user_fullname" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserFullname(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserFullname(*s)
	}
	return tuo
}

// ClearLocalUserFullname clears the value of the "local_user_fullname" field.
func (tuo *TaskUpdateOne) ClearLocalUserFullname() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserFullname()
	return tuo
}

// SetLocalUserPassword sets the "local_user_password" field.
func (tuo *TaskUpdateOne) SetLocalUserPassword(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPassword(s)
	return tuo
}

// SetNillableLocalUserPassword sets the "local_user_password" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPassword(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserPassword(*s)
	}
	return tuo
}

// ClearLocalUserPassword clears the value of the "local_user_password" field.
func (tuo *TaskUpdateOne) ClearLocalUserPassword() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPassword()
	return tuo
}

// SetLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordChangeNotAllowed(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordChangeNotAllowed(b)
	return tuo
}

// SetNillableLocalUserPasswordChangeNotAllowed sets the "local_user_password_change_not_allowed" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordChangeNotAllowed(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserPasswordChangeNotAllowed(*b)
	}
	return tuo
}

// ClearLocalUserPasswordChangeNotAllowed clears the value of the "local_user_password_change_not_allowed" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordChangeNotAllowed() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordChangeNotAllowed()
	return tuo
}

// SetLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordChangeRequired(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordChangeRequired(b)
	return tuo
}

// SetNillableLocalUserPasswordChangeRequired sets the "local_user_password_change_required" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordChangeRequired(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserPasswordChangeRequired(*b)
	}
	return tuo
}

// ClearLocalUserPasswordChangeRequired clears the value of the "local_user_password_change_required" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordChangeRequired() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordChangeRequired()
	return tuo
}

// SetLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordNeverExpires(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordNeverExpires(b)
	return tuo
}

// SetNillableLocalUserPasswordNeverExpires sets the "local_user_password_never_expires" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordNeverExpires(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserPasswordNeverExpires(*b)
	}
	return tuo
}

// ClearLocalUserPasswordNeverExpires clears the value of the "local_user_password_never_expires" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordNeverExpires() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordNeverExpires()
	return tuo
}

// SetLocalUserAppend sets the "local_user_append" field.
func (tuo *TaskUpdateOne) SetLocalUserAppend(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserAppend(b)
	return tuo
}

// SetNillableLocalUserAppend sets the "local_user_append" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserAppend(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserAppend(*b)
	}
	return tuo
}

// ClearLocalUserAppend clears the value of the "local_user_append" field.
func (tuo *TaskUpdateOne) ClearLocalUserAppend() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserAppend()
	return tuo
}

// SetLocalUserCreateHome sets the "local_user_create_home" field.
func (tuo *TaskUpdateOne) SetLocalUserCreateHome(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserCreateHome(b)
	return tuo
}

// SetNillableLocalUserCreateHome sets the "local_user_create_home" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserCreateHome(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserCreateHome(*b)
	}
	return tuo
}

// ClearLocalUserCreateHome clears the value of the "local_user_create_home" field.
func (tuo *TaskUpdateOne) ClearLocalUserCreateHome() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserCreateHome()
	return tuo
}

// SetLocalUserExpires sets the "local_user_expires" field.
func (tuo *TaskUpdateOne) SetLocalUserExpires(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserExpires(s)
	return tuo
}

// SetNillableLocalUserExpires sets the "local_user_expires" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserExpires(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserExpires(*s)
	}
	return tuo
}

// ClearLocalUserExpires clears the value of the "local_user_expires" field.
func (tuo *TaskUpdateOne) ClearLocalUserExpires() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserExpires()
	return tuo
}

// SetLocalUserForce sets the "local_user_force" field.
func (tuo *TaskUpdateOne) SetLocalUserForce(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserForce(b)
	return tuo
}

// SetNillableLocalUserForce sets the "local_user_force" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserForce(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserForce(*b)
	}
	return tuo
}

// ClearLocalUserForce clears the value of the "local_user_force" field.
func (tuo *TaskUpdateOne) ClearLocalUserForce() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserForce()
	return tuo
}

// SetLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field.
func (tuo *TaskUpdateOne) SetLocalUserGenerateSSHKey(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserGenerateSSHKey(b)
	return tuo
}

// SetNillableLocalUserGenerateSSHKey sets the "local_user_generate_ssh_key" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserGenerateSSHKey(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserGenerateSSHKey(*b)
	}
	return tuo
}

// ClearLocalUserGenerateSSHKey clears the value of the "local_user_generate_ssh_key" field.
func (tuo *TaskUpdateOne) ClearLocalUserGenerateSSHKey() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserGenerateSSHKey()
	return tuo
}

// SetLocalUserGroup sets the "local_user_group" field.
func (tuo *TaskUpdateOne) SetLocalUserGroup(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserGroup(s)
	return tuo
}

// SetNillableLocalUserGroup sets the "local_user_group" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserGroup(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserGroup(*s)
	}
	return tuo
}

// ClearLocalUserGroup clears the value of the "local_user_group" field.
func (tuo *TaskUpdateOne) ClearLocalUserGroup() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserGroup()
	return tuo
}

// SetLocalUserGroups sets the "local_user_groups" field.
func (tuo *TaskUpdateOne) SetLocalUserGroups(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserGroups(s)
	return tuo
}

// SetNillableLocalUserGroups sets the "local_user_groups" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserGroups(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserGroups(*s)
	}
	return tuo
}

// ClearLocalUserGroups clears the value of the "local_user_groups" field.
func (tuo *TaskUpdateOne) ClearLocalUserGroups() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserGroups()
	return tuo
}

// SetLocalUserHome sets the "local_user_home" field.
func (tuo *TaskUpdateOne) SetLocalUserHome(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserHome(s)
	return tuo
}

// SetNillableLocalUserHome sets the "local_user_home" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserHome(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserHome(*s)
	}
	return tuo
}

// ClearLocalUserHome clears the value of the "local_user_home" field.
func (tuo *TaskUpdateOne) ClearLocalUserHome() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserHome()
	return tuo
}

// SetLocalUserMoveHome sets the "local_user_move_home" field.
func (tuo *TaskUpdateOne) SetLocalUserMoveHome(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserMoveHome(b)
	return tuo
}

// SetNillableLocalUserMoveHome sets the "local_user_move_home" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserMoveHome(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserMoveHome(*b)
	}
	return tuo
}

// ClearLocalUserMoveHome clears the value of the "local_user_move_home" field.
func (tuo *TaskUpdateOne) ClearLocalUserMoveHome() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserMoveHome()
	return tuo
}

// SetLocalUserNonunique sets the "local_user_nonunique" field.
func (tuo *TaskUpdateOne) SetLocalUserNonunique(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserNonunique(b)
	return tuo
}

// SetNillableLocalUserNonunique sets the "local_user_nonunique" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserNonunique(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserNonunique(*b)
	}
	return tuo
}

// ClearLocalUserNonunique clears the value of the "local_user_nonunique" field.
func (tuo *TaskUpdateOne) ClearLocalUserNonunique() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserNonunique()
	return tuo
}

// SetLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordExpireAccountDisable(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordExpireAccountDisable(s)
	return tuo
}

// SetNillableLocalUserPasswordExpireAccountDisable sets the "local_user_password_expire_account_disable" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordExpireAccountDisable(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserPasswordExpireAccountDisable(*s)
	}
	return tuo
}

// ClearLocalUserPasswordExpireAccountDisable clears the value of the "local_user_password_expire_account_disable" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordExpireAccountDisable() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordExpireAccountDisable()
	return tuo
}

// SetLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordExpireMax(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordExpireMax(s)
	return tuo
}

// SetNillableLocalUserPasswordExpireMax sets the "local_user_password_expire_max" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordExpireMax(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserPasswordExpireMax(*s)
	}
	return tuo
}

// ClearLocalUserPasswordExpireMax clears the value of the "local_user_password_expire_max" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordExpireMax() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordExpireMax()
	return tuo
}

// SetLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordExpireMin(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordExpireMin(s)
	return tuo
}

// SetNillableLocalUserPasswordExpireMin sets the "local_user_password_expire_min" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordExpireMin(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserPasswordExpireMin(*s)
	}
	return tuo
}

// ClearLocalUserPasswordExpireMin clears the value of the "local_user_password_expire_min" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordExpireMin() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordExpireMin()
	return tuo
}

// SetLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordExpireWarn(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordExpireWarn(s)
	return tuo
}

// SetNillableLocalUserPasswordExpireWarn sets the "local_user_password_expire_warn" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordExpireWarn(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserPasswordExpireWarn(*s)
	}
	return tuo
}

// ClearLocalUserPasswordExpireWarn clears the value of the "local_user_password_expire_warn" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordExpireWarn() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordExpireWarn()
	return tuo
}

// SetLocalUserPasswordLock sets the "local_user_password_lock" field.
func (tuo *TaskUpdateOne) SetLocalUserPasswordLock(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserPasswordLock(b)
	return tuo
}

// SetNillableLocalUserPasswordLock sets the "local_user_password_lock" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserPasswordLock(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserPasswordLock(*b)
	}
	return tuo
}

// ClearLocalUserPasswordLock clears the value of the "local_user_password_lock" field.
func (tuo *TaskUpdateOne) ClearLocalUserPasswordLock() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserPasswordLock()
	return tuo
}

// SetLocalUserSeuser sets the "local_user_seuser" field.
func (tuo *TaskUpdateOne) SetLocalUserSeuser(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSeuser(s)
	return tuo
}

// SetNillableLocalUserSeuser sets the "local_user_seuser" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSeuser(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSeuser(*s)
	}
	return tuo
}

// ClearLocalUserSeuser clears the value of the "local_user_seuser" field.
func (tuo *TaskUpdateOne) ClearLocalUserSeuser() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSeuser()
	return tuo
}

// SetLocalUserShell sets the "local_user_shell" field.
func (tuo *TaskUpdateOne) SetLocalUserShell(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserShell(s)
	return tuo
}

// SetNillableLocalUserShell sets the "local_user_shell" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserShell(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserShell(*s)
	}
	return tuo
}

// ClearLocalUserShell clears the value of the "local_user_shell" field.
func (tuo *TaskUpdateOne) ClearLocalUserShell() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserShell()
	return tuo
}

// SetLocalUserSkeleton sets the "local_user_skeleton" field.
func (tuo *TaskUpdateOne) SetLocalUserSkeleton(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSkeleton(s)
	return tuo
}

// SetNillableLocalUserSkeleton sets the "local_user_skeleton" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSkeleton(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSkeleton(*s)
	}
	return tuo
}

// ClearLocalUserSkeleton clears the value of the "local_user_skeleton" field.
func (tuo *TaskUpdateOne) ClearLocalUserSkeleton() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSkeleton()
	return tuo
}

// SetLocalUserSystem sets the "local_user_system" field.
func (tuo *TaskUpdateOne) SetLocalUserSystem(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSystem(b)
	return tuo
}

// SetNillableLocalUserSystem sets the "local_user_system" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSystem(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalUserSystem(*b)
	}
	return tuo
}

// ClearLocalUserSystem clears the value of the "local_user_system" field.
func (tuo *TaskUpdateOne) ClearLocalUserSystem() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSystem()
	return tuo
}

// SetLocalUserID sets the "local_user_id" field.
func (tuo *TaskUpdateOne) SetLocalUserID(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserID(s)
	return tuo
}

// SetNillableLocalUserID sets the "local_user_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserID(*s)
	}
	return tuo
}

// ClearLocalUserID clears the value of the "local_user_id" field.
func (tuo *TaskUpdateOne) ClearLocalUserID() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserID()
	return tuo
}

// SetLocalUserIDMax sets the "local_user_id_max" field.
func (tuo *TaskUpdateOne) SetLocalUserIDMax(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserIDMax(s)
	return tuo
}

// SetNillableLocalUserIDMax sets the "local_user_id_max" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserIDMax(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserIDMax(*s)
	}
	return tuo
}

// ClearLocalUserIDMax clears the value of the "local_user_id_max" field.
func (tuo *TaskUpdateOne) ClearLocalUserIDMax() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserIDMax()
	return tuo
}

// SetLocalUserIDMin sets the "local_user_id_min" field.
func (tuo *TaskUpdateOne) SetLocalUserIDMin(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserIDMin(s)
	return tuo
}

// SetNillableLocalUserIDMin sets the "local_user_id_min" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserIDMin(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserIDMin(*s)
	}
	return tuo
}

// ClearLocalUserIDMin clears the value of the "local_user_id_min" field.
func (tuo *TaskUpdateOne) ClearLocalUserIDMin() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserIDMin()
	return tuo
}

// SetLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field.
func (tuo *TaskUpdateOne) SetLocalUserSSHKeyBits(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSSHKeyBits(s)
	return tuo
}

// SetNillableLocalUserSSHKeyBits sets the "local_user_ssh_key_bits" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSSHKeyBits(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSSHKeyBits(*s)
	}
	return tuo
}

// ClearLocalUserSSHKeyBits clears the value of the "local_user_ssh_key_bits" field.
func (tuo *TaskUpdateOne) ClearLocalUserSSHKeyBits() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSSHKeyBits()
	return tuo
}

// SetLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field.
func (tuo *TaskUpdateOne) SetLocalUserSSHKeyComment(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSSHKeyComment(s)
	return tuo
}

// SetNillableLocalUserSSHKeyComment sets the "local_user_ssh_key_comment" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSSHKeyComment(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSSHKeyComment(*s)
	}
	return tuo
}

// ClearLocalUserSSHKeyComment clears the value of the "local_user_ssh_key_comment" field.
func (tuo *TaskUpdateOne) ClearLocalUserSSHKeyComment() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSSHKeyComment()
	return tuo
}

// SetLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field.
func (tuo *TaskUpdateOne) SetLocalUserSSHKeyFile(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSSHKeyFile(s)
	return tuo
}

// SetNillableLocalUserSSHKeyFile sets the "local_user_ssh_key_file" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSSHKeyFile(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSSHKeyFile(*s)
	}
	return tuo
}

// ClearLocalUserSSHKeyFile clears the value of the "local_user_ssh_key_file" field.
func (tuo *TaskUpdateOne) ClearLocalUserSSHKeyFile() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSSHKeyFile()
	return tuo
}

// SetLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field.
func (tuo *TaskUpdateOne) SetLocalUserSSHKeyPassphrase(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSSHKeyPassphrase(s)
	return tuo
}

// SetNillableLocalUserSSHKeyPassphrase sets the "local_user_ssh_key_passphrase" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSSHKeyPassphrase(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSSHKeyPassphrase(*s)
	}
	return tuo
}

// ClearLocalUserSSHKeyPassphrase clears the value of the "local_user_ssh_key_passphrase" field.
func (tuo *TaskUpdateOne) ClearLocalUserSSHKeyPassphrase() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSSHKeyPassphrase()
	return tuo
}

// SetLocalUserSSHKeyType sets the "local_user_ssh_key_type" field.
func (tuo *TaskUpdateOne) SetLocalUserSSHKeyType(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserSSHKeyType(s)
	return tuo
}

// SetNillableLocalUserSSHKeyType sets the "local_user_ssh_key_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserSSHKeyType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserSSHKeyType(*s)
	}
	return tuo
}

// ClearLocalUserSSHKeyType clears the value of the "local_user_ssh_key_type" field.
func (tuo *TaskUpdateOne) ClearLocalUserSSHKeyType() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserSSHKeyType()
	return tuo
}

// SetLocalUserUmask sets the "local_user_umask" field.
func (tuo *TaskUpdateOne) SetLocalUserUmask(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalUserUmask(s)
	return tuo
}

// SetNillableLocalUserUmask sets the "local_user_umask" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalUserUmask(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalUserUmask(*s)
	}
	return tuo
}

// ClearLocalUserUmask clears the value of the "local_user_umask" field.
func (tuo *TaskUpdateOne) ClearLocalUserUmask() *TaskUpdateOne {
	tuo.mutation.ClearLocalUserUmask()
	return tuo
}

// SetLocalGroupID sets the "local_group_id" field.
func (tuo *TaskUpdateOne) SetLocalGroupID(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupID(s)
	return tuo
}

// SetNillableLocalGroupID sets the "local_group_id" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupID(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupID(*s)
	}
	return tuo
}

// ClearLocalGroupID clears the value of the "local_group_id" field.
func (tuo *TaskUpdateOne) ClearLocalGroupID() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupID()
	return tuo
}

// SetLocalGroupName sets the "local_group_name" field.
func (tuo *TaskUpdateOne) SetLocalGroupName(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupName(s)
	return tuo
}

// SetNillableLocalGroupName sets the "local_group_name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupName(*s)
	}
	return tuo
}

// ClearLocalGroupName clears the value of the "local_group_name" field.
func (tuo *TaskUpdateOne) ClearLocalGroupName() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupName()
	return tuo
}

// SetLocalGroupDescription sets the "local_group_description" field.
func (tuo *TaskUpdateOne) SetLocalGroupDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupDescription(s)
	return tuo
}

// SetNillableLocalGroupDescription sets the "local_group_description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupDescription(*s)
	}
	return tuo
}

// ClearLocalGroupDescription clears the value of the "local_group_description" field.
func (tuo *TaskUpdateOne) ClearLocalGroupDescription() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupDescription()
	return tuo
}

// SetLocalGroupSystem sets the "local_group_system" field.
func (tuo *TaskUpdateOne) SetLocalGroupSystem(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupSystem(b)
	return tuo
}

// SetNillableLocalGroupSystem sets the "local_group_system" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupSystem(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalGroupSystem(*b)
	}
	return tuo
}

// ClearLocalGroupSystem clears the value of the "local_group_system" field.
func (tuo *TaskUpdateOne) ClearLocalGroupSystem() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupSystem()
	return tuo
}

// SetLocalGroupForce sets the "local_group_force" field.
func (tuo *TaskUpdateOne) SetLocalGroupForce(b bool) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupForce(b)
	return tuo
}

// SetNillableLocalGroupForce sets the "local_group_force" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupForce(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetLocalGroupForce(*b)
	}
	return tuo
}

// ClearLocalGroupForce clears the value of the "local_group_force" field.
func (tuo *TaskUpdateOne) ClearLocalGroupForce() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupForce()
	return tuo
}

// SetLocalGroupMembers sets the "local_group_members" field.
func (tuo *TaskUpdateOne) SetLocalGroupMembers(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupMembers(s)
	return tuo
}

// SetNillableLocalGroupMembers sets the "local_group_members" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupMembers(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupMembers(*s)
	}
	return tuo
}

// ClearLocalGroupMembers clears the value of the "local_group_members" field.
func (tuo *TaskUpdateOne) ClearLocalGroupMembers() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupMembers()
	return tuo
}

// SetLocalGroupMembersToInclude sets the "local_group_members_to_include" field.
func (tuo *TaskUpdateOne) SetLocalGroupMembersToInclude(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupMembersToInclude(s)
	return tuo
}

// SetNillableLocalGroupMembersToInclude sets the "local_group_members_to_include" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupMembersToInclude(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupMembersToInclude(*s)
	}
	return tuo
}

// ClearLocalGroupMembersToInclude clears the value of the "local_group_members_to_include" field.
func (tuo *TaskUpdateOne) ClearLocalGroupMembersToInclude() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupMembersToInclude()
	return tuo
}

// SetLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field.
func (tuo *TaskUpdateOne) SetLocalGroupMembersToExclude(s string) *TaskUpdateOne {
	tuo.mutation.SetLocalGroupMembersToExclude(s)
	return tuo
}

// SetNillableLocalGroupMembersToExclude sets the "local_group_members_to_exclude" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableLocalGroupMembersToExclude(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetLocalGroupMembersToExclude(*s)
	}
	return tuo
}

// ClearLocalGroupMembersToExclude clears the value of the "local_group_members_to_exclude" field.
func (tuo *TaskUpdateOne) ClearLocalGroupMembersToExclude() *TaskUpdateOne {
	tuo.mutation.ClearLocalGroupMembersToExclude()
	return tuo
}

// SetMsiProductid sets the "msi_productid" field.
func (tuo *TaskUpdateOne) SetMsiProductid(s string) *TaskUpdateOne {
	tuo.mutation.SetMsiProductid(s)
	return tuo
}

// SetNillableMsiProductid sets the "msi_productid" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiProductid(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMsiProductid(*s)
	}
	return tuo
}

// ClearMsiProductid clears the value of the "msi_productid" field.
func (tuo *TaskUpdateOne) ClearMsiProductid() *TaskUpdateOne {
	tuo.mutation.ClearMsiProductid()
	return tuo
}

// SetMsiPath sets the "msi_path" field.
func (tuo *TaskUpdateOne) SetMsiPath(s string) *TaskUpdateOne {
	tuo.mutation.SetMsiPath(s)
	return tuo
}

// SetNillableMsiPath sets the "msi_path" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiPath(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMsiPath(*s)
	}
	return tuo
}

// ClearMsiPath clears the value of the "msi_path" field.
func (tuo *TaskUpdateOne) ClearMsiPath() *TaskUpdateOne {
	tuo.mutation.ClearMsiPath()
	return tuo
}

// SetMsiArguments sets the "msi_arguments" field.
func (tuo *TaskUpdateOne) SetMsiArguments(s string) *TaskUpdateOne {
	tuo.mutation.SetMsiArguments(s)
	return tuo
}

// SetNillableMsiArguments sets the "msi_arguments" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiArguments(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMsiArguments(*s)
	}
	return tuo
}

// ClearMsiArguments clears the value of the "msi_arguments" field.
func (tuo *TaskUpdateOne) ClearMsiArguments() *TaskUpdateOne {
	tuo.mutation.ClearMsiArguments()
	return tuo
}

// SetMsiFileHash sets the "msi_file_hash" field.
func (tuo *TaskUpdateOne) SetMsiFileHash(s string) *TaskUpdateOne {
	tuo.mutation.SetMsiFileHash(s)
	return tuo
}

// SetNillableMsiFileHash sets the "msi_file_hash" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiFileHash(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMsiFileHash(*s)
	}
	return tuo
}

// ClearMsiFileHash clears the value of the "msi_file_hash" field.
func (tuo *TaskUpdateOne) ClearMsiFileHash() *TaskUpdateOne {
	tuo.mutation.ClearMsiFileHash()
	return tuo
}

// SetMsiFileHashAlg sets the "msi_file_hash_alg" field.
func (tuo *TaskUpdateOne) SetMsiFileHashAlg(tfha task.MsiFileHashAlg) *TaskUpdateOne {
	tuo.mutation.SetMsiFileHashAlg(tfha)
	return tuo
}

// SetNillableMsiFileHashAlg sets the "msi_file_hash_alg" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiFileHashAlg(tfha *task.MsiFileHashAlg) *TaskUpdateOne {
	if tfha != nil {
		tuo.SetMsiFileHashAlg(*tfha)
	}
	return tuo
}

// ClearMsiFileHashAlg clears the value of the "msi_file_hash_alg" field.
func (tuo *TaskUpdateOne) ClearMsiFileHashAlg() *TaskUpdateOne {
	tuo.mutation.ClearMsiFileHashAlg()
	return tuo
}

// SetMsiLogPath sets the "msi_log_path" field.
func (tuo *TaskUpdateOne) SetMsiLogPath(s string) *TaskUpdateOne {
	tuo.mutation.SetMsiLogPath(s)
	return tuo
}

// SetNillableMsiLogPath sets the "msi_log_path" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableMsiLogPath(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetMsiLogPath(*s)
	}
	return tuo
}

// ClearMsiLogPath clears the value of the "msi_log_path" field.
func (tuo *TaskUpdateOne) ClearMsiLogPath() *TaskUpdateOne {
	tuo.mutation.ClearMsiLogPath()
	return tuo
}

// SetScript sets the "script" field.
func (tuo *TaskUpdateOne) SetScript(s string) *TaskUpdateOne {
	tuo.mutation.SetScript(s)
	return tuo
}

// SetNillableScript sets the "script" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableScript(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetScript(*s)
	}
	return tuo
}

// ClearScript clears the value of the "script" field.
func (tuo *TaskUpdateOne) ClearScript() *TaskUpdateOne {
	tuo.mutation.ClearScript()
	return tuo
}

// SetScriptExecutable sets the "script_executable" field.
func (tuo *TaskUpdateOne) SetScriptExecutable(s string) *TaskUpdateOne {
	tuo.mutation.SetScriptExecutable(s)
	return tuo
}

// SetNillableScriptExecutable sets the "script_executable" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableScriptExecutable(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetScriptExecutable(*s)
	}
	return tuo
}

// ClearScriptExecutable clears the value of the "script_executable" field.
func (tuo *TaskUpdateOne) ClearScriptExecutable() *TaskUpdateOne {
	tuo.mutation.ClearScriptExecutable()
	return tuo
}

// SetScriptCreates sets the "script_creates" field.
func (tuo *TaskUpdateOne) SetScriptCreates(s string) *TaskUpdateOne {
	tuo.mutation.SetScriptCreates(s)
	return tuo
}

// SetNillableScriptCreates sets the "script_creates" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableScriptCreates(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetScriptCreates(*s)
	}
	return tuo
}

// ClearScriptCreates clears the value of the "script_creates" field.
func (tuo *TaskUpdateOne) ClearScriptCreates() *TaskUpdateOne {
	tuo.mutation.ClearScriptCreates()
	return tuo
}

// SetScriptRun sets the "script_run" field.
func (tuo *TaskUpdateOne) SetScriptRun(tr task.ScriptRun) *TaskUpdateOne {
	tuo.mutation.SetScriptRun(tr)
	return tuo
}

// SetNillableScriptRun sets the "script_run" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableScriptRun(tr *task.ScriptRun) *TaskUpdateOne {
	if tr != nil {
		tuo.SetScriptRun(*tr)
	}
	return tuo
}

// ClearScriptRun clears the value of the "script_run" field.
func (tuo *TaskUpdateOne) ClearScriptRun() *TaskUpdateOne {
	tuo.mutation.ClearScriptRun()
	return tuo
}

// SetAgentType sets the "agent_type" field.
func (tuo *TaskUpdateOne) SetAgentType(tt task.AgentType) *TaskUpdateOne {
	tuo.mutation.SetAgentType(tt)
	return tuo
}

// SetNillableAgentType sets the "agent_type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableAgentType(tt *task.AgentType) *TaskUpdateOne {
	if tt != nil {
		tuo.SetAgentType(*tt)
	}
	return tuo
}

// ClearAgentType clears the value of the "agent_type" field.
func (tuo *TaskUpdateOne) ClearAgentType() *TaskUpdateOne {
	tuo.mutation.ClearAgentType()
	return tuo
}

// SetWhen sets the "when" field.
func (tuo *TaskUpdateOne) SetWhen(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetWhen(t)
	return tuo
}

// SetNillableWhen sets the "when" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableWhen(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetWhen(*t)
	}
	return tuo
}

// ClearWhen clears the value of the "when" field.
func (tuo *TaskUpdateOne) ClearWhen() *TaskUpdateOne {
	tuo.mutation.ClearWhen()
	return tuo
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (tuo *TaskUpdateOne) AddTagIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddTagIDs(ids...)
	return tuo
}

// AddTags adds the "tags" edges to the Tag entity.
func (tuo *TaskUpdateOne) AddTags(t ...*Tag) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.AddTagIDs(ids...)
}

// SetProfileID sets the "profile" edge to the Profile entity by ID.
func (tuo *TaskUpdateOne) SetProfileID(id int) *TaskUpdateOne {
	tuo.mutation.SetProfileID(id)
	return tuo
}

// SetNillableProfileID sets the "profile" edge to the Profile entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableProfileID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetProfileID(*id)
	}
	return tuo
}

// SetProfile sets the "profile" edge to the Profile entity.
func (tuo *TaskUpdateOne) SetProfile(p *Profile) *TaskUpdateOne {
	return tuo.SetProfileID(p.ID)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearTags clears all "tags" edges to the Tag entity.
func (tuo *TaskUpdateOne) ClearTags() *TaskUpdateOne {
	tuo.mutation.ClearTags()
	return tuo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (tuo *TaskUpdateOne) RemoveTagIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveTagIDs(ids...)
	return tuo
}

// RemoveTags removes "tags" edges to Tag entities.
func (tuo *TaskUpdateOne) RemoveTags(t ...*Tag) *TaskUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return tuo.RemoveTagIDs(ids...)
}

// ClearProfile clears the "profile" edge to the Profile entity.
func (tuo *TaskUpdateOne) ClearProfile() *TaskUpdateOne {
	tuo.mutation.ClearProfile()
	return tuo
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.GetType(); ok {
		if err := task.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Task.type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.RegistryKeyValueType(); ok {
		if err := task.RegistryKeyValueTypeValidator(v); err != nil {
			return &ValidationError{Name: "registry_key_value_type", err: fmt.Errorf(`ent: validator failed for field "Task.registry_key_value_type": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.MsiFileHashAlg(); ok {
		if err := task.MsiFileHashAlgValidator(v); err != nil {
			return &ValidationError{Name: "msi_file_hash_alg", err: fmt.Errorf(`ent: validator failed for field "Task.msi_file_hash_alg": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.ScriptRun(); ok {
		if err := task.ScriptRunValidator(v); err != nil {
			return &ValidationError{Name: "script_run", err: fmt.Errorf(`ent: validator failed for field "Task.script_run": %w`, err)}
		}
	}
	if v, ok := tuo.mutation.AgentType(); ok {
		if err := task.AgentTypeValidator(v); err != nil {
			return &ValidationError{Name: "agent_type", err: fmt.Errorf(`ent: validator failed for field "Task.agent_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (tuo *TaskUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *TaskUpdateOne {
	tuo.modifiers = append(tuo.modifiers, modifiers...)
	return tuo
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeEnum, value)
	}
	if value, ok := tuo.mutation.PackageID(); ok {
		_spec.SetField(task.FieldPackageID, field.TypeString, value)
	}
	if tuo.mutation.PackageIDCleared() {
		_spec.ClearField(task.FieldPackageID, field.TypeString)
	}
	if value, ok := tuo.mutation.PackageName(); ok {
		_spec.SetField(task.FieldPackageName, field.TypeString, value)
	}
	if tuo.mutation.PackageNameCleared() {
		_spec.ClearField(task.FieldPackageName, field.TypeString)
	}
	if value, ok := tuo.mutation.PackageLatest(); ok {
		_spec.SetField(task.FieldPackageLatest, field.TypeBool, value)
	}
	if tuo.mutation.PackageLatestCleared() {
		_spec.ClearField(task.FieldPackageLatest, field.TypeBool)
	}
	if value, ok := tuo.mutation.RegistryKey(); ok {
		_spec.SetField(task.FieldRegistryKey, field.TypeString, value)
	}
	if tuo.mutation.RegistryKeyCleared() {
		_spec.ClearField(task.FieldRegistryKey, field.TypeString)
	}
	if value, ok := tuo.mutation.RegistryKeyValueName(); ok {
		_spec.SetField(task.FieldRegistryKeyValueName, field.TypeString, value)
	}
	if tuo.mutation.RegistryKeyValueNameCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueName, field.TypeString)
	}
	if value, ok := tuo.mutation.RegistryKeyValueType(); ok {
		_spec.SetField(task.FieldRegistryKeyValueType, field.TypeEnum, value)
	}
	if tuo.mutation.RegistryKeyValueTypeCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueType, field.TypeEnum)
	}
	if value, ok := tuo.mutation.RegistryKeyValueData(); ok {
		_spec.SetField(task.FieldRegistryKeyValueData, field.TypeString, value)
	}
	if tuo.mutation.RegistryKeyValueDataCleared() {
		_spec.ClearField(task.FieldRegistryKeyValueData, field.TypeString)
	}
	if value, ok := tuo.mutation.RegistryHex(); ok {
		_spec.SetField(task.FieldRegistryHex, field.TypeBool, value)
	}
	if tuo.mutation.RegistryHexCleared() {
		_spec.ClearField(task.FieldRegistryHex, field.TypeBool)
	}
	if value, ok := tuo.mutation.RegistryForce(); ok {
		_spec.SetField(task.FieldRegistryForce, field.TypeBool, value)
	}
	if tuo.mutation.RegistryForceCleared() {
		_spec.ClearField(task.FieldRegistryForce, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserUsername(); ok {
		_spec.SetField(task.FieldLocalUserUsername, field.TypeString, value)
	}
	if tuo.mutation.LocalUserUsernameCleared() {
		_spec.ClearField(task.FieldLocalUserUsername, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserDescription(); ok {
		_spec.SetField(task.FieldLocalUserDescription, field.TypeString, value)
	}
	if tuo.mutation.LocalUserDescriptionCleared() {
		_spec.ClearField(task.FieldLocalUserDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserDisable(); ok {
		_spec.SetField(task.FieldLocalUserDisable, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserDisableCleared() {
		_spec.ClearField(task.FieldLocalUserDisable, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserFullname(); ok {
		_spec.SetField(task.FieldLocalUserFullname, field.TypeString, value)
	}
	if tuo.mutation.LocalUserFullnameCleared() {
		_spec.ClearField(task.FieldLocalUserFullname, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPassword(); ok {
		_spec.SetField(task.FieldLocalUserPassword, field.TypeString, value)
	}
	if tuo.mutation.LocalUserPasswordCleared() {
		_spec.ClearField(task.FieldLocalUserPassword, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPasswordChangeNotAllowed(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeNotAllowed, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserPasswordChangeNotAllowedCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordChangeNotAllowed, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserPasswordChangeRequired(); ok {
		_spec.SetField(task.FieldLocalUserPasswordChangeRequired, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserPasswordChangeRequiredCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordChangeRequired, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserPasswordNeverExpires(); ok {
		_spec.SetField(task.FieldLocalUserPasswordNeverExpires, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserPasswordNeverExpiresCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordNeverExpires, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserAppend(); ok {
		_spec.SetField(task.FieldLocalUserAppend, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserAppendCleared() {
		_spec.ClearField(task.FieldLocalUserAppend, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserCreateHome(); ok {
		_spec.SetField(task.FieldLocalUserCreateHome, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserCreateHomeCleared() {
		_spec.ClearField(task.FieldLocalUserCreateHome, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserExpires(); ok {
		_spec.SetField(task.FieldLocalUserExpires, field.TypeString, value)
	}
	if tuo.mutation.LocalUserExpiresCleared() {
		_spec.ClearField(task.FieldLocalUserExpires, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserForce(); ok {
		_spec.SetField(task.FieldLocalUserForce, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserForceCleared() {
		_spec.ClearField(task.FieldLocalUserForce, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserGenerateSSHKey(); ok {
		_spec.SetField(task.FieldLocalUserGenerateSSHKey, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserGenerateSSHKeyCleared() {
		_spec.ClearField(task.FieldLocalUserGenerateSSHKey, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserGroup(); ok {
		_spec.SetField(task.FieldLocalUserGroup, field.TypeString, value)
	}
	if tuo.mutation.LocalUserGroupCleared() {
		_spec.ClearField(task.FieldLocalUserGroup, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserGroups(); ok {
		_spec.SetField(task.FieldLocalUserGroups, field.TypeString, value)
	}
	if tuo.mutation.LocalUserGroupsCleared() {
		_spec.ClearField(task.FieldLocalUserGroups, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserHome(); ok {
		_spec.SetField(task.FieldLocalUserHome, field.TypeString, value)
	}
	if tuo.mutation.LocalUserHomeCleared() {
		_spec.ClearField(task.FieldLocalUserHome, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserMoveHome(); ok {
		_spec.SetField(task.FieldLocalUserMoveHome, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserMoveHomeCleared() {
		_spec.ClearField(task.FieldLocalUserMoveHome, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserNonunique(); ok {
		_spec.SetField(task.FieldLocalUserNonunique, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserNonuniqueCleared() {
		_spec.ClearField(task.FieldLocalUserNonunique, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserPasswordExpireAccountDisable(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireAccountDisable, field.TypeString, value)
	}
	if tuo.mutation.LocalUserPasswordExpireAccountDisableCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireAccountDisable, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPasswordExpireMax(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMax, field.TypeString, value)
	}
	if tuo.mutation.LocalUserPasswordExpireMaxCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireMax, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPasswordExpireMin(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireMin, field.TypeString, value)
	}
	if tuo.mutation.LocalUserPasswordExpireMinCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireMin, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPasswordExpireWarn(); ok {
		_spec.SetField(task.FieldLocalUserPasswordExpireWarn, field.TypeString, value)
	}
	if tuo.mutation.LocalUserPasswordExpireWarnCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordExpireWarn, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserPasswordLock(); ok {
		_spec.SetField(task.FieldLocalUserPasswordLock, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserPasswordLockCleared() {
		_spec.ClearField(task.FieldLocalUserPasswordLock, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserSeuser(); ok {
		_spec.SetField(task.FieldLocalUserSeuser, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSeuserCleared() {
		_spec.ClearField(task.FieldLocalUserSeuser, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserShell(); ok {
		_spec.SetField(task.FieldLocalUserShell, field.TypeString, value)
	}
	if tuo.mutation.LocalUserShellCleared() {
		_spec.ClearField(task.FieldLocalUserShell, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSkeleton(); ok {
		_spec.SetField(task.FieldLocalUserSkeleton, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSkeletonCleared() {
		_spec.ClearField(task.FieldLocalUserSkeleton, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSystem(); ok {
		_spec.SetField(task.FieldLocalUserSystem, field.TypeBool, value)
	}
	if tuo.mutation.LocalUserSystemCleared() {
		_spec.ClearField(task.FieldLocalUserSystem, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalUserID(); ok {
		_spec.SetField(task.FieldLocalUserID, field.TypeString, value)
	}
	if tuo.mutation.LocalUserIDCleared() {
		_spec.ClearField(task.FieldLocalUserID, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserIDMax(); ok {
		_spec.SetField(task.FieldLocalUserIDMax, field.TypeString, value)
	}
	if tuo.mutation.LocalUserIDMaxCleared() {
		_spec.ClearField(task.FieldLocalUserIDMax, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserIDMin(); ok {
		_spec.SetField(task.FieldLocalUserIDMin, field.TypeString, value)
	}
	if tuo.mutation.LocalUserIDMinCleared() {
		_spec.ClearField(task.FieldLocalUserIDMin, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSSHKeyBits(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyBits, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSSHKeyBitsCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyBits, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSSHKeyComment(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyComment, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSSHKeyCommentCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyComment, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSSHKeyFile(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyFile, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSSHKeyFileCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyFile, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSSHKeyPassphrase(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyPassphrase, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSSHKeyPassphraseCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyPassphrase, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserSSHKeyType(); ok {
		_spec.SetField(task.FieldLocalUserSSHKeyType, field.TypeString, value)
	}
	if tuo.mutation.LocalUserSSHKeyTypeCleared() {
		_spec.ClearField(task.FieldLocalUserSSHKeyType, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalUserUmask(); ok {
		_spec.SetField(task.FieldLocalUserUmask, field.TypeString, value)
	}
	if tuo.mutation.LocalUserUmaskCleared() {
		_spec.ClearField(task.FieldLocalUserUmask, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupID(); ok {
		_spec.SetField(task.FieldLocalGroupID, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupIDCleared() {
		_spec.ClearField(task.FieldLocalGroupID, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupName(); ok {
		_spec.SetField(task.FieldLocalGroupName, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupNameCleared() {
		_spec.ClearField(task.FieldLocalGroupName, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupDescription(); ok {
		_spec.SetField(task.FieldLocalGroupDescription, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupDescriptionCleared() {
		_spec.ClearField(task.FieldLocalGroupDescription, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupSystem(); ok {
		_spec.SetField(task.FieldLocalGroupSystem, field.TypeBool, value)
	}
	if tuo.mutation.LocalGroupSystemCleared() {
		_spec.ClearField(task.FieldLocalGroupSystem, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalGroupForce(); ok {
		_spec.SetField(task.FieldLocalGroupForce, field.TypeBool, value)
	}
	if tuo.mutation.LocalGroupForceCleared() {
		_spec.ClearField(task.FieldLocalGroupForce, field.TypeBool)
	}
	if value, ok := tuo.mutation.LocalGroupMembers(); ok {
		_spec.SetField(task.FieldLocalGroupMembers, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupMembersCleared() {
		_spec.ClearField(task.FieldLocalGroupMembers, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupMembersToInclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToInclude, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupMembersToIncludeCleared() {
		_spec.ClearField(task.FieldLocalGroupMembersToInclude, field.TypeString)
	}
	if value, ok := tuo.mutation.LocalGroupMembersToExclude(); ok {
		_spec.SetField(task.FieldLocalGroupMembersToExclude, field.TypeString, value)
	}
	if tuo.mutation.LocalGroupMembersToExcludeCleared() {
		_spec.ClearField(task.FieldLocalGroupMembersToExclude, field.TypeString)
	}
	if value, ok := tuo.mutation.MsiProductid(); ok {
		_spec.SetField(task.FieldMsiProductid, field.TypeString, value)
	}
	if tuo.mutation.MsiProductidCleared() {
		_spec.ClearField(task.FieldMsiProductid, field.TypeString)
	}
	if value, ok := tuo.mutation.MsiPath(); ok {
		_spec.SetField(task.FieldMsiPath, field.TypeString, value)
	}
	if tuo.mutation.MsiPathCleared() {
		_spec.ClearField(task.FieldMsiPath, field.TypeString)
	}
	if value, ok := tuo.mutation.MsiArguments(); ok {
		_spec.SetField(task.FieldMsiArguments, field.TypeString, value)
	}
	if tuo.mutation.MsiArgumentsCleared() {
		_spec.ClearField(task.FieldMsiArguments, field.TypeString)
	}
	if value, ok := tuo.mutation.MsiFileHash(); ok {
		_spec.SetField(task.FieldMsiFileHash, field.TypeString, value)
	}
	if tuo.mutation.MsiFileHashCleared() {
		_spec.ClearField(task.FieldMsiFileHash, field.TypeString)
	}
	if value, ok := tuo.mutation.MsiFileHashAlg(); ok {
		_spec.SetField(task.FieldMsiFileHashAlg, field.TypeEnum, value)
	}
	if tuo.mutation.MsiFileHashAlgCleared() {
		_spec.ClearField(task.FieldMsiFileHashAlg, field.TypeEnum)
	}
	if value, ok := tuo.mutation.MsiLogPath(); ok {
		_spec.SetField(task.FieldMsiLogPath, field.TypeString, value)
	}
	if tuo.mutation.MsiLogPathCleared() {
		_spec.ClearField(task.FieldMsiLogPath, field.TypeString)
	}
	if value, ok := tuo.mutation.Script(); ok {
		_spec.SetField(task.FieldScript, field.TypeString, value)
	}
	if tuo.mutation.ScriptCleared() {
		_spec.ClearField(task.FieldScript, field.TypeString)
	}
	if value, ok := tuo.mutation.ScriptExecutable(); ok {
		_spec.SetField(task.FieldScriptExecutable, field.TypeString, value)
	}
	if tuo.mutation.ScriptExecutableCleared() {
		_spec.ClearField(task.FieldScriptExecutable, field.TypeString)
	}
	if value, ok := tuo.mutation.ScriptCreates(); ok {
		_spec.SetField(task.FieldScriptCreates, field.TypeString, value)
	}
	if tuo.mutation.ScriptCreatesCleared() {
		_spec.ClearField(task.FieldScriptCreates, field.TypeString)
	}
	if value, ok := tuo.mutation.ScriptRun(); ok {
		_spec.SetField(task.FieldScriptRun, field.TypeEnum, value)
	}
	if tuo.mutation.ScriptRunCleared() {
		_spec.ClearField(task.FieldScriptRun, field.TypeEnum)
	}
	if value, ok := tuo.mutation.AgentType(); ok {
		_spec.SetField(task.FieldAgentType, field.TypeEnum, value)
	}
	if tuo.mutation.AgentTypeCleared() {
		_spec.ClearField(task.FieldAgentType, field.TypeEnum)
	}
	if value, ok := tuo.mutation.When(); ok {
		_spec.SetField(task.FieldWhen, field.TypeTime, value)
	}
	if tuo.mutation.WhenCleared() {
		_spec.ClearField(task.FieldWhen, field.TypeTime)
	}
	if tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !tuo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.TagsTable,
			Columns: []string{task.TagsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ProfileCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProfileTable,
			Columns: []string{task.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ProfileIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ProfileTable,
			Columns: []string{task.ProfileColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profile.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(tuo.modifiers...)
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
