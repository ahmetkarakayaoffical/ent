// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/open-uem/ent/agent"
	"github.com/open-uem/ent/antivirus"
	"github.com/open-uem/ent/app"
	"github.com/open-uem/ent/computer"
	"github.com/open-uem/ent/deployment"
	"github.com/open-uem/ent/logicaldisk"
	"github.com/open-uem/ent/memoryslot"
	"github.com/open-uem/ent/metadata"
	"github.com/open-uem/ent/monitor"
	"github.com/open-uem/ent/networkadapter"
	"github.com/open-uem/ent/operatingsystem"
	"github.com/open-uem/ent/predicate"
	"github.com/open-uem/ent/printer"
	"github.com/open-uem/ent/profileissue"
	"github.com/open-uem/ent/release"
	"github.com/open-uem/ent/share"
	"github.com/open-uem/ent/site"
	"github.com/open-uem/ent/systemupdate"
	"github.com/open-uem/ent/tag"
	"github.com/open-uem/ent/update"
	"github.com/open-uem/ent/wingetconfigexclusion"
)

// AgentUpdate is the builder for updating Agent entities.
type AgentUpdate struct {
	config
	hooks     []Hook
	mutation  *AgentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// Where appends a list predicates to the AgentUpdate builder.
func (au *AgentUpdate) Where(ps ...predicate.Agent) *AgentUpdate {
	au.mutation.Where(ps...)
	return au
}

// SetOs sets the "os" field.
func (au *AgentUpdate) SetOs(s string) *AgentUpdate {
	au.mutation.SetOs(s)
	return au
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (au *AgentUpdate) SetNillableOs(s *string) *AgentUpdate {
	if s != nil {
		au.SetOs(*s)
	}
	return au
}

// SetHostname sets the "hostname" field.
func (au *AgentUpdate) SetHostname(s string) *AgentUpdate {
	au.mutation.SetHostname(s)
	return au
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (au *AgentUpdate) SetNillableHostname(s *string) *AgentUpdate {
	if s != nil {
		au.SetHostname(*s)
	}
	return au
}

// SetIP sets the "ip" field.
func (au *AgentUpdate) SetIP(s string) *AgentUpdate {
	au.mutation.SetIP(s)
	return au
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (au *AgentUpdate) SetNillableIP(s *string) *AgentUpdate {
	if s != nil {
		au.SetIP(*s)
	}
	return au
}

// SetMAC sets the "mac" field.
func (au *AgentUpdate) SetMAC(s string) *AgentUpdate {
	au.mutation.SetMAC(s)
	return au
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (au *AgentUpdate) SetNillableMAC(s *string) *AgentUpdate {
	if s != nil {
		au.SetMAC(*s)
	}
	return au
}

// SetFirstContact sets the "first_contact" field.
func (au *AgentUpdate) SetFirstContact(t time.Time) *AgentUpdate {
	au.mutation.SetFirstContact(t)
	return au
}

// SetNillableFirstContact sets the "first_contact" field if the given value is not nil.
func (au *AgentUpdate) SetNillableFirstContact(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetFirstContact(*t)
	}
	return au
}

// ClearFirstContact clears the value of the "first_contact" field.
func (au *AgentUpdate) ClearFirstContact() *AgentUpdate {
	au.mutation.ClearFirstContact()
	return au
}

// SetLastContact sets the "last_contact" field.
func (au *AgentUpdate) SetLastContact(t time.Time) *AgentUpdate {
	au.mutation.SetLastContact(t)
	return au
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (au *AgentUpdate) SetNillableLastContact(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetLastContact(*t)
	}
	return au
}

// ClearLastContact clears the value of the "last_contact" field.
func (au *AgentUpdate) ClearLastContact() *AgentUpdate {
	au.mutation.ClearLastContact()
	return au
}

// SetVnc sets the "vnc" field.
func (au *AgentUpdate) SetVnc(s string) *AgentUpdate {
	au.mutation.SetVnc(s)
	return au
}

// SetNillableVnc sets the "vnc" field if the given value is not nil.
func (au *AgentUpdate) SetNillableVnc(s *string) *AgentUpdate {
	if s != nil {
		au.SetVnc(*s)
	}
	return au
}

// ClearVnc clears the value of the "vnc" field.
func (au *AgentUpdate) ClearVnc() *AgentUpdate {
	au.mutation.ClearVnc()
	return au
}

// SetNotes sets the "notes" field.
func (au *AgentUpdate) SetNotes(s string) *AgentUpdate {
	au.mutation.SetNotes(s)
	return au
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (au *AgentUpdate) SetNillableNotes(s *string) *AgentUpdate {
	if s != nil {
		au.SetNotes(*s)
	}
	return au
}

// ClearNotes clears the value of the "notes" field.
func (au *AgentUpdate) ClearNotes() *AgentUpdate {
	au.mutation.ClearNotes()
	return au
}

// SetUpdateTaskStatus sets the "update_task_status" field.
func (au *AgentUpdate) SetUpdateTaskStatus(s string) *AgentUpdate {
	au.mutation.SetUpdateTaskStatus(s)
	return au
}

// SetNillableUpdateTaskStatus sets the "update_task_status" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdateTaskStatus(s *string) *AgentUpdate {
	if s != nil {
		au.SetUpdateTaskStatus(*s)
	}
	return au
}

// ClearUpdateTaskStatus clears the value of the "update_task_status" field.
func (au *AgentUpdate) ClearUpdateTaskStatus() *AgentUpdate {
	au.mutation.ClearUpdateTaskStatus()
	return au
}

// SetUpdateTaskDescription sets the "update_task_description" field.
func (au *AgentUpdate) SetUpdateTaskDescription(s string) *AgentUpdate {
	au.mutation.SetUpdateTaskDescription(s)
	return au
}

// SetNillableUpdateTaskDescription sets the "update_task_description" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdateTaskDescription(s *string) *AgentUpdate {
	if s != nil {
		au.SetUpdateTaskDescription(*s)
	}
	return au
}

// ClearUpdateTaskDescription clears the value of the "update_task_description" field.
func (au *AgentUpdate) ClearUpdateTaskDescription() *AgentUpdate {
	au.mutation.ClearUpdateTaskDescription()
	return au
}

// SetUpdateTaskResult sets the "update_task_result" field.
func (au *AgentUpdate) SetUpdateTaskResult(s string) *AgentUpdate {
	au.mutation.SetUpdateTaskResult(s)
	return au
}

// SetNillableUpdateTaskResult sets the "update_task_result" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdateTaskResult(s *string) *AgentUpdate {
	if s != nil {
		au.SetUpdateTaskResult(*s)
	}
	return au
}

// ClearUpdateTaskResult clears the value of the "update_task_result" field.
func (au *AgentUpdate) ClearUpdateTaskResult() *AgentUpdate {
	au.mutation.ClearUpdateTaskResult()
	return au
}

// SetUpdateTaskExecution sets the "update_task_execution" field.
func (au *AgentUpdate) SetUpdateTaskExecution(t time.Time) *AgentUpdate {
	au.mutation.SetUpdateTaskExecution(t)
	return au
}

// SetNillableUpdateTaskExecution sets the "update_task_execution" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdateTaskExecution(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetUpdateTaskExecution(*t)
	}
	return au
}

// ClearUpdateTaskExecution clears the value of the "update_task_execution" field.
func (au *AgentUpdate) ClearUpdateTaskExecution() *AgentUpdate {
	au.mutation.ClearUpdateTaskExecution()
	return au
}

// SetUpdateTaskVersion sets the "update_task_version" field.
func (au *AgentUpdate) SetUpdateTaskVersion(s string) *AgentUpdate {
	au.mutation.SetUpdateTaskVersion(s)
	return au
}

// SetNillableUpdateTaskVersion sets the "update_task_version" field if the given value is not nil.
func (au *AgentUpdate) SetNillableUpdateTaskVersion(s *string) *AgentUpdate {
	if s != nil {
		au.SetUpdateTaskVersion(*s)
	}
	return au
}

// ClearUpdateTaskVersion clears the value of the "update_task_version" field.
func (au *AgentUpdate) ClearUpdateTaskVersion() *AgentUpdate {
	au.mutation.ClearUpdateTaskVersion()
	return au
}

// SetVncProxyPort sets the "vnc_proxy_port" field.
func (au *AgentUpdate) SetVncProxyPort(s string) *AgentUpdate {
	au.mutation.SetVncProxyPort(s)
	return au
}

// SetNillableVncProxyPort sets the "vnc_proxy_port" field if the given value is not nil.
func (au *AgentUpdate) SetNillableVncProxyPort(s *string) *AgentUpdate {
	if s != nil {
		au.SetVncProxyPort(*s)
	}
	return au
}

// ClearVncProxyPort clears the value of the "vnc_proxy_port" field.
func (au *AgentUpdate) ClearVncProxyPort() *AgentUpdate {
	au.mutation.ClearVncProxyPort()
	return au
}

// SetSftpPort sets the "sftp_port" field.
func (au *AgentUpdate) SetSftpPort(s string) *AgentUpdate {
	au.mutation.SetSftpPort(s)
	return au
}

// SetNillableSftpPort sets the "sftp_port" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSftpPort(s *string) *AgentUpdate {
	if s != nil {
		au.SetSftpPort(*s)
	}
	return au
}

// ClearSftpPort clears the value of the "sftp_port" field.
func (au *AgentUpdate) ClearSftpPort() *AgentUpdate {
	au.mutation.ClearSftpPort()
	return au
}

// SetAgentStatus sets the "agent_status" field.
func (au *AgentUpdate) SetAgentStatus(as agent.AgentStatus) *AgentUpdate {
	au.mutation.SetAgentStatus(as)
	return au
}

// SetNillableAgentStatus sets the "agent_status" field if the given value is not nil.
func (au *AgentUpdate) SetNillableAgentStatus(as *agent.AgentStatus) *AgentUpdate {
	if as != nil {
		au.SetAgentStatus(*as)
	}
	return au
}

// ClearAgentStatus clears the value of the "agent_status" field.
func (au *AgentUpdate) ClearAgentStatus() *AgentUpdate {
	au.mutation.ClearAgentStatus()
	return au
}

// SetCertificateReady sets the "certificate_ready" field.
func (au *AgentUpdate) SetCertificateReady(b bool) *AgentUpdate {
	au.mutation.SetCertificateReady(b)
	return au
}

// SetNillableCertificateReady sets the "certificate_ready" field if the given value is not nil.
func (au *AgentUpdate) SetNillableCertificateReady(b *bool) *AgentUpdate {
	if b != nil {
		au.SetCertificateReady(*b)
	}
	return au
}

// ClearCertificateReady clears the value of the "certificate_ready" field.
func (au *AgentUpdate) ClearCertificateReady() *AgentUpdate {
	au.mutation.ClearCertificateReady()
	return au
}

// SetRestartRequired sets the "restart_required" field.
func (au *AgentUpdate) SetRestartRequired(b bool) *AgentUpdate {
	au.mutation.SetRestartRequired(b)
	return au
}

// SetNillableRestartRequired sets the "restart_required" field if the given value is not nil.
func (au *AgentUpdate) SetNillableRestartRequired(b *bool) *AgentUpdate {
	if b != nil {
		au.SetRestartRequired(*b)
	}
	return au
}

// ClearRestartRequired clears the value of the "restart_required" field.
func (au *AgentUpdate) ClearRestartRequired() *AgentUpdate {
	au.mutation.ClearRestartRequired()
	return au
}

// SetIsRemote sets the "is_remote" field.
func (au *AgentUpdate) SetIsRemote(b bool) *AgentUpdate {
	au.mutation.SetIsRemote(b)
	return au
}

// SetNillableIsRemote sets the "is_remote" field if the given value is not nil.
func (au *AgentUpdate) SetNillableIsRemote(b *bool) *AgentUpdate {
	if b != nil {
		au.SetIsRemote(*b)
	}
	return au
}

// ClearIsRemote clears the value of the "is_remote" field.
func (au *AgentUpdate) ClearIsRemote() *AgentUpdate {
	au.mutation.ClearIsRemote()
	return au
}

// SetDebugMode sets the "debug_mode" field.
func (au *AgentUpdate) SetDebugMode(b bool) *AgentUpdate {
	au.mutation.SetDebugMode(b)
	return au
}

// SetNillableDebugMode sets the "debug_mode" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDebugMode(b *bool) *AgentUpdate {
	if b != nil {
		au.SetDebugMode(*b)
	}
	return au
}

// ClearDebugMode clears the value of the "debug_mode" field.
func (au *AgentUpdate) ClearDebugMode() *AgentUpdate {
	au.mutation.ClearDebugMode()
	return au
}

// SetSftpService sets the "sftp_service" field.
func (au *AgentUpdate) SetSftpService(b bool) *AgentUpdate {
	au.mutation.SetSftpService(b)
	return au
}

// SetNillableSftpService sets the "sftp_service" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSftpService(b *bool) *AgentUpdate {
	if b != nil {
		au.SetSftpService(*b)
	}
	return au
}

// ClearSftpService clears the value of the "sftp_service" field.
func (au *AgentUpdate) ClearSftpService() *AgentUpdate {
	au.mutation.ClearSftpService()
	return au
}

// SetRemoteAssistance sets the "remote_assistance" field.
func (au *AgentUpdate) SetRemoteAssistance(b bool) *AgentUpdate {
	au.mutation.SetRemoteAssistance(b)
	return au
}

// SetNillableRemoteAssistance sets the "remote_assistance" field if the given value is not nil.
func (au *AgentUpdate) SetNillableRemoteAssistance(b *bool) *AgentUpdate {
	if b != nil {
		au.SetRemoteAssistance(*b)
	}
	return au
}

// ClearRemoteAssistance clears the value of the "remote_assistance" field.
func (au *AgentUpdate) ClearRemoteAssistance() *AgentUpdate {
	au.mutation.ClearRemoteAssistance()
	return au
}

// SetSettingsModified sets the "settings_modified" field.
func (au *AgentUpdate) SetSettingsModified(t time.Time) *AgentUpdate {
	au.mutation.SetSettingsModified(t)
	return au
}

// SetNillableSettingsModified sets the "settings_modified" field if the given value is not nil.
func (au *AgentUpdate) SetNillableSettingsModified(t *time.Time) *AgentUpdate {
	if t != nil {
		au.SetSettingsModified(*t)
	}
	return au
}

// ClearSettingsModified clears the value of the "settings_modified" field.
func (au *AgentUpdate) ClearSettingsModified() *AgentUpdate {
	au.mutation.ClearSettingsModified()
	return au
}

// SetDescription sets the "description" field.
func (au *AgentUpdate) SetDescription(s string) *AgentUpdate {
	au.mutation.SetDescription(s)
	return au
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (au *AgentUpdate) SetNillableDescription(s *string) *AgentUpdate {
	if s != nil {
		au.SetDescription(*s)
	}
	return au
}

// ClearDescription clears the value of the "description" field.
func (au *AgentUpdate) ClearDescription() *AgentUpdate {
	au.mutation.ClearDescription()
	return au
}

// SetEndpointType sets the "endpoint_type" field.
func (au *AgentUpdate) SetEndpointType(at agent.EndpointType) *AgentUpdate {
	au.mutation.SetEndpointType(at)
	return au
}

// SetNillableEndpointType sets the "endpoint_type" field if the given value is not nil.
func (au *AgentUpdate) SetNillableEndpointType(at *agent.EndpointType) *AgentUpdate {
	if at != nil {
		au.SetEndpointType(*at)
	}
	return au
}

// ClearEndpointType clears the value of the "endpoint_type" field.
func (au *AgentUpdate) ClearEndpointType() *AgentUpdate {
	au.mutation.ClearEndpointType()
	return au
}

// SetComputerID sets the "computer" edge to the Computer entity by ID.
func (au *AgentUpdate) SetComputerID(id int) *AgentUpdate {
	au.mutation.SetComputerID(id)
	return au
}

// SetNillableComputerID sets the "computer" edge to the Computer entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableComputerID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetComputerID(*id)
	}
	return au
}

// SetComputer sets the "computer" edge to the Computer entity.
func (au *AgentUpdate) SetComputer(c *Computer) *AgentUpdate {
	return au.SetComputerID(c.ID)
}

// SetOperatingsystemID sets the "operatingsystem" edge to the OperatingSystem entity by ID.
func (au *AgentUpdate) SetOperatingsystemID(id int) *AgentUpdate {
	au.mutation.SetOperatingsystemID(id)
	return au
}

// SetNillableOperatingsystemID sets the "operatingsystem" edge to the OperatingSystem entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableOperatingsystemID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetOperatingsystemID(*id)
	}
	return au
}

// SetOperatingsystem sets the "operatingsystem" edge to the OperatingSystem entity.
func (au *AgentUpdate) SetOperatingsystem(o *OperatingSystem) *AgentUpdate {
	return au.SetOperatingsystemID(o.ID)
}

// SetSystemupdateID sets the "systemupdate" edge to the SystemUpdate entity by ID.
func (au *AgentUpdate) SetSystemupdateID(id int) *AgentUpdate {
	au.mutation.SetSystemupdateID(id)
	return au
}

// SetNillableSystemupdateID sets the "systemupdate" edge to the SystemUpdate entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableSystemupdateID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetSystemupdateID(*id)
	}
	return au
}

// SetSystemupdate sets the "systemupdate" edge to the SystemUpdate entity.
func (au *AgentUpdate) SetSystemupdate(s *SystemUpdate) *AgentUpdate {
	return au.SetSystemupdateID(s.ID)
}

// SetAntivirusID sets the "antivirus" edge to the Antivirus entity by ID.
func (au *AgentUpdate) SetAntivirusID(id int) *AgentUpdate {
	au.mutation.SetAntivirusID(id)
	return au
}

// SetNillableAntivirusID sets the "antivirus" edge to the Antivirus entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableAntivirusID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetAntivirusID(*id)
	}
	return au
}

// SetAntivirus sets the "antivirus" edge to the Antivirus entity.
func (au *AgentUpdate) SetAntivirus(a *Antivirus) *AgentUpdate {
	return au.SetAntivirusID(a.ID)
}

// AddLogicaldiskIDs adds the "logicaldisks" edge to the LogicalDisk entity by IDs.
func (au *AgentUpdate) AddLogicaldiskIDs(ids ...int) *AgentUpdate {
	au.mutation.AddLogicaldiskIDs(ids...)
	return au
}

// AddLogicaldisks adds the "logicaldisks" edges to the LogicalDisk entity.
func (au *AgentUpdate) AddLogicaldisks(l ...*LogicalDisk) *AgentUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.AddLogicaldiskIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (au *AgentUpdate) AddAppIDs(ids ...int) *AgentUpdate {
	au.mutation.AddAppIDs(ids...)
	return au
}

// AddApps adds the "apps" edges to the App entity.
func (au *AgentUpdate) AddApps(a ...*App) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.AddAppIDs(ids...)
}

// AddMonitorIDs adds the "monitors" edge to the Monitor entity by IDs.
func (au *AgentUpdate) AddMonitorIDs(ids ...int) *AgentUpdate {
	au.mutation.AddMonitorIDs(ids...)
	return au
}

// AddMonitors adds the "monitors" edges to the Monitor entity.
func (au *AgentUpdate) AddMonitors(m ...*Monitor) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMonitorIDs(ids...)
}

// AddShareIDs adds the "shares" edge to the Share entity by IDs.
func (au *AgentUpdate) AddShareIDs(ids ...int) *AgentUpdate {
	au.mutation.AddShareIDs(ids...)
	return au
}

// AddShares adds the "shares" edges to the Share entity.
func (au *AgentUpdate) AddShares(s ...*Share) *AgentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.AddShareIDs(ids...)
}

// AddPrinterIDs adds the "printers" edge to the Printer entity by IDs.
func (au *AgentUpdate) AddPrinterIDs(ids ...int) *AgentUpdate {
	au.mutation.AddPrinterIDs(ids...)
	return au
}

// AddPrinters adds the "printers" edges to the Printer entity.
func (au *AgentUpdate) AddPrinters(p ...*Printer) *AgentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddPrinterIDs(ids...)
}

// AddNetworkadapterIDs adds the "networkadapters" edge to the NetworkAdapter entity by IDs.
func (au *AgentUpdate) AddNetworkadapterIDs(ids ...int) *AgentUpdate {
	au.mutation.AddNetworkadapterIDs(ids...)
	return au
}

// AddNetworkadapters adds the "networkadapters" edges to the NetworkAdapter entity.
func (au *AgentUpdate) AddNetworkadapters(n ...*NetworkAdapter) *AgentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.AddNetworkadapterIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (au *AgentUpdate) AddDeploymentIDs(ids ...int) *AgentUpdate {
	au.mutation.AddDeploymentIDs(ids...)
	return au
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (au *AgentUpdate) AddDeployments(d ...*Deployment) *AgentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.AddDeploymentIDs(ids...)
}

// AddUpdateIDs adds the "updates" edge to the Update entity by IDs.
func (au *AgentUpdate) AddUpdateIDs(ids ...int) *AgentUpdate {
	au.mutation.AddUpdateIDs(ids...)
	return au
}

// AddUpdates adds the "updates" edges to the Update entity.
func (au *AgentUpdate) AddUpdates(u ...*Update) *AgentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.AddUpdateIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (au *AgentUpdate) AddTagIDs(ids ...int) *AgentUpdate {
	au.mutation.AddTagIDs(ids...)
	return au
}

// AddTags adds the "tags" edges to the Tag entity.
func (au *AgentUpdate) AddTags(t ...*Tag) *AgentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.AddTagIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (au *AgentUpdate) AddMetadatumIDs(ids ...int) *AgentUpdate {
	au.mutation.AddMetadatumIDs(ids...)
	return au
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (au *AgentUpdate) AddMetadata(m ...*Metadata) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMetadatumIDs(ids...)
}

// AddWingetcfgexclusionIDs adds the "wingetcfgexclusions" edge to the WingetConfigExclusion entity by IDs.
func (au *AgentUpdate) AddWingetcfgexclusionIDs(ids ...int) *AgentUpdate {
	au.mutation.AddWingetcfgexclusionIDs(ids...)
	return au
}

// AddWingetcfgexclusions adds the "wingetcfgexclusions" edges to the WingetConfigExclusion entity.
func (au *AgentUpdate) AddWingetcfgexclusions(w ...*WingetConfigExclusion) *AgentUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return au.AddWingetcfgexclusionIDs(ids...)
}

// AddMemoryslotIDs adds the "memoryslots" edge to the MemorySlot entity by IDs.
func (au *AgentUpdate) AddMemoryslotIDs(ids ...int) *AgentUpdate {
	au.mutation.AddMemoryslotIDs(ids...)
	return au
}

// AddMemoryslots adds the "memoryslots" edges to the MemorySlot entity.
func (au *AgentUpdate) AddMemoryslots(m ...*MemorySlot) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.AddMemoryslotIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (au *AgentUpdate) SetReleaseID(id int) *AgentUpdate {
	au.mutation.SetReleaseID(id)
	return au
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableReleaseID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetReleaseID(*id)
	}
	return au
}

// SetRelease sets the "release" edge to the Release entity.
func (au *AgentUpdate) SetRelease(r *Release) *AgentUpdate {
	return au.SetReleaseID(r.ID)
}

// AddProfileissueIDs adds the "profileissue" edge to the ProfileIssue entity by IDs.
func (au *AgentUpdate) AddProfileissueIDs(ids ...int) *AgentUpdate {
	au.mutation.AddProfileissueIDs(ids...)
	return au
}

// AddProfileissue adds the "profileissue" edges to the ProfileIssue entity.
func (au *AgentUpdate) AddProfileissue(p ...*ProfileIssue) *AgentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.AddProfileissueIDs(ids...)
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (au *AgentUpdate) SetSiteID(id int) *AgentUpdate {
	au.mutation.SetSiteID(id)
	return au
}

// SetNillableSiteID sets the "site" edge to the Site entity by ID if the given value is not nil.
func (au *AgentUpdate) SetNillableSiteID(id *int) *AgentUpdate {
	if id != nil {
		au = au.SetSiteID(*id)
	}
	return au
}

// SetSite sets the "site" edge to the Site entity.
func (au *AgentUpdate) SetSite(s *Site) *AgentUpdate {
	return au.SetSiteID(s.ID)
}

// Mutation returns the AgentMutation object of the builder.
func (au *AgentUpdate) Mutation() *AgentMutation {
	return au.mutation
}

// ClearComputer clears the "computer" edge to the Computer entity.
func (au *AgentUpdate) ClearComputer() *AgentUpdate {
	au.mutation.ClearComputer()
	return au
}

// ClearOperatingsystem clears the "operatingsystem" edge to the OperatingSystem entity.
func (au *AgentUpdate) ClearOperatingsystem() *AgentUpdate {
	au.mutation.ClearOperatingsystem()
	return au
}

// ClearSystemupdate clears the "systemupdate" edge to the SystemUpdate entity.
func (au *AgentUpdate) ClearSystemupdate() *AgentUpdate {
	au.mutation.ClearSystemupdate()
	return au
}

// ClearAntivirus clears the "antivirus" edge to the Antivirus entity.
func (au *AgentUpdate) ClearAntivirus() *AgentUpdate {
	au.mutation.ClearAntivirus()
	return au
}

// ClearLogicaldisks clears all "logicaldisks" edges to the LogicalDisk entity.
func (au *AgentUpdate) ClearLogicaldisks() *AgentUpdate {
	au.mutation.ClearLogicaldisks()
	return au
}

// RemoveLogicaldiskIDs removes the "logicaldisks" edge to LogicalDisk entities by IDs.
func (au *AgentUpdate) RemoveLogicaldiskIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveLogicaldiskIDs(ids...)
	return au
}

// RemoveLogicaldisks removes "logicaldisks" edges to LogicalDisk entities.
func (au *AgentUpdate) RemoveLogicaldisks(l ...*LogicalDisk) *AgentUpdate {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return au.RemoveLogicaldiskIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (au *AgentUpdate) ClearApps() *AgentUpdate {
	au.mutation.ClearApps()
	return au
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (au *AgentUpdate) RemoveAppIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveAppIDs(ids...)
	return au
}

// RemoveApps removes "apps" edges to App entities.
func (au *AgentUpdate) RemoveApps(a ...*App) *AgentUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return au.RemoveAppIDs(ids...)
}

// ClearMonitors clears all "monitors" edges to the Monitor entity.
func (au *AgentUpdate) ClearMonitors() *AgentUpdate {
	au.mutation.ClearMonitors()
	return au
}

// RemoveMonitorIDs removes the "monitors" edge to Monitor entities by IDs.
func (au *AgentUpdate) RemoveMonitorIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveMonitorIDs(ids...)
	return au
}

// RemoveMonitors removes "monitors" edges to Monitor entities.
func (au *AgentUpdate) RemoveMonitors(m ...*Monitor) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMonitorIDs(ids...)
}

// ClearShares clears all "shares" edges to the Share entity.
func (au *AgentUpdate) ClearShares() *AgentUpdate {
	au.mutation.ClearShares()
	return au
}

// RemoveShareIDs removes the "shares" edge to Share entities by IDs.
func (au *AgentUpdate) RemoveShareIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveShareIDs(ids...)
	return au
}

// RemoveShares removes "shares" edges to Share entities.
func (au *AgentUpdate) RemoveShares(s ...*Share) *AgentUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return au.RemoveShareIDs(ids...)
}

// ClearPrinters clears all "printers" edges to the Printer entity.
func (au *AgentUpdate) ClearPrinters() *AgentUpdate {
	au.mutation.ClearPrinters()
	return au
}

// RemovePrinterIDs removes the "printers" edge to Printer entities by IDs.
func (au *AgentUpdate) RemovePrinterIDs(ids ...int) *AgentUpdate {
	au.mutation.RemovePrinterIDs(ids...)
	return au
}

// RemovePrinters removes "printers" edges to Printer entities.
func (au *AgentUpdate) RemovePrinters(p ...*Printer) *AgentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemovePrinterIDs(ids...)
}

// ClearNetworkadapters clears all "networkadapters" edges to the NetworkAdapter entity.
func (au *AgentUpdate) ClearNetworkadapters() *AgentUpdate {
	au.mutation.ClearNetworkadapters()
	return au
}

// RemoveNetworkadapterIDs removes the "networkadapters" edge to NetworkAdapter entities by IDs.
func (au *AgentUpdate) RemoveNetworkadapterIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveNetworkadapterIDs(ids...)
	return au
}

// RemoveNetworkadapters removes "networkadapters" edges to NetworkAdapter entities.
func (au *AgentUpdate) RemoveNetworkadapters(n ...*NetworkAdapter) *AgentUpdate {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return au.RemoveNetworkadapterIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (au *AgentUpdate) ClearDeployments() *AgentUpdate {
	au.mutation.ClearDeployments()
	return au
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (au *AgentUpdate) RemoveDeploymentIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveDeploymentIDs(ids...)
	return au
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (au *AgentUpdate) RemoveDeployments(d ...*Deployment) *AgentUpdate {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return au.RemoveDeploymentIDs(ids...)
}

// ClearUpdates clears all "updates" edges to the Update entity.
func (au *AgentUpdate) ClearUpdates() *AgentUpdate {
	au.mutation.ClearUpdates()
	return au
}

// RemoveUpdateIDs removes the "updates" edge to Update entities by IDs.
func (au *AgentUpdate) RemoveUpdateIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveUpdateIDs(ids...)
	return au
}

// RemoveUpdates removes "updates" edges to Update entities.
func (au *AgentUpdate) RemoveUpdates(u ...*Update) *AgentUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return au.RemoveUpdateIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (au *AgentUpdate) ClearTags() *AgentUpdate {
	au.mutation.ClearTags()
	return au
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (au *AgentUpdate) RemoveTagIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveTagIDs(ids...)
	return au
}

// RemoveTags removes "tags" edges to Tag entities.
func (au *AgentUpdate) RemoveTags(t ...*Tag) *AgentUpdate {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return au.RemoveTagIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (au *AgentUpdate) ClearMetadata() *AgentUpdate {
	au.mutation.ClearMetadata()
	return au
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (au *AgentUpdate) RemoveMetadatumIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveMetadatumIDs(ids...)
	return au
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (au *AgentUpdate) RemoveMetadata(m ...*Metadata) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMetadatumIDs(ids...)
}

// ClearWingetcfgexclusions clears all "wingetcfgexclusions" edges to the WingetConfigExclusion entity.
func (au *AgentUpdate) ClearWingetcfgexclusions() *AgentUpdate {
	au.mutation.ClearWingetcfgexclusions()
	return au
}

// RemoveWingetcfgexclusionIDs removes the "wingetcfgexclusions" edge to WingetConfigExclusion entities by IDs.
func (au *AgentUpdate) RemoveWingetcfgexclusionIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveWingetcfgexclusionIDs(ids...)
	return au
}

// RemoveWingetcfgexclusions removes "wingetcfgexclusions" edges to WingetConfigExclusion entities.
func (au *AgentUpdate) RemoveWingetcfgexclusions(w ...*WingetConfigExclusion) *AgentUpdate {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return au.RemoveWingetcfgexclusionIDs(ids...)
}

// ClearMemoryslots clears all "memoryslots" edges to the MemorySlot entity.
func (au *AgentUpdate) ClearMemoryslots() *AgentUpdate {
	au.mutation.ClearMemoryslots()
	return au
}

// RemoveMemoryslotIDs removes the "memoryslots" edge to MemorySlot entities by IDs.
func (au *AgentUpdate) RemoveMemoryslotIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveMemoryslotIDs(ids...)
	return au
}

// RemoveMemoryslots removes "memoryslots" edges to MemorySlot entities.
func (au *AgentUpdate) RemoveMemoryslots(m ...*MemorySlot) *AgentUpdate {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return au.RemoveMemoryslotIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (au *AgentUpdate) ClearRelease() *AgentUpdate {
	au.mutation.ClearRelease()
	return au
}

// ClearProfileissue clears all "profileissue" edges to the ProfileIssue entity.
func (au *AgentUpdate) ClearProfileissue() *AgentUpdate {
	au.mutation.ClearProfileissue()
	return au
}

// RemoveProfileissueIDs removes the "profileissue" edge to ProfileIssue entities by IDs.
func (au *AgentUpdate) RemoveProfileissueIDs(ids ...int) *AgentUpdate {
	au.mutation.RemoveProfileissueIDs(ids...)
	return au
}

// RemoveProfileissue removes "profileissue" edges to ProfileIssue entities.
func (au *AgentUpdate) RemoveProfileissue(p ...*ProfileIssue) *AgentUpdate {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return au.RemoveProfileissueIDs(ids...)
}

// ClearSite clears the "site" edge to the Site entity.
func (au *AgentUpdate) ClearSite() *AgentUpdate {
	au.mutation.ClearSite()
	return au
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (au *AgentUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, au.sqlSave, au.mutation, au.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (au *AgentUpdate) SaveX(ctx context.Context) int {
	affected, err := au.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (au *AgentUpdate) Exec(ctx context.Context) error {
	_, err := au.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (au *AgentUpdate) ExecX(ctx context.Context) {
	if err := au.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (au *AgentUpdate) check() error {
	if v, ok := au.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if v, ok := au.mutation.Hostname(); ok {
		if err := agent.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Agent.hostname": %w`, err)}
		}
	}
	if v, ok := au.mutation.AgentStatus(); ok {
		if err := agent.AgentStatusValidator(v); err != nil {
			return &ValidationError{Name: "agent_status", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_status": %w`, err)}
		}
	}
	if v, ok := au.mutation.EndpointType(); ok {
		if err := agent.EndpointTypeValidator(v); err != nil {
			return &ValidationError{Name: "endpoint_type", err: fmt.Errorf(`ent: validator failed for field "Agent.endpoint_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (au *AgentUpdate) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgentUpdate {
	au.modifiers = append(au.modifiers, modifiers...)
	return au
}

func (au *AgentUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := au.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	if ps := au.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := au.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeString, value)
	}
	if value, ok := au.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if value, ok := au.mutation.IP(); ok {
		_spec.SetField(agent.FieldIP, field.TypeString, value)
	}
	if value, ok := au.mutation.MAC(); ok {
		_spec.SetField(agent.FieldMAC, field.TypeString, value)
	}
	if value, ok := au.mutation.FirstContact(); ok {
		_spec.SetField(agent.FieldFirstContact, field.TypeTime, value)
	}
	if au.mutation.FirstContactCleared() {
		_spec.ClearField(agent.FieldFirstContact, field.TypeTime)
	}
	if value, ok := au.mutation.LastContact(); ok {
		_spec.SetField(agent.FieldLastContact, field.TypeTime, value)
	}
	if au.mutation.LastContactCleared() {
		_spec.ClearField(agent.FieldLastContact, field.TypeTime)
	}
	if value, ok := au.mutation.Vnc(); ok {
		_spec.SetField(agent.FieldVnc, field.TypeString, value)
	}
	if au.mutation.VncCleared() {
		_spec.ClearField(agent.FieldVnc, field.TypeString)
	}
	if value, ok := au.mutation.Notes(); ok {
		_spec.SetField(agent.FieldNotes, field.TypeString, value)
	}
	if au.mutation.NotesCleared() {
		_spec.ClearField(agent.FieldNotes, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTaskStatus(); ok {
		_spec.SetField(agent.FieldUpdateTaskStatus, field.TypeString, value)
	}
	if au.mutation.UpdateTaskStatusCleared() {
		_spec.ClearField(agent.FieldUpdateTaskStatus, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTaskDescription(); ok {
		_spec.SetField(agent.FieldUpdateTaskDescription, field.TypeString, value)
	}
	if au.mutation.UpdateTaskDescriptionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskDescription, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTaskResult(); ok {
		_spec.SetField(agent.FieldUpdateTaskResult, field.TypeString, value)
	}
	if au.mutation.UpdateTaskResultCleared() {
		_spec.ClearField(agent.FieldUpdateTaskResult, field.TypeString)
	}
	if value, ok := au.mutation.UpdateTaskExecution(); ok {
		_spec.SetField(agent.FieldUpdateTaskExecution, field.TypeTime, value)
	}
	if au.mutation.UpdateTaskExecutionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskExecution, field.TypeTime)
	}
	if value, ok := au.mutation.UpdateTaskVersion(); ok {
		_spec.SetField(agent.FieldUpdateTaskVersion, field.TypeString, value)
	}
	if au.mutation.UpdateTaskVersionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskVersion, field.TypeString)
	}
	if value, ok := au.mutation.VncProxyPort(); ok {
		_spec.SetField(agent.FieldVncProxyPort, field.TypeString, value)
	}
	if au.mutation.VncProxyPortCleared() {
		_spec.ClearField(agent.FieldVncProxyPort, field.TypeString)
	}
	if value, ok := au.mutation.SftpPort(); ok {
		_spec.SetField(agent.FieldSftpPort, field.TypeString, value)
	}
	if au.mutation.SftpPortCleared() {
		_spec.ClearField(agent.FieldSftpPort, field.TypeString)
	}
	if value, ok := au.mutation.AgentStatus(); ok {
		_spec.SetField(agent.FieldAgentStatus, field.TypeEnum, value)
	}
	if au.mutation.AgentStatusCleared() {
		_spec.ClearField(agent.FieldAgentStatus, field.TypeEnum)
	}
	if value, ok := au.mutation.CertificateReady(); ok {
		_spec.SetField(agent.FieldCertificateReady, field.TypeBool, value)
	}
	if au.mutation.CertificateReadyCleared() {
		_spec.ClearField(agent.FieldCertificateReady, field.TypeBool)
	}
	if value, ok := au.mutation.RestartRequired(); ok {
		_spec.SetField(agent.FieldRestartRequired, field.TypeBool, value)
	}
	if au.mutation.RestartRequiredCleared() {
		_spec.ClearField(agent.FieldRestartRequired, field.TypeBool)
	}
	if value, ok := au.mutation.IsRemote(); ok {
		_spec.SetField(agent.FieldIsRemote, field.TypeBool, value)
	}
	if au.mutation.IsRemoteCleared() {
		_spec.ClearField(agent.FieldIsRemote, field.TypeBool)
	}
	if value, ok := au.mutation.DebugMode(); ok {
		_spec.SetField(agent.FieldDebugMode, field.TypeBool, value)
	}
	if au.mutation.DebugModeCleared() {
		_spec.ClearField(agent.FieldDebugMode, field.TypeBool)
	}
	if value, ok := au.mutation.SftpService(); ok {
		_spec.SetField(agent.FieldSftpService, field.TypeBool, value)
	}
	if au.mutation.SftpServiceCleared() {
		_spec.ClearField(agent.FieldSftpService, field.TypeBool)
	}
	if value, ok := au.mutation.RemoteAssistance(); ok {
		_spec.SetField(agent.FieldRemoteAssistance, field.TypeBool, value)
	}
	if au.mutation.RemoteAssistanceCleared() {
		_spec.ClearField(agent.FieldRemoteAssistance, field.TypeBool)
	}
	if value, ok := au.mutation.SettingsModified(); ok {
		_spec.SetField(agent.FieldSettingsModified, field.TypeTime, value)
	}
	if au.mutation.SettingsModifiedCleared() {
		_spec.ClearField(agent.FieldSettingsModified, field.TypeTime)
	}
	if value, ok := au.mutation.Description(); ok {
		_spec.SetField(agent.FieldDescription, field.TypeString, value)
	}
	if au.mutation.DescriptionCleared() {
		_spec.ClearField(agent.FieldDescription, field.TypeString)
	}
	if value, ok := au.mutation.EndpointType(); ok {
		_spec.SetField(agent.FieldEndpointType, field.TypeEnum, value)
	}
	if au.mutation.EndpointTypeCleared() {
		_spec.ClearField(agent.FieldEndpointType, field.TypeEnum)
	}
	if au.mutation.ComputerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.ComputerTable,
			Columns: []string{agent.ComputerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(computer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ComputerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.ComputerTable,
			Columns: []string{agent.ComputerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(computer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.OperatingsystemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.OperatingsystemTable,
			Columns: []string{agent.OperatingsystemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.OperatingsystemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.OperatingsystemTable,
			Columns: []string{agent.OperatingsystemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SystemupdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.SystemupdateTable,
			Columns: []string{agent.SystemupdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemupdate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SystemupdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.SystemupdateTable,
			Columns: []string{agent.SystemupdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemupdate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AntivirusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.AntivirusTable,
			Columns: []string{agent.AntivirusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(antivirus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AntivirusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.AntivirusTable,
			Columns: []string{agent.AntivirusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(antivirus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.LogicaldisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedLogicaldisksIDs(); len(nodes) > 0 && !au.mutation.LogicaldisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.LogicaldisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedAppsIDs(); len(nodes) > 0 && !au.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMonitorsIDs(); len(nodes) > 0 && !au.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MonitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedSharesIDs(); len(nodes) > 0 && !au.mutation.SharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.PrintersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedPrintersIDs(); len(nodes) > 0 && !au.mutation.PrintersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.PrintersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.NetworkadaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedNetworkadaptersIDs(); len(nodes) > 0 && !au.mutation.NetworkadaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.NetworkadaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !au.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedUpdatesIDs(); len(nodes) > 0 && !au.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.UpdatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedTagsIDs(); len(nodes) > 0 && !au.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !au.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.WingetcfgexclusionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedWingetcfgexclusionsIDs(); len(nodes) > 0 && !au.mutation.WingetcfgexclusionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.WingetcfgexclusionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.MemoryslotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedMemoryslotsIDs(); len(nodes) > 0 && !au.mutation.MemoryslotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.MemoryslotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ReleaseTable,
			Columns: []string{agent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ReleaseTable,
			Columns: []string{agent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.ProfileissueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.RemovedProfileissueIDs(); len(nodes) > 0 && !au.mutation.ProfileissueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.ProfileissueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if au.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.SiteTable,
			Columns: []string{agent.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := au.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.SiteTable,
			Columns: []string{agent.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(au.modifiers...)
	if n, err = sqlgraph.UpdateNodes(ctx, au.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	au.mutation.done = true
	return n, nil
}

// AgentUpdateOne is the builder for updating a single Agent entity.
type AgentUpdateOne struct {
	config
	fields    []string
	hooks     []Hook
	mutation  *AgentMutation
	modifiers []func(*sql.UpdateBuilder)
}

// SetOs sets the "os" field.
func (auo *AgentUpdateOne) SetOs(s string) *AgentUpdateOne {
	auo.mutation.SetOs(s)
	return auo
}

// SetNillableOs sets the "os" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableOs(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetOs(*s)
	}
	return auo
}

// SetHostname sets the "hostname" field.
func (auo *AgentUpdateOne) SetHostname(s string) *AgentUpdateOne {
	auo.mutation.SetHostname(s)
	return auo
}

// SetNillableHostname sets the "hostname" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableHostname(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetHostname(*s)
	}
	return auo
}

// SetIP sets the "ip" field.
func (auo *AgentUpdateOne) SetIP(s string) *AgentUpdateOne {
	auo.mutation.SetIP(s)
	return auo
}

// SetNillableIP sets the "ip" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableIP(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetIP(*s)
	}
	return auo
}

// SetMAC sets the "mac" field.
func (auo *AgentUpdateOne) SetMAC(s string) *AgentUpdateOne {
	auo.mutation.SetMAC(s)
	return auo
}

// SetNillableMAC sets the "mac" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableMAC(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetMAC(*s)
	}
	return auo
}

// SetFirstContact sets the "first_contact" field.
func (auo *AgentUpdateOne) SetFirstContact(t time.Time) *AgentUpdateOne {
	auo.mutation.SetFirstContact(t)
	return auo
}

// SetNillableFirstContact sets the "first_contact" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableFirstContact(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetFirstContact(*t)
	}
	return auo
}

// ClearFirstContact clears the value of the "first_contact" field.
func (auo *AgentUpdateOne) ClearFirstContact() *AgentUpdateOne {
	auo.mutation.ClearFirstContact()
	return auo
}

// SetLastContact sets the "last_contact" field.
func (auo *AgentUpdateOne) SetLastContact(t time.Time) *AgentUpdateOne {
	auo.mutation.SetLastContact(t)
	return auo
}

// SetNillableLastContact sets the "last_contact" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableLastContact(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetLastContact(*t)
	}
	return auo
}

// ClearLastContact clears the value of the "last_contact" field.
func (auo *AgentUpdateOne) ClearLastContact() *AgentUpdateOne {
	auo.mutation.ClearLastContact()
	return auo
}

// SetVnc sets the "vnc" field.
func (auo *AgentUpdateOne) SetVnc(s string) *AgentUpdateOne {
	auo.mutation.SetVnc(s)
	return auo
}

// SetNillableVnc sets the "vnc" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableVnc(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetVnc(*s)
	}
	return auo
}

// ClearVnc clears the value of the "vnc" field.
func (auo *AgentUpdateOne) ClearVnc() *AgentUpdateOne {
	auo.mutation.ClearVnc()
	return auo
}

// SetNotes sets the "notes" field.
func (auo *AgentUpdateOne) SetNotes(s string) *AgentUpdateOne {
	auo.mutation.SetNotes(s)
	return auo
}

// SetNillableNotes sets the "notes" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableNotes(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetNotes(*s)
	}
	return auo
}

// ClearNotes clears the value of the "notes" field.
func (auo *AgentUpdateOne) ClearNotes() *AgentUpdateOne {
	auo.mutation.ClearNotes()
	return auo
}

// SetUpdateTaskStatus sets the "update_task_status" field.
func (auo *AgentUpdateOne) SetUpdateTaskStatus(s string) *AgentUpdateOne {
	auo.mutation.SetUpdateTaskStatus(s)
	return auo
}

// SetNillableUpdateTaskStatus sets the "update_task_status" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdateTaskStatus(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetUpdateTaskStatus(*s)
	}
	return auo
}

// ClearUpdateTaskStatus clears the value of the "update_task_status" field.
func (auo *AgentUpdateOne) ClearUpdateTaskStatus() *AgentUpdateOne {
	auo.mutation.ClearUpdateTaskStatus()
	return auo
}

// SetUpdateTaskDescription sets the "update_task_description" field.
func (auo *AgentUpdateOne) SetUpdateTaskDescription(s string) *AgentUpdateOne {
	auo.mutation.SetUpdateTaskDescription(s)
	return auo
}

// SetNillableUpdateTaskDescription sets the "update_task_description" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdateTaskDescription(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetUpdateTaskDescription(*s)
	}
	return auo
}

// ClearUpdateTaskDescription clears the value of the "update_task_description" field.
func (auo *AgentUpdateOne) ClearUpdateTaskDescription() *AgentUpdateOne {
	auo.mutation.ClearUpdateTaskDescription()
	return auo
}

// SetUpdateTaskResult sets the "update_task_result" field.
func (auo *AgentUpdateOne) SetUpdateTaskResult(s string) *AgentUpdateOne {
	auo.mutation.SetUpdateTaskResult(s)
	return auo
}

// SetNillableUpdateTaskResult sets the "update_task_result" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdateTaskResult(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetUpdateTaskResult(*s)
	}
	return auo
}

// ClearUpdateTaskResult clears the value of the "update_task_result" field.
func (auo *AgentUpdateOne) ClearUpdateTaskResult() *AgentUpdateOne {
	auo.mutation.ClearUpdateTaskResult()
	return auo
}

// SetUpdateTaskExecution sets the "update_task_execution" field.
func (auo *AgentUpdateOne) SetUpdateTaskExecution(t time.Time) *AgentUpdateOne {
	auo.mutation.SetUpdateTaskExecution(t)
	return auo
}

// SetNillableUpdateTaskExecution sets the "update_task_execution" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdateTaskExecution(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetUpdateTaskExecution(*t)
	}
	return auo
}

// ClearUpdateTaskExecution clears the value of the "update_task_execution" field.
func (auo *AgentUpdateOne) ClearUpdateTaskExecution() *AgentUpdateOne {
	auo.mutation.ClearUpdateTaskExecution()
	return auo
}

// SetUpdateTaskVersion sets the "update_task_version" field.
func (auo *AgentUpdateOne) SetUpdateTaskVersion(s string) *AgentUpdateOne {
	auo.mutation.SetUpdateTaskVersion(s)
	return auo
}

// SetNillableUpdateTaskVersion sets the "update_task_version" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableUpdateTaskVersion(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetUpdateTaskVersion(*s)
	}
	return auo
}

// ClearUpdateTaskVersion clears the value of the "update_task_version" field.
func (auo *AgentUpdateOne) ClearUpdateTaskVersion() *AgentUpdateOne {
	auo.mutation.ClearUpdateTaskVersion()
	return auo
}

// SetVncProxyPort sets the "vnc_proxy_port" field.
func (auo *AgentUpdateOne) SetVncProxyPort(s string) *AgentUpdateOne {
	auo.mutation.SetVncProxyPort(s)
	return auo
}

// SetNillableVncProxyPort sets the "vnc_proxy_port" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableVncProxyPort(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetVncProxyPort(*s)
	}
	return auo
}

// ClearVncProxyPort clears the value of the "vnc_proxy_port" field.
func (auo *AgentUpdateOne) ClearVncProxyPort() *AgentUpdateOne {
	auo.mutation.ClearVncProxyPort()
	return auo
}

// SetSftpPort sets the "sftp_port" field.
func (auo *AgentUpdateOne) SetSftpPort(s string) *AgentUpdateOne {
	auo.mutation.SetSftpPort(s)
	return auo
}

// SetNillableSftpPort sets the "sftp_port" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSftpPort(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetSftpPort(*s)
	}
	return auo
}

// ClearSftpPort clears the value of the "sftp_port" field.
func (auo *AgentUpdateOne) ClearSftpPort() *AgentUpdateOne {
	auo.mutation.ClearSftpPort()
	return auo
}

// SetAgentStatus sets the "agent_status" field.
func (auo *AgentUpdateOne) SetAgentStatus(as agent.AgentStatus) *AgentUpdateOne {
	auo.mutation.SetAgentStatus(as)
	return auo
}

// SetNillableAgentStatus sets the "agent_status" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAgentStatus(as *agent.AgentStatus) *AgentUpdateOne {
	if as != nil {
		auo.SetAgentStatus(*as)
	}
	return auo
}

// ClearAgentStatus clears the value of the "agent_status" field.
func (auo *AgentUpdateOne) ClearAgentStatus() *AgentUpdateOne {
	auo.mutation.ClearAgentStatus()
	return auo
}

// SetCertificateReady sets the "certificate_ready" field.
func (auo *AgentUpdateOne) SetCertificateReady(b bool) *AgentUpdateOne {
	auo.mutation.SetCertificateReady(b)
	return auo
}

// SetNillableCertificateReady sets the "certificate_ready" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableCertificateReady(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetCertificateReady(*b)
	}
	return auo
}

// ClearCertificateReady clears the value of the "certificate_ready" field.
func (auo *AgentUpdateOne) ClearCertificateReady() *AgentUpdateOne {
	auo.mutation.ClearCertificateReady()
	return auo
}

// SetRestartRequired sets the "restart_required" field.
func (auo *AgentUpdateOne) SetRestartRequired(b bool) *AgentUpdateOne {
	auo.mutation.SetRestartRequired(b)
	return auo
}

// SetNillableRestartRequired sets the "restart_required" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableRestartRequired(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetRestartRequired(*b)
	}
	return auo
}

// ClearRestartRequired clears the value of the "restart_required" field.
func (auo *AgentUpdateOne) ClearRestartRequired() *AgentUpdateOne {
	auo.mutation.ClearRestartRequired()
	return auo
}

// SetIsRemote sets the "is_remote" field.
func (auo *AgentUpdateOne) SetIsRemote(b bool) *AgentUpdateOne {
	auo.mutation.SetIsRemote(b)
	return auo
}

// SetNillableIsRemote sets the "is_remote" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableIsRemote(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetIsRemote(*b)
	}
	return auo
}

// ClearIsRemote clears the value of the "is_remote" field.
func (auo *AgentUpdateOne) ClearIsRemote() *AgentUpdateOne {
	auo.mutation.ClearIsRemote()
	return auo
}

// SetDebugMode sets the "debug_mode" field.
func (auo *AgentUpdateOne) SetDebugMode(b bool) *AgentUpdateOne {
	auo.mutation.SetDebugMode(b)
	return auo
}

// SetNillableDebugMode sets the "debug_mode" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDebugMode(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetDebugMode(*b)
	}
	return auo
}

// ClearDebugMode clears the value of the "debug_mode" field.
func (auo *AgentUpdateOne) ClearDebugMode() *AgentUpdateOne {
	auo.mutation.ClearDebugMode()
	return auo
}

// SetSftpService sets the "sftp_service" field.
func (auo *AgentUpdateOne) SetSftpService(b bool) *AgentUpdateOne {
	auo.mutation.SetSftpService(b)
	return auo
}

// SetNillableSftpService sets the "sftp_service" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSftpService(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetSftpService(*b)
	}
	return auo
}

// ClearSftpService clears the value of the "sftp_service" field.
func (auo *AgentUpdateOne) ClearSftpService() *AgentUpdateOne {
	auo.mutation.ClearSftpService()
	return auo
}

// SetRemoteAssistance sets the "remote_assistance" field.
func (auo *AgentUpdateOne) SetRemoteAssistance(b bool) *AgentUpdateOne {
	auo.mutation.SetRemoteAssistance(b)
	return auo
}

// SetNillableRemoteAssistance sets the "remote_assistance" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableRemoteAssistance(b *bool) *AgentUpdateOne {
	if b != nil {
		auo.SetRemoteAssistance(*b)
	}
	return auo
}

// ClearRemoteAssistance clears the value of the "remote_assistance" field.
func (auo *AgentUpdateOne) ClearRemoteAssistance() *AgentUpdateOne {
	auo.mutation.ClearRemoteAssistance()
	return auo
}

// SetSettingsModified sets the "settings_modified" field.
func (auo *AgentUpdateOne) SetSettingsModified(t time.Time) *AgentUpdateOne {
	auo.mutation.SetSettingsModified(t)
	return auo
}

// SetNillableSettingsModified sets the "settings_modified" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSettingsModified(t *time.Time) *AgentUpdateOne {
	if t != nil {
		auo.SetSettingsModified(*t)
	}
	return auo
}

// ClearSettingsModified clears the value of the "settings_modified" field.
func (auo *AgentUpdateOne) ClearSettingsModified() *AgentUpdateOne {
	auo.mutation.ClearSettingsModified()
	return auo
}

// SetDescription sets the "description" field.
func (auo *AgentUpdateOne) SetDescription(s string) *AgentUpdateOne {
	auo.mutation.SetDescription(s)
	return auo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableDescription(s *string) *AgentUpdateOne {
	if s != nil {
		auo.SetDescription(*s)
	}
	return auo
}

// ClearDescription clears the value of the "description" field.
func (auo *AgentUpdateOne) ClearDescription() *AgentUpdateOne {
	auo.mutation.ClearDescription()
	return auo
}

// SetEndpointType sets the "endpoint_type" field.
func (auo *AgentUpdateOne) SetEndpointType(at agent.EndpointType) *AgentUpdateOne {
	auo.mutation.SetEndpointType(at)
	return auo
}

// SetNillableEndpointType sets the "endpoint_type" field if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableEndpointType(at *agent.EndpointType) *AgentUpdateOne {
	if at != nil {
		auo.SetEndpointType(*at)
	}
	return auo
}

// ClearEndpointType clears the value of the "endpoint_type" field.
func (auo *AgentUpdateOne) ClearEndpointType() *AgentUpdateOne {
	auo.mutation.ClearEndpointType()
	return auo
}

// SetComputerID sets the "computer" edge to the Computer entity by ID.
func (auo *AgentUpdateOne) SetComputerID(id int) *AgentUpdateOne {
	auo.mutation.SetComputerID(id)
	return auo
}

// SetNillableComputerID sets the "computer" edge to the Computer entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableComputerID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetComputerID(*id)
	}
	return auo
}

// SetComputer sets the "computer" edge to the Computer entity.
func (auo *AgentUpdateOne) SetComputer(c *Computer) *AgentUpdateOne {
	return auo.SetComputerID(c.ID)
}

// SetOperatingsystemID sets the "operatingsystem" edge to the OperatingSystem entity by ID.
func (auo *AgentUpdateOne) SetOperatingsystemID(id int) *AgentUpdateOne {
	auo.mutation.SetOperatingsystemID(id)
	return auo
}

// SetNillableOperatingsystemID sets the "operatingsystem" edge to the OperatingSystem entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableOperatingsystemID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetOperatingsystemID(*id)
	}
	return auo
}

// SetOperatingsystem sets the "operatingsystem" edge to the OperatingSystem entity.
func (auo *AgentUpdateOne) SetOperatingsystem(o *OperatingSystem) *AgentUpdateOne {
	return auo.SetOperatingsystemID(o.ID)
}

// SetSystemupdateID sets the "systemupdate" edge to the SystemUpdate entity by ID.
func (auo *AgentUpdateOne) SetSystemupdateID(id int) *AgentUpdateOne {
	auo.mutation.SetSystemupdateID(id)
	return auo
}

// SetNillableSystemupdateID sets the "systemupdate" edge to the SystemUpdate entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSystemupdateID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetSystemupdateID(*id)
	}
	return auo
}

// SetSystemupdate sets the "systemupdate" edge to the SystemUpdate entity.
func (auo *AgentUpdateOne) SetSystemupdate(s *SystemUpdate) *AgentUpdateOne {
	return auo.SetSystemupdateID(s.ID)
}

// SetAntivirusID sets the "antivirus" edge to the Antivirus entity by ID.
func (auo *AgentUpdateOne) SetAntivirusID(id int) *AgentUpdateOne {
	auo.mutation.SetAntivirusID(id)
	return auo
}

// SetNillableAntivirusID sets the "antivirus" edge to the Antivirus entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableAntivirusID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetAntivirusID(*id)
	}
	return auo
}

// SetAntivirus sets the "antivirus" edge to the Antivirus entity.
func (auo *AgentUpdateOne) SetAntivirus(a *Antivirus) *AgentUpdateOne {
	return auo.SetAntivirusID(a.ID)
}

// AddLogicaldiskIDs adds the "logicaldisks" edge to the LogicalDisk entity by IDs.
func (auo *AgentUpdateOne) AddLogicaldiskIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddLogicaldiskIDs(ids...)
	return auo
}

// AddLogicaldisks adds the "logicaldisks" edges to the LogicalDisk entity.
func (auo *AgentUpdateOne) AddLogicaldisks(l ...*LogicalDisk) *AgentUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.AddLogicaldiskIDs(ids...)
}

// AddAppIDs adds the "apps" edge to the App entity by IDs.
func (auo *AgentUpdateOne) AddAppIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddAppIDs(ids...)
	return auo
}

// AddApps adds the "apps" edges to the App entity.
func (auo *AgentUpdateOne) AddApps(a ...*App) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.AddAppIDs(ids...)
}

// AddMonitorIDs adds the "monitors" edge to the Monitor entity by IDs.
func (auo *AgentUpdateOne) AddMonitorIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddMonitorIDs(ids...)
	return auo
}

// AddMonitors adds the "monitors" edges to the Monitor entity.
func (auo *AgentUpdateOne) AddMonitors(m ...*Monitor) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMonitorIDs(ids...)
}

// AddShareIDs adds the "shares" edge to the Share entity by IDs.
func (auo *AgentUpdateOne) AddShareIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddShareIDs(ids...)
	return auo
}

// AddShares adds the "shares" edges to the Share entity.
func (auo *AgentUpdateOne) AddShares(s ...*Share) *AgentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.AddShareIDs(ids...)
}

// AddPrinterIDs adds the "printers" edge to the Printer entity by IDs.
func (auo *AgentUpdateOne) AddPrinterIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddPrinterIDs(ids...)
	return auo
}

// AddPrinters adds the "printers" edges to the Printer entity.
func (auo *AgentUpdateOne) AddPrinters(p ...*Printer) *AgentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddPrinterIDs(ids...)
}

// AddNetworkadapterIDs adds the "networkadapters" edge to the NetworkAdapter entity by IDs.
func (auo *AgentUpdateOne) AddNetworkadapterIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddNetworkadapterIDs(ids...)
	return auo
}

// AddNetworkadapters adds the "networkadapters" edges to the NetworkAdapter entity.
func (auo *AgentUpdateOne) AddNetworkadapters(n ...*NetworkAdapter) *AgentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.AddNetworkadapterIDs(ids...)
}

// AddDeploymentIDs adds the "deployments" edge to the Deployment entity by IDs.
func (auo *AgentUpdateOne) AddDeploymentIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddDeploymentIDs(ids...)
	return auo
}

// AddDeployments adds the "deployments" edges to the Deployment entity.
func (auo *AgentUpdateOne) AddDeployments(d ...*Deployment) *AgentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.AddDeploymentIDs(ids...)
}

// AddUpdateIDs adds the "updates" edge to the Update entity by IDs.
func (auo *AgentUpdateOne) AddUpdateIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddUpdateIDs(ids...)
	return auo
}

// AddUpdates adds the "updates" edges to the Update entity.
func (auo *AgentUpdateOne) AddUpdates(u ...*Update) *AgentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.AddUpdateIDs(ids...)
}

// AddTagIDs adds the "tags" edge to the Tag entity by IDs.
func (auo *AgentUpdateOne) AddTagIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddTagIDs(ids...)
	return auo
}

// AddTags adds the "tags" edges to the Tag entity.
func (auo *AgentUpdateOne) AddTags(t ...*Tag) *AgentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.AddTagIDs(ids...)
}

// AddMetadatumIDs adds the "metadata" edge to the Metadata entity by IDs.
func (auo *AgentUpdateOne) AddMetadatumIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddMetadatumIDs(ids...)
	return auo
}

// AddMetadata adds the "metadata" edges to the Metadata entity.
func (auo *AgentUpdateOne) AddMetadata(m ...*Metadata) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMetadatumIDs(ids...)
}

// AddWingetcfgexclusionIDs adds the "wingetcfgexclusions" edge to the WingetConfigExclusion entity by IDs.
func (auo *AgentUpdateOne) AddWingetcfgexclusionIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddWingetcfgexclusionIDs(ids...)
	return auo
}

// AddWingetcfgexclusions adds the "wingetcfgexclusions" edges to the WingetConfigExclusion entity.
func (auo *AgentUpdateOne) AddWingetcfgexclusions(w ...*WingetConfigExclusion) *AgentUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return auo.AddWingetcfgexclusionIDs(ids...)
}

// AddMemoryslotIDs adds the "memoryslots" edge to the MemorySlot entity by IDs.
func (auo *AgentUpdateOne) AddMemoryslotIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddMemoryslotIDs(ids...)
	return auo
}

// AddMemoryslots adds the "memoryslots" edges to the MemorySlot entity.
func (auo *AgentUpdateOne) AddMemoryslots(m ...*MemorySlot) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.AddMemoryslotIDs(ids...)
}

// SetReleaseID sets the "release" edge to the Release entity by ID.
func (auo *AgentUpdateOne) SetReleaseID(id int) *AgentUpdateOne {
	auo.mutation.SetReleaseID(id)
	return auo
}

// SetNillableReleaseID sets the "release" edge to the Release entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableReleaseID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetReleaseID(*id)
	}
	return auo
}

// SetRelease sets the "release" edge to the Release entity.
func (auo *AgentUpdateOne) SetRelease(r *Release) *AgentUpdateOne {
	return auo.SetReleaseID(r.ID)
}

// AddProfileissueIDs adds the "profileissue" edge to the ProfileIssue entity by IDs.
func (auo *AgentUpdateOne) AddProfileissueIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.AddProfileissueIDs(ids...)
	return auo
}

// AddProfileissue adds the "profileissue" edges to the ProfileIssue entity.
func (auo *AgentUpdateOne) AddProfileissue(p ...*ProfileIssue) *AgentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.AddProfileissueIDs(ids...)
}

// SetSiteID sets the "site" edge to the Site entity by ID.
func (auo *AgentUpdateOne) SetSiteID(id int) *AgentUpdateOne {
	auo.mutation.SetSiteID(id)
	return auo
}

// SetNillableSiteID sets the "site" edge to the Site entity by ID if the given value is not nil.
func (auo *AgentUpdateOne) SetNillableSiteID(id *int) *AgentUpdateOne {
	if id != nil {
		auo = auo.SetSiteID(*id)
	}
	return auo
}

// SetSite sets the "site" edge to the Site entity.
func (auo *AgentUpdateOne) SetSite(s *Site) *AgentUpdateOne {
	return auo.SetSiteID(s.ID)
}

// Mutation returns the AgentMutation object of the builder.
func (auo *AgentUpdateOne) Mutation() *AgentMutation {
	return auo.mutation
}

// ClearComputer clears the "computer" edge to the Computer entity.
func (auo *AgentUpdateOne) ClearComputer() *AgentUpdateOne {
	auo.mutation.ClearComputer()
	return auo
}

// ClearOperatingsystem clears the "operatingsystem" edge to the OperatingSystem entity.
func (auo *AgentUpdateOne) ClearOperatingsystem() *AgentUpdateOne {
	auo.mutation.ClearOperatingsystem()
	return auo
}

// ClearSystemupdate clears the "systemupdate" edge to the SystemUpdate entity.
func (auo *AgentUpdateOne) ClearSystemupdate() *AgentUpdateOne {
	auo.mutation.ClearSystemupdate()
	return auo
}

// ClearAntivirus clears the "antivirus" edge to the Antivirus entity.
func (auo *AgentUpdateOne) ClearAntivirus() *AgentUpdateOne {
	auo.mutation.ClearAntivirus()
	return auo
}

// ClearLogicaldisks clears all "logicaldisks" edges to the LogicalDisk entity.
func (auo *AgentUpdateOne) ClearLogicaldisks() *AgentUpdateOne {
	auo.mutation.ClearLogicaldisks()
	return auo
}

// RemoveLogicaldiskIDs removes the "logicaldisks" edge to LogicalDisk entities by IDs.
func (auo *AgentUpdateOne) RemoveLogicaldiskIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveLogicaldiskIDs(ids...)
	return auo
}

// RemoveLogicaldisks removes "logicaldisks" edges to LogicalDisk entities.
func (auo *AgentUpdateOne) RemoveLogicaldisks(l ...*LogicalDisk) *AgentUpdateOne {
	ids := make([]int, len(l))
	for i := range l {
		ids[i] = l[i].ID
	}
	return auo.RemoveLogicaldiskIDs(ids...)
}

// ClearApps clears all "apps" edges to the App entity.
func (auo *AgentUpdateOne) ClearApps() *AgentUpdateOne {
	auo.mutation.ClearApps()
	return auo
}

// RemoveAppIDs removes the "apps" edge to App entities by IDs.
func (auo *AgentUpdateOne) RemoveAppIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveAppIDs(ids...)
	return auo
}

// RemoveApps removes "apps" edges to App entities.
func (auo *AgentUpdateOne) RemoveApps(a ...*App) *AgentUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return auo.RemoveAppIDs(ids...)
}

// ClearMonitors clears all "monitors" edges to the Monitor entity.
func (auo *AgentUpdateOne) ClearMonitors() *AgentUpdateOne {
	auo.mutation.ClearMonitors()
	return auo
}

// RemoveMonitorIDs removes the "monitors" edge to Monitor entities by IDs.
func (auo *AgentUpdateOne) RemoveMonitorIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveMonitorIDs(ids...)
	return auo
}

// RemoveMonitors removes "monitors" edges to Monitor entities.
func (auo *AgentUpdateOne) RemoveMonitors(m ...*Monitor) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMonitorIDs(ids...)
}

// ClearShares clears all "shares" edges to the Share entity.
func (auo *AgentUpdateOne) ClearShares() *AgentUpdateOne {
	auo.mutation.ClearShares()
	return auo
}

// RemoveShareIDs removes the "shares" edge to Share entities by IDs.
func (auo *AgentUpdateOne) RemoveShareIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveShareIDs(ids...)
	return auo
}

// RemoveShares removes "shares" edges to Share entities.
func (auo *AgentUpdateOne) RemoveShares(s ...*Share) *AgentUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return auo.RemoveShareIDs(ids...)
}

// ClearPrinters clears all "printers" edges to the Printer entity.
func (auo *AgentUpdateOne) ClearPrinters() *AgentUpdateOne {
	auo.mutation.ClearPrinters()
	return auo
}

// RemovePrinterIDs removes the "printers" edge to Printer entities by IDs.
func (auo *AgentUpdateOne) RemovePrinterIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemovePrinterIDs(ids...)
	return auo
}

// RemovePrinters removes "printers" edges to Printer entities.
func (auo *AgentUpdateOne) RemovePrinters(p ...*Printer) *AgentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemovePrinterIDs(ids...)
}

// ClearNetworkadapters clears all "networkadapters" edges to the NetworkAdapter entity.
func (auo *AgentUpdateOne) ClearNetworkadapters() *AgentUpdateOne {
	auo.mutation.ClearNetworkadapters()
	return auo
}

// RemoveNetworkadapterIDs removes the "networkadapters" edge to NetworkAdapter entities by IDs.
func (auo *AgentUpdateOne) RemoveNetworkadapterIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveNetworkadapterIDs(ids...)
	return auo
}

// RemoveNetworkadapters removes "networkadapters" edges to NetworkAdapter entities.
func (auo *AgentUpdateOne) RemoveNetworkadapters(n ...*NetworkAdapter) *AgentUpdateOne {
	ids := make([]int, len(n))
	for i := range n {
		ids[i] = n[i].ID
	}
	return auo.RemoveNetworkadapterIDs(ids...)
}

// ClearDeployments clears all "deployments" edges to the Deployment entity.
func (auo *AgentUpdateOne) ClearDeployments() *AgentUpdateOne {
	auo.mutation.ClearDeployments()
	return auo
}

// RemoveDeploymentIDs removes the "deployments" edge to Deployment entities by IDs.
func (auo *AgentUpdateOne) RemoveDeploymentIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveDeploymentIDs(ids...)
	return auo
}

// RemoveDeployments removes "deployments" edges to Deployment entities.
func (auo *AgentUpdateOne) RemoveDeployments(d ...*Deployment) *AgentUpdateOne {
	ids := make([]int, len(d))
	for i := range d {
		ids[i] = d[i].ID
	}
	return auo.RemoveDeploymentIDs(ids...)
}

// ClearUpdates clears all "updates" edges to the Update entity.
func (auo *AgentUpdateOne) ClearUpdates() *AgentUpdateOne {
	auo.mutation.ClearUpdates()
	return auo
}

// RemoveUpdateIDs removes the "updates" edge to Update entities by IDs.
func (auo *AgentUpdateOne) RemoveUpdateIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveUpdateIDs(ids...)
	return auo
}

// RemoveUpdates removes "updates" edges to Update entities.
func (auo *AgentUpdateOne) RemoveUpdates(u ...*Update) *AgentUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return auo.RemoveUpdateIDs(ids...)
}

// ClearTags clears all "tags" edges to the Tag entity.
func (auo *AgentUpdateOne) ClearTags() *AgentUpdateOne {
	auo.mutation.ClearTags()
	return auo
}

// RemoveTagIDs removes the "tags" edge to Tag entities by IDs.
func (auo *AgentUpdateOne) RemoveTagIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveTagIDs(ids...)
	return auo
}

// RemoveTags removes "tags" edges to Tag entities.
func (auo *AgentUpdateOne) RemoveTags(t ...*Tag) *AgentUpdateOne {
	ids := make([]int, len(t))
	for i := range t {
		ids[i] = t[i].ID
	}
	return auo.RemoveTagIDs(ids...)
}

// ClearMetadata clears all "metadata" edges to the Metadata entity.
func (auo *AgentUpdateOne) ClearMetadata() *AgentUpdateOne {
	auo.mutation.ClearMetadata()
	return auo
}

// RemoveMetadatumIDs removes the "metadata" edge to Metadata entities by IDs.
func (auo *AgentUpdateOne) RemoveMetadatumIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveMetadatumIDs(ids...)
	return auo
}

// RemoveMetadata removes "metadata" edges to Metadata entities.
func (auo *AgentUpdateOne) RemoveMetadata(m ...*Metadata) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMetadatumIDs(ids...)
}

// ClearWingetcfgexclusions clears all "wingetcfgexclusions" edges to the WingetConfigExclusion entity.
func (auo *AgentUpdateOne) ClearWingetcfgexclusions() *AgentUpdateOne {
	auo.mutation.ClearWingetcfgexclusions()
	return auo
}

// RemoveWingetcfgexclusionIDs removes the "wingetcfgexclusions" edge to WingetConfigExclusion entities by IDs.
func (auo *AgentUpdateOne) RemoveWingetcfgexclusionIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveWingetcfgexclusionIDs(ids...)
	return auo
}

// RemoveWingetcfgexclusions removes "wingetcfgexclusions" edges to WingetConfigExclusion entities.
func (auo *AgentUpdateOne) RemoveWingetcfgexclusions(w ...*WingetConfigExclusion) *AgentUpdateOne {
	ids := make([]int, len(w))
	for i := range w {
		ids[i] = w[i].ID
	}
	return auo.RemoveWingetcfgexclusionIDs(ids...)
}

// ClearMemoryslots clears all "memoryslots" edges to the MemorySlot entity.
func (auo *AgentUpdateOne) ClearMemoryslots() *AgentUpdateOne {
	auo.mutation.ClearMemoryslots()
	return auo
}

// RemoveMemoryslotIDs removes the "memoryslots" edge to MemorySlot entities by IDs.
func (auo *AgentUpdateOne) RemoveMemoryslotIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveMemoryslotIDs(ids...)
	return auo
}

// RemoveMemoryslots removes "memoryslots" edges to MemorySlot entities.
func (auo *AgentUpdateOne) RemoveMemoryslots(m ...*MemorySlot) *AgentUpdateOne {
	ids := make([]int, len(m))
	for i := range m {
		ids[i] = m[i].ID
	}
	return auo.RemoveMemoryslotIDs(ids...)
}

// ClearRelease clears the "release" edge to the Release entity.
func (auo *AgentUpdateOne) ClearRelease() *AgentUpdateOne {
	auo.mutation.ClearRelease()
	return auo
}

// ClearProfileissue clears all "profileissue" edges to the ProfileIssue entity.
func (auo *AgentUpdateOne) ClearProfileissue() *AgentUpdateOne {
	auo.mutation.ClearProfileissue()
	return auo
}

// RemoveProfileissueIDs removes the "profileissue" edge to ProfileIssue entities by IDs.
func (auo *AgentUpdateOne) RemoveProfileissueIDs(ids ...int) *AgentUpdateOne {
	auo.mutation.RemoveProfileissueIDs(ids...)
	return auo
}

// RemoveProfileissue removes "profileissue" edges to ProfileIssue entities.
func (auo *AgentUpdateOne) RemoveProfileissue(p ...*ProfileIssue) *AgentUpdateOne {
	ids := make([]int, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return auo.RemoveProfileissueIDs(ids...)
}

// ClearSite clears the "site" edge to the Site entity.
func (auo *AgentUpdateOne) ClearSite() *AgentUpdateOne {
	auo.mutation.ClearSite()
	return auo
}

// Where appends a list predicates to the AgentUpdate builder.
func (auo *AgentUpdateOne) Where(ps ...predicate.Agent) *AgentUpdateOne {
	auo.mutation.Where(ps...)
	return auo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (auo *AgentUpdateOne) Select(field string, fields ...string) *AgentUpdateOne {
	auo.fields = append([]string{field}, fields...)
	return auo
}

// Save executes the query and returns the updated Agent entity.
func (auo *AgentUpdateOne) Save(ctx context.Context) (*Agent, error) {
	return withHooks(ctx, auo.sqlSave, auo.mutation, auo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (auo *AgentUpdateOne) SaveX(ctx context.Context) *Agent {
	node, err := auo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (auo *AgentUpdateOne) Exec(ctx context.Context) error {
	_, err := auo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (auo *AgentUpdateOne) ExecX(ctx context.Context) {
	if err := auo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (auo *AgentUpdateOne) check() error {
	if v, ok := auo.mutation.Os(); ok {
		if err := agent.OsValidator(v); err != nil {
			return &ValidationError{Name: "os", err: fmt.Errorf(`ent: validator failed for field "Agent.os": %w`, err)}
		}
	}
	if v, ok := auo.mutation.Hostname(); ok {
		if err := agent.HostnameValidator(v); err != nil {
			return &ValidationError{Name: "hostname", err: fmt.Errorf(`ent: validator failed for field "Agent.hostname": %w`, err)}
		}
	}
	if v, ok := auo.mutation.AgentStatus(); ok {
		if err := agent.AgentStatusValidator(v); err != nil {
			return &ValidationError{Name: "agent_status", err: fmt.Errorf(`ent: validator failed for field "Agent.agent_status": %w`, err)}
		}
	}
	if v, ok := auo.mutation.EndpointType(); ok {
		if err := agent.EndpointTypeValidator(v); err != nil {
			return &ValidationError{Name: "endpoint_type", err: fmt.Errorf(`ent: validator failed for field "Agent.endpoint_type": %w`, err)}
		}
	}
	return nil
}

// Modify adds a statement modifier for attaching custom logic to the UPDATE statement.
func (auo *AgentUpdateOne) Modify(modifiers ...func(u *sql.UpdateBuilder)) *AgentUpdateOne {
	auo.modifiers = append(auo.modifiers, modifiers...)
	return auo
}

func (auo *AgentUpdateOne) sqlSave(ctx context.Context) (_node *Agent, err error) {
	if err := auo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(agent.Table, agent.Columns, sqlgraph.NewFieldSpec(agent.FieldID, field.TypeString))
	id, ok := auo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Agent.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := auo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, agent.FieldID)
		for _, f := range fields {
			if !agent.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != agent.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := auo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := auo.mutation.Os(); ok {
		_spec.SetField(agent.FieldOs, field.TypeString, value)
	}
	if value, ok := auo.mutation.Hostname(); ok {
		_spec.SetField(agent.FieldHostname, field.TypeString, value)
	}
	if value, ok := auo.mutation.IP(); ok {
		_spec.SetField(agent.FieldIP, field.TypeString, value)
	}
	if value, ok := auo.mutation.MAC(); ok {
		_spec.SetField(agent.FieldMAC, field.TypeString, value)
	}
	if value, ok := auo.mutation.FirstContact(); ok {
		_spec.SetField(agent.FieldFirstContact, field.TypeTime, value)
	}
	if auo.mutation.FirstContactCleared() {
		_spec.ClearField(agent.FieldFirstContact, field.TypeTime)
	}
	if value, ok := auo.mutation.LastContact(); ok {
		_spec.SetField(agent.FieldLastContact, field.TypeTime, value)
	}
	if auo.mutation.LastContactCleared() {
		_spec.ClearField(agent.FieldLastContact, field.TypeTime)
	}
	if value, ok := auo.mutation.Vnc(); ok {
		_spec.SetField(agent.FieldVnc, field.TypeString, value)
	}
	if auo.mutation.VncCleared() {
		_spec.ClearField(agent.FieldVnc, field.TypeString)
	}
	if value, ok := auo.mutation.Notes(); ok {
		_spec.SetField(agent.FieldNotes, field.TypeString, value)
	}
	if auo.mutation.NotesCleared() {
		_spec.ClearField(agent.FieldNotes, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTaskStatus(); ok {
		_spec.SetField(agent.FieldUpdateTaskStatus, field.TypeString, value)
	}
	if auo.mutation.UpdateTaskStatusCleared() {
		_spec.ClearField(agent.FieldUpdateTaskStatus, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTaskDescription(); ok {
		_spec.SetField(agent.FieldUpdateTaskDescription, field.TypeString, value)
	}
	if auo.mutation.UpdateTaskDescriptionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskDescription, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTaskResult(); ok {
		_spec.SetField(agent.FieldUpdateTaskResult, field.TypeString, value)
	}
	if auo.mutation.UpdateTaskResultCleared() {
		_spec.ClearField(agent.FieldUpdateTaskResult, field.TypeString)
	}
	if value, ok := auo.mutation.UpdateTaskExecution(); ok {
		_spec.SetField(agent.FieldUpdateTaskExecution, field.TypeTime, value)
	}
	if auo.mutation.UpdateTaskExecutionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskExecution, field.TypeTime)
	}
	if value, ok := auo.mutation.UpdateTaskVersion(); ok {
		_spec.SetField(agent.FieldUpdateTaskVersion, field.TypeString, value)
	}
	if auo.mutation.UpdateTaskVersionCleared() {
		_spec.ClearField(agent.FieldUpdateTaskVersion, field.TypeString)
	}
	if value, ok := auo.mutation.VncProxyPort(); ok {
		_spec.SetField(agent.FieldVncProxyPort, field.TypeString, value)
	}
	if auo.mutation.VncProxyPortCleared() {
		_spec.ClearField(agent.FieldVncProxyPort, field.TypeString)
	}
	if value, ok := auo.mutation.SftpPort(); ok {
		_spec.SetField(agent.FieldSftpPort, field.TypeString, value)
	}
	if auo.mutation.SftpPortCleared() {
		_spec.ClearField(agent.FieldSftpPort, field.TypeString)
	}
	if value, ok := auo.mutation.AgentStatus(); ok {
		_spec.SetField(agent.FieldAgentStatus, field.TypeEnum, value)
	}
	if auo.mutation.AgentStatusCleared() {
		_spec.ClearField(agent.FieldAgentStatus, field.TypeEnum)
	}
	if value, ok := auo.mutation.CertificateReady(); ok {
		_spec.SetField(agent.FieldCertificateReady, field.TypeBool, value)
	}
	if auo.mutation.CertificateReadyCleared() {
		_spec.ClearField(agent.FieldCertificateReady, field.TypeBool)
	}
	if value, ok := auo.mutation.RestartRequired(); ok {
		_spec.SetField(agent.FieldRestartRequired, field.TypeBool, value)
	}
	if auo.mutation.RestartRequiredCleared() {
		_spec.ClearField(agent.FieldRestartRequired, field.TypeBool)
	}
	if value, ok := auo.mutation.IsRemote(); ok {
		_spec.SetField(agent.FieldIsRemote, field.TypeBool, value)
	}
	if auo.mutation.IsRemoteCleared() {
		_spec.ClearField(agent.FieldIsRemote, field.TypeBool)
	}
	if value, ok := auo.mutation.DebugMode(); ok {
		_spec.SetField(agent.FieldDebugMode, field.TypeBool, value)
	}
	if auo.mutation.DebugModeCleared() {
		_spec.ClearField(agent.FieldDebugMode, field.TypeBool)
	}
	if value, ok := auo.mutation.SftpService(); ok {
		_spec.SetField(agent.FieldSftpService, field.TypeBool, value)
	}
	if auo.mutation.SftpServiceCleared() {
		_spec.ClearField(agent.FieldSftpService, field.TypeBool)
	}
	if value, ok := auo.mutation.RemoteAssistance(); ok {
		_spec.SetField(agent.FieldRemoteAssistance, field.TypeBool, value)
	}
	if auo.mutation.RemoteAssistanceCleared() {
		_spec.ClearField(agent.FieldRemoteAssistance, field.TypeBool)
	}
	if value, ok := auo.mutation.SettingsModified(); ok {
		_spec.SetField(agent.FieldSettingsModified, field.TypeTime, value)
	}
	if auo.mutation.SettingsModifiedCleared() {
		_spec.ClearField(agent.FieldSettingsModified, field.TypeTime)
	}
	if value, ok := auo.mutation.Description(); ok {
		_spec.SetField(agent.FieldDescription, field.TypeString, value)
	}
	if auo.mutation.DescriptionCleared() {
		_spec.ClearField(agent.FieldDescription, field.TypeString)
	}
	if value, ok := auo.mutation.EndpointType(); ok {
		_spec.SetField(agent.FieldEndpointType, field.TypeEnum, value)
	}
	if auo.mutation.EndpointTypeCleared() {
		_spec.ClearField(agent.FieldEndpointType, field.TypeEnum)
	}
	if auo.mutation.ComputerCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.ComputerTable,
			Columns: []string{agent.ComputerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(computer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ComputerIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.ComputerTable,
			Columns: []string{agent.ComputerColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(computer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.OperatingsystemCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.OperatingsystemTable,
			Columns: []string{agent.OperatingsystemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.OperatingsystemIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.OperatingsystemTable,
			Columns: []string{agent.OperatingsystemColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(operatingsystem.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SystemupdateCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.SystemupdateTable,
			Columns: []string{agent.SystemupdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemupdate.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SystemupdateIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.SystemupdateTable,
			Columns: []string{agent.SystemupdateColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(systemupdate.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AntivirusCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.AntivirusTable,
			Columns: []string{agent.AntivirusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(antivirus.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AntivirusIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   agent.AntivirusTable,
			Columns: []string{agent.AntivirusColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(antivirus.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.LogicaldisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedLogicaldisksIDs(); len(nodes) > 0 && !auo.mutation.LogicaldisksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.LogicaldisksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.LogicaldisksTable,
			Columns: []string{agent.LogicaldisksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(logicaldisk.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedAppsIDs(); len(nodes) > 0 && !auo.mutation.AppsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.AppsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.AppsTable,
			Columns: []string{agent.AppsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(app.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMonitorsIDs(); len(nodes) > 0 && !auo.mutation.MonitorsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MonitorsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MonitorsTable,
			Columns: []string{agent.MonitorsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(monitor.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedSharesIDs(); len(nodes) > 0 && !auo.mutation.SharesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SharesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.SharesTable,
			Columns: []string{agent.SharesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(share.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.PrintersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedPrintersIDs(); len(nodes) > 0 && !auo.mutation.PrintersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.PrintersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.PrintersTable,
			Columns: []string{agent.PrintersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(printer.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.NetworkadaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedNetworkadaptersIDs(); len(nodes) > 0 && !auo.mutation.NetworkadaptersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.NetworkadaptersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.NetworkadaptersTable,
			Columns: []string{agent.NetworkadaptersColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(networkadapter.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedDeploymentsIDs(); len(nodes) > 0 && !auo.mutation.DeploymentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.DeploymentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.DeploymentsTable,
			Columns: []string{agent.DeploymentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(deployment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedUpdatesIDs(); len(nodes) > 0 && !auo.mutation.UpdatesCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.UpdatesIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.UpdatesTable,
			Columns: []string{agent.UpdatesColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(update.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedTagsIDs(); len(nodes) > 0 && !auo.mutation.TagsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.TagsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: false,
			Table:   agent.TagsTable,
			Columns: agent.TagsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(tag.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMetadataIDs(); len(nodes) > 0 && !auo.mutation.MetadataCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MetadataIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MetadataTable,
			Columns: []string{agent.MetadataColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(metadata.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.WingetcfgexclusionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedWingetcfgexclusionsIDs(); len(nodes) > 0 && !auo.mutation.WingetcfgexclusionsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.WingetcfgexclusionsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.WingetcfgexclusionsTable,
			Columns: []string{agent.WingetcfgexclusionsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(wingetconfigexclusion.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.MemoryslotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedMemoryslotsIDs(); len(nodes) > 0 && !auo.mutation.MemoryslotsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.MemoryslotsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   agent.MemoryslotsTable,
			Columns: []string{agent.MemoryslotsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(memoryslot.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ReleaseCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ReleaseTable,
			Columns: []string{agent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ReleaseIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.ReleaseTable,
			Columns: []string{agent.ReleaseColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(release.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.ProfileissueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.RemovedProfileissueIDs(); len(nodes) > 0 && !auo.mutation.ProfileissueCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.ProfileissueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: true,
			Table:   agent.ProfileissueTable,
			Columns: []string{agent.ProfileissueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(profileissue.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if auo.mutation.SiteCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.SiteTable,
			Columns: []string{agent.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := auo.mutation.SiteIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   agent.SiteTable,
			Columns: []string{agent.SiteColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(site.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_spec.AddModifiers(auo.modifiers...)
	_node = &Agent{config: auo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, auo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{agent.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	auo.mutation.done = true
	return _node, nil
}
